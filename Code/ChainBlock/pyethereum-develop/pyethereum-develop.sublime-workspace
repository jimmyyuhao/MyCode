{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "ethereum/opcodes.py",
			"settings":
			{
				"buffer_size": 4365,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/messages.py",
			"settings":
			{
				"buffer_size": 15124,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/utils.py",
			"settings":
			{
				"buffer_size": 13663,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/__init__.py",
			"settings":
			{
				"buffer_size": 1594,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/new_state.py",
			"settings":
			{
				"buffer_size": 17458,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/snapshot.py",
			"settings":
			{
				"buffer_size": 6420,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 2764,
				"line_ending": "Unix"
			}
		},
		{
			"file": "setup.cfg",
			"settings":
			{
				"buffer_size": 157,
				"line_ending": "Unix"
			}
		},
		{
			"file": "setup.py",
			"settings":
			{
				"buffer_size": 1605,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/todo_tests/test_pos.py",
			"settings":
			{
				"buffer_size": 8747,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 119 files for \"for\" (case sensitive)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\.tags:\n    1: !_TAG_FILE_FORMAT\t2\t/extended format; --format=1 will not append ;\" to lines/\n    2  !_TAG_FILE_SORTED\t1\t/0=unsorted, 1=sorted, 2=foldcase/\n    3: !_TAG_PROGRAM_AUTHOR\tDarren Hiebert\t/dhiebert@users.sourceforge.net/\n    4  !_TAG_PROGRAM_NAME\tExuberant Ctags\t//\n    5: !_TAG_PROGRAM_URL\thttp://ctags.sourceforge.net\t/official site/\n    6  !_TAG_PROGRAM_VERSION\t5.8\t//\n    7  ABIContract\t.\\ethereum\\tests\\test_tester.py\t/^from ethereum.tools.tester import Chain, ABIContract$/;\"\ti\n    .\n  546  __setitem__\t.\\ethereum\\trie.py\t/^    def __setitem__(self, key, value):$/;\"\tm\tclass:Trie\tfile:\n  547  __structlog__\t.\\ethereum\\transactions.py\t/^    def __structlog__(self):$/;\"\tm\tclass:Transaction\tfile:\n  548: __version__\t.\\ethereum\\__init__.py\t/^            __version__ = \"{}+git-{}\".format(match.group(\"version\"), match.group(\"git\"))$/;\"\tv\n  549  __version__\t.\\ethereum\\__init__.py\t/^    __version__ = 'undefined'$/;\"\tv\n  550  __version__\t.\\ethereum\\__init__.py\t/^    __version__ = _dist.version$/;\"\tv\n  ...\n  654  add_suicide\t.\\ethereum\\new_state.py\t/^    def add_suicide(self, address):$/;\"\tm\tclass:State\n  655  add_suicide\t.\\ethereum\\state.py\t/^    def add_suicide(self, address):$/;\"\tm\tclass:State\n  656: add_transaction\t.\\ethereum\\transaction_queue.py\t/^    def add_transaction(self, tx, force=False):$/;\"\tm\tclass:TransactionQueue\n  657  add_transactions\t.\\ethereum\\common.py\t/^def add_transactions(state, block, txqueue, min_gasprice=0):$/;\"\tf\n  658  add_transactions\t.\\ethereum\\meta.py\t/^    set_execution_results, add_transactions, post_finalize$/;\"\ti\n  ...\n  662  address\t.\\ethereum\\state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n  663  address\t.\\ethereum\\utils.py\t/^address = Binary.fixed_length(20, allow_empty=True)$/;\"\tv\n  664: addrs\t.\\ethereum\\todo_tests\\test_pos.py\t/^addrs = [utils.privtoaddr(k) for k in privkeys]$/;\"\tv\n  665  aes_ctr_decrypt\t.\\ethereum\\tools\\keys.py\t/^def aes_ctr_decrypt(text, key, params):$/;\"\tf\n  666  aes_ctr_encrypt\t.\\ethereum\\tools\\keys.py\t/^def aes_ctr_encrypt(text, key, params):$/;\"\tf\n  ...\n  669  all_but_1n\t.\\ethereum\\vm.py\t/^def all_but_1n(x, n):$/;\"\tf\n  670  all_nodes\t.\\ethereum\\experimental\\pruning_trie.py\t/^    def all_nodes(self, node=None):$/;\"\tm\tclass:Trie\n  671: alloc\t.\\ethereum\\todo_tests\\test_pos.py\t/^                        alloc={a: {'balance': 10**18} for a in addrs},$/;\"\tv\n  672: alt_content\t.\\ethereum\\tests\\test_db.py\t/^alt_content = {key: random_string(32) for key in content}$/;\"\tv\n  673  alt_db\t.\\ethereum\\tests\\test_chain.py\t/^alt_db = db$/;\"\tv\n  674  apply_block\t.\\ethereum\\meta.py\t/^def apply_block(state, block):$/;\"\tf\n  ...\n  767  block_source_data\t.\\ethereum\\todo_tests\\tst_frontier.py\t/^block_source_data = f.read()$/;\"\tv\n  768  blocks\t.\\ethereum\\experimental\\spv.py\t/^from ethereum import blocks$/;\"\ti\n  769: blocks_by_v0_in_stage1\t.\\ethereum\\todo_tests\\test_pos.py\t/^blocks_by_v0_in_stage1 = len([x for x in vids[:200] if x == 0])$/;\"\tv\n  770: blocks_by_v0_in_stage2\t.\\ethereum\\todo_tests\\test_pos.py\t/^blocks_by_v0_in_stage2 = len([x for x in vids[200:400] if x == 0])$/;\"\tv\n  771  blocks_genesis\t.\\ethereum\\tests\\test_genesis.py\t/^def blocks_genesis(*args):  # FIXME!$/;\"\tf\n  772  bloom\t.\\ethereum\\bloom.py\t/^def bloom(val):$/;\"\tf\n  ...\n  826  chain\t.\\ethereum\\todo_tests\\tst_frontier.py\t/^from ethereum.pow import chain$/;\"\ti\n  827  chain_difficulty\t.\\ethereum\\snapshot.py\t/^    def chain_difficulty(self):$/;\"\tm\tclass:FakeBlock\n  828: chains\t.\\ethereum\\todo_tests\\test_pos.py\t/^chains = [Chain(s.to_snapshot(), env=s.env) for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n  829  change_head\t.\\ethereum\\tools\\tester.py\t/^    def change_head(self, parent, coinbase=a0):$/;\"\tm\tclass:Chain\n  830  check_abi_test\t.\\ethereum\\tools\\testutils.py\t/^check_abi_test = lambda params: run_abi_test(params, VERIFY)$/;\"\tv\n  ...\n  898  config\t.\\ethereum\\tests\\test_difficulty.py\t/^import ethereum.config as config$/;\"\ti\n  899  config\t.\\ethereum\\tests\\test_transactions.py\t/^import ethereum.config as config$/;\"\ti\n  900: config_fork_specific_validation\t.\\ethereum\\messages.py\t/^def config_fork_specific_validation(config, blknum, tx):$/;\"\tf\n  901: config_fork_specific_validation\t.\\ethereum\\tests\\test_transactions.py\t/^from ethereum.messages import config_fork_specific_validation, null_address$/;\"\ti\n  902  config_frontier\t.\\ethereum\\config.py\t/^config_frontier = copy.copy(default_config)$/;\"\tv\n  903  config_frontier\t.\\ethereum\\tools\\new_statetest_utils.py\t/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;\"\ti\n  ...\n 1046  delta_balance\t.\\ethereum\\state.py\t/^    def delta_balance(self, address, value):$/;\"\tm\tclass:State\n 1047  denoms\t.\\ethereum\\utils.py\t/^denoms = Denoms()$/;\"\tv\n 1048: deposit_sizes\t.\\ethereum\\todo_tests\\test_pos.py\t/^deposit_sizes = [i * 500 + 500 for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1049  description\t.\\setup.py\t/^    description='Next generation cryptocurrency network',$/;\"\tv\n 1050  deserialize_cache\t.\\ethereum\\pow\\ethash_utils.py\t/^def deserialize_cache(ds):$/;\"\tf\n ....\n 1205  f\t.\\tools\\fixture_to_example.py\t/^    f = sys.argv[1]$/;\"\tv\n 1206  failing\t.\\ethereum\\todo_tests\\test_vm_failing.py\t/^failing = [$/;\"\tv\n 1207: failing\t.\\ethereum\\todo_tests\\test_vm_failing.py\t/^failing = [x.split('_', 1)[-1] for x in failing]  # testnames$/;\"\tv\n 1208  fake_headers\t.\\ethereum\\tools\\new_statetest_utils.py\t/^fake_headers = {}$/;\"\tv\n 1209  fake_point\t.\\tools\\mk_ecpairing_tests.py\t/^    fake_point = (x, y, FQ2_one)$/;\"\tv\n ....\n 1241  fm\t.\\tools\\mk_ecpairing_tests.py\t/^fm = py_pairing.field_modulus$/;\"\tv\n 1242  fnv\t.\\ethereum\\pow\\ethash_utils.py\t/^def fnv(v1, v2):$/;\"\tf\n 1243: format_item\t.\\tools\\fixture_to_example.py\t/^def format_item(item, py=True):$/;\"\tf\n 1244: format_message\t.\\ethereum\\slogging.py\t/^    def format_message(self, msg, kwargs, highlight, level):$/;\"\tm\tclass:SLogger\n 1245: format_to_example\t.\\tools\\fixture_to_example.py\t/^def format_to_example(table, tabspace=2, indent=2):$/;\"\tf\n 1246: formt\t.\\ethereum\\todo_tests\\test_remoteblocks.py\t/^    formt = sys.argv[4] if len(sys.argv) > 4 else 'lines'$/;\"\tv\n 1247  from_snapshot\t.\\ethereum\\new_state.py\t/^    def from_snapshot(cls, snapshot_data, env):$/;\"\tm\tclass:State\n 1248  from_snapshot\t.\\ethereum\\state.py\t/^    def from_snapshot(cls, snapshot_data, env, executing_on_head=False):$/;\"\tm\tclass:State\n ....\n 1421  inner\t.\\ethereum\\utils.py\t/^    def inner(f):$/;\"\tf\tfunction:print_func_call\n 1422  install_requires\t.\\setup.py\t/^    install_requires=install_requires,$/;\"\tv\n 1423: install_requires\t.\\setup.py\t/^install_requires = [install_requires_replacements.get(r, r) for r in install_requires]$/;\"\tv\n 1424: install_requires\t.\\setup.py\t/^install_requires = set(x.strip() for x in open('requirements.txt'))$/;\"\tv\n 1425  install_requires_replacements\t.\\setup.py\t/^install_requires_replacements = {$/;\"\tv\n 1426  instead\t.\\ethereum\\abi.py\t/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;\"\ti\n ....\n 1458  intrinsic_gas_of_data\t.\\tools\\mk_modexp_tests.py\t/^def intrinsic_gas_of_data(d):$/;\"\tf\n 1459  intrinsic_gas_used\t.\\ethereum\\transactions.py\t/^    def intrinsic_gas_used(self):$/;\"\tm\tclass:Transaction\n 1460: is_ANTI_DOS\t.\\ethereum\\new_state.py\t/^    def is_ANTI_DOS(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1461: is_ANTI_DOS\t.\\ethereum\\state.py\t/^    def is_ANTI_DOS(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1462: is_DAO\t.\\ethereum\\new_state.py\t/^    def is_DAO(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1463: is_DAO\t.\\ethereum\\state.py\t/^    def is_DAO(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1464: is_HOMESTEAD\t.\\ethereum\\new_state.py\t/^    def is_HOMESTEAD(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1465: is_HOMESTEAD\t.\\ethereum\\state.py\t/^    def is_HOMESTEAD(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1466: is_METROPOLIS\t.\\ethereum\\new_state.py\t/^    def is_METROPOLIS(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1467: is_METROPOLIS\t.\\ethereum\\state.py\t/^    def is_METROPOLIS(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1468: is_SERENITY\t.\\ethereum\\new_state.py\t/^    def is_SERENITY(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1469: is_SERENITY\t.\\ethereum\\state.py\t/^    def is_SERENITY(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1470: is_SPURIOUS_DRAGON\t.\\ethereum\\new_state.py\t/^    def is_SPURIOUS_DRAGON(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1471: is_SPURIOUS_DRAGON\t.\\ethereum\\state.py\t/^    def is_SPURIOUS_DRAGON(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1472  is_active\t.\\ethereum\\slogging.py\t/^    def is_active(self, level_name='trace'):$/;\"\tm\tclass:SLogger\n 1473  is_blank\t.\\ethereum\\new_state.py\t/^    def is_blank(self):$/;\"\tm\tclass:Account\n ....\n 1644  make_withdrawal_signature\t.\\ethereum\\todo_tests\\test_pos.py\t/^    make_withdrawal_signature$/;\"\ti\n 1645  match\t.\\ethereum\\__init__.py\t/^        match = GIT_DESCRIBE_RE.match(rev)$/;\"\tv\n 1646: max_capacity\t.\\ethereum\\slogging.py\t/^    max_capacity = 1000 * 1000  # check we are not forgotten or abused$/;\"\tv\tclass:LogRecorder\n 1647  mem_extend\t.\\ethereum\\experimental\\fastvm.py\t/^def mem_extend(mem, compustate, op, start, sz):$/;\"\tf\n 1648  mem_extend\t.\\ethereum\\fastvm.py\t/^def mem_extend(mem, compustate, op, start, sz):$/;\"\tf\n ....\n 1741  not_a_difficulty_test\t.\\ethereum\\tests\\test_difficulty.py\t/^def not_a_difficulty_test(filename, testname, testdata):$/;\"\tf\n 1742  null_address\t.\\ethereum\\messages.py\t/^null_address = b'\\\\xff' * 20$/;\"\tv\n 1743: null_address\t.\\ethereum\\tests\\test_transactions.py\t/^from ethereum.messages import config_fork_specific_validation, null_address$/;\"\ti\n 1744  null_address\t.\\ethereum\\transactions.py\t/^null_address = b'\\\\xff' * 20$/;\"\tv\n 1745  num_blks\t.\\ethereum\\todo_tests\\tst_frontier.py\t/^            num_blks = 0$/;\"\tv\n ....\n 1840  print_function\t.\\ethereum\\abi.py\t/^from __future__ import print_function$/;\"\ti\n 1841  printers\t.\\ethereum\\utils.py\t/^printers = {$/;\"\tv\n 1842: privkeys\t.\\ethereum\\todo_tests\\test_pos.py\t/^privkeys = [utils.sha3(str(i)) for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1843  privtoaddr\t.\\ethereum\\tools\\keys.py\t/^def privtoaddr(x):$/;\"\tf\n 1844  privtoaddr\t.\\ethereum\\tools\\tester.py\t/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;\"\ti\n ....\n 1900  pytest_generate_tests\t.\\ethereum\\tests\\test_transactions.py\t/^def pytest_generate_tests(metafunc):$/;\"\tf\n 1901  pytest_generate_tests\t.\\ethereum\\todo_tests\\test_vm.py\t/^def pytest_generate_tests(metafunc):$/;\"\tf\n 1902: randaos\t.\\ethereum\\todo_tests\\test_pos.py\t/^randaos = [RandaoManager(utils.sha3(str(i))) for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1903  randint\t.\\ethereum\\pow\\ethash.py\t/^    from random import randint$/;\"\ti\n 1904  random\t.\\ethereum\\pow\\chain.py\t/^import random$/;\"\ti\n ....\n 2077  snapshot\t.\\ethereum\\todo_tests\\tst_frontier.py\t/^def snapshot(c, num_blocks):$/;\"\tf\n 2078  snapshot\t.\\ethereum\\tools\\tester.py\t/^    def snapshot(self):$/;\"\tm\tclass:Chain\n 2079: snapshot_form\t.\\ethereum\\new_state.py\t/^def snapshot_form(val):$/;\"\tf\n 2080: snapshot_form\t.\\ethereum\\snapshot.py\t/^def snapshot_form(val):$/;\"\tf\n 2081: snapshot_form\t.\\ethereum\\state.py\t/^def snapshot_form(val):$/;\"\tf\n 2082  solc_arguments\t.\\ethereum\\tools\\_solidity.py\t/^def solc_arguments(libraries=None, combined='bin,abi', optimize=True, extra_args=None):$/;\"\tf\n 2083  solc_parse_output\t.\\ethereum\\tools\\_solidity.py\t/^def solc_parse_output(compiler_output):$/;\"\tf\n ....\n 2262  test_namecoin\t.\\ethereum\\tests\\test_contracts.py\t/^def test_namecoin():$/;\"\tf\n 2263  test_names\t.\\ethereum\\todo_tests\\test_solidity.py\t/^def test_names():$/;\"\tf\n 2264: test_new_format\t.\\ethereum\\tests\\test_contracts.py\t/^def test_new_format():$/;\"\tf\n 2265  test_orderable_tx\t.\\ethereum\\transaction_queue.py\t/^def test_orderable_tx():$/;\"\tf\n 2266: test_ordering_for_same_prio\t.\\ethereum\\transaction_queue.py\t/^def test_ordering_for_same_prio():$/;\"\tf\n 2267  test_params_contract\t.\\ethereum\\tests\\test_contracts.py\t/^def test_params_contract():$/;\"\tf\n 2268  test_pow\t.\\ethereum\\todo_tests\\test_ethash.py\t/^def test_pow():$/;\"\tf\n ....\n 2335  tests\t.\\tools\\mk_modexp_tests.py\t/^tests = []$/;\"\tv\n 2336  tests_require\t.\\setup.py\t/^    tests_require=tests_require,$/;\"\tv\n 2337: tests_require\t.\\setup.py\t/^tests_require = [tests_require_replacements.get(r, r) for r in tests_require]$/;\"\tv\n 2338: tests_require\t.\\setup.py\t/^tests_require = set(x.strip() for x in open('dev_requirements.txt'))$/;\"\tv\n 2339  tests_require_replacements\t.\\setup.py\t/^tests_require_replacements = dict()$/;\"\tv\n 2340  tests_require_replacements\t.\\setup.py\t/^tests_require_replacements = {$/;\"\tv\n ....\n 2390  to_string\t.\\ethereum\\utils.py\t/^    def to_string(value):$/;\"\tf\n 2391  to_string\t.\\ethereum\\vm.py\t/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr, safe_ord$/;\"\ti\n 2392: to_string_for_regexp\t.\\ethereum\\utils.py\t/^    def to_string_for_regexp(value):$/;\"\tf\n 2393  tools\t.\\ethereum\\tests\\test_abi.py\t/^import ethereum.tools.testutils as testutils$/;\"\ti\n 2394  tools\t.\\ethereum\\tests\\test_blocks.py\t/^import ethereum.tools.testutils as testutils$/;\"\ti\n ....\n 2496  valueconv\t.\\ethereum\\tests\\test_blocks.py\t/^def valueconv(k, v):$/;\"\tf\n 2497  vc\t.\\ethereum\\todo_tests\\test_pos.py\t/^vc = generate_validation_code(a)$/;\"\tv\n 2498: vchashes\t.\\ethereum\\todo_tests\\test_pos.py\t/^vchashes = [utils.sha3(c) for c in vcodes]$/;\"\tv\n 2499: vcodes\t.\\ethereum\\todo_tests\\test_pos.py\t/^vcodes = [generate_validation_code(a) for a in addrs]$/;\"\tv\n 2500  verify_execution_results\t.\\ethereum\\common.py\t/^def verify_execution_results(state, block):$/;\"\tf\n 2501  verify_execution_results\t.\\ethereum\\meta.py\t/^    set_execution_results, add_transactions, post_finalize$/;\"\ti\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\.tags_sorted_by_file:\n    2  DistributionNotFound\tethereum\\__init__.py\t/^    from pkg_resources import get_distribution, DistributionNotFound$/;\"\ti\n    3  GIT_DESCRIBE_RE\tethereum\\__init__.py\t/^GIT_DESCRIBE_RE = re.compile('^(?P<version>v\\\\d+\\\\.\\\\d+\\\\.\\\\d+)-(?P<git>\\\\d+-g[a-fA-F0-9]+(?:-dirty)?)$')$/;\"\tv\n    4: __version__\tethereum\\__init__.py\t/^            __version__ = \"{}+git-{}\".format(match.group(\"version\"), match.group(\"git\"))$/;\"\tv\n    5  __version__\tethereum\\__init__.py\t/^    __version__ = 'undefined'$/;\"\tv\n    6  __version__\tethereum\\__init__.py\t/^    __version__ = _dist.version$/;\"\tv\n    .\n  676  bloomables\tethereum\\messages.py\t/^    def bloomables(self):$/;\"\tm\tclass:Log\n  677  bytearray_to_bytestr\tethereum\\messages.py\t/^    ascii_chr, bytearray_to_bytestr$/;\"\ti\n  678: config_fork_specific_validation\tethereum\\messages.py\t/^def config_fork_specific_validation(config, blknum, tx):$/;\"\tf\n  679  create_contract\tethereum\\messages.py\t/^def create_contract(ext, msg):$/;\"\tf\n  680  decode_hex\tethereum\\messages.py\t/^from rlp.utils import decode_hex, encode_hex, ascii_chr$/;\"\ti\n  ...\n  792  int256\tethereum\\new_state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n  793  int_to_addr\tethereum\\new_state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n  794: is_ANTI_DOS\tethereum\\new_state.py\t/^    def is_ANTI_DOS(self, at_fork_height=False):$/;\"\tm\tclass:State\n  795: is_DAO\tethereum\\new_state.py\t/^    def is_DAO(self, at_fork_height=False):$/;\"\tm\tclass:State\n  796: is_HOMESTEAD\tethereum\\new_state.py\t/^    def is_HOMESTEAD(self, at_fork_height=False):$/;\"\tm\tclass:State\n  797: is_METROPOLIS\tethereum\\new_state.py\t/^    def is_METROPOLIS(self, at_fork_height=False):$/;\"\tm\tclass:State\n  798: is_SERENITY\tethereum\\new_state.py\t/^    def is_SERENITY(self, at_fork_height=False):$/;\"\tm\tclass:State\n  799: is_SPURIOUS_DRAGON\tethereum\\new_state.py\t/^    def is_SPURIOUS_DRAGON(self, at_fork_height=False):$/;\"\tm\tclass:State\n  800  is_blank\tethereum\\new_state.py\t/^    def is_blank(self):$/;\"\tm\tclass:Account\n  801  is_numeric\tethereum\\new_state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n  ...\n  819  sha3\tethereum\\new_state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n  820  snapshot\tethereum\\new_state.py\t/^    def snapshot(self):$/;\"\tm\tclass:State\n  821: snapshot_form\tethereum\\new_state.py\t/^def snapshot_form(val):$/;\"\tf\n  822  sys\tethereum\\new_state.py\t/^import sys$/;\"\ti\n  823  to_dict\tethereum\\new_state.py\t/^    def to_dict(self):$/;\"\tm\tclass:Account\n  ...\n 1091  error\tethereum\\slogging.py\t/^    error = lambda self, *args, **kwargs: self._proxy('error', *args, **kwargs)$/;\"\tv\tclass:BoundLogger\n 1092  exception\tethereum\\slogging.py\t/^    exception = lambda self, *args, **kwargs: self._proxy('exception', *args, **kwargs)$/;\"\tv\tclass:BoundLogger\n 1093: format_message\tethereum\\slogging.py\t/^    def format_message(self, msg, kwargs, highlight, level):$/;\"\tm\tclass:SLogger\n 1094  getLogger\tethereum\\slogging.py\t/^    def getLogger(self, name):$/;\"\tm\tclass:SManager\n 1095  getLogger\tethereum\\slogging.py\t/^def getLogger(name=None):$/;\"\tf\n ....\n 1106  log_listeners\tethereum\\slogging.py\t/^log_listeners = []$/;\"\tv\n 1107  logging\tethereum\\slogging.py\t/^import logging$/;\"\ti\n 1108: max_capacity\tethereum\\slogging.py\t/^    max_capacity = 1000 * 1000  # check we are not forgotten or abused$/;\"\tv\tclass:LogRecorder\n 1109  pop_records\tethereum\\slogging.py\t/^    def pop_records(self):$/;\"\tm\tclass:LogRecorder\n 1110  rootLogger\tethereum\\slogging.py\t/^rootLogger = RootLogger(DEFAULT_LOGLEVEL)$/;\"\tv\n ....\n 1145  rlp\tethereum\\snapshot.py\t/^import rlp$/;\"\ti\n 1146  scan_bin\tethereum\\snapshot.py\t/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;\"\ti\n 1147: snapshot_form\tethereum\\snapshot.py\t/^def snapshot_form(val):$/;\"\tf\n 1148  zpad\tethereum\\snapshot.py\t/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;\"\ti\n 1149  ZERO_PRIVKEY_ADDR\tethereum\\specials.py\t/^ZERO_PRIVKEY_ADDR = decode_hex('3f17f1962b36e491b30a40b2405849e597ba5fb5')$/;\"\tv\n ....\n 1236  int256\tethereum\\state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n 1237  int_to_addr\tethereum\\state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n 1238: is_ANTI_DOS\tethereum\\state.py\t/^    def is_ANTI_DOS(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1239: is_DAO\tethereum\\state.py\t/^    def is_DAO(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1240: is_HOMESTEAD\tethereum\\state.py\t/^    def is_HOMESTEAD(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1241: is_METROPOLIS\tethereum\\state.py\t/^    def is_METROPOLIS(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1242: is_SERENITY\tethereum\\state.py\t/^    def is_SERENITY(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1243: is_SPURIOUS_DRAGON\tethereum\\state.py\t/^    def is_SPURIOUS_DRAGON(self, at_fork_height=False):$/;\"\tm\tclass:State\n 1244  is_blank\tethereum\\state.py\t/^    def is_blank(self):$/;\"\tm\tclass:Account\n 1245  is_numeric\tethereum\\state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n ....\n 1263  sha3\tethereum\\state.py\t/^    decode_hex, sha3, is_string, is_numeric$/;\"\ti\n 1264  snapshot\tethereum\\state.py\t/^    def snapshot(self):$/;\"\tm\tclass:State\n 1265: snapshot_form\tethereum\\state.py\t/^def snapshot_form(val):$/;\"\tf\n 1266  sys\tethereum\\state.py\t/^import sys$/;\"\ti\n 1267  to_dict\tethereum\\state.py\t/^    def to_dict(self):$/;\"\tm\tclass:Account\n ....\n 1451  test_multiarg_code\tethereum\\tests\\test_contracts.py\t/^def test_multiarg_code():$/;\"\tf\n 1452  test_namecoin\tethereum\\tests\\test_contracts.py\t/^def test_namecoin():$/;\"\tf\n 1453: test_new_format\tethereum\\tests\\test_contracts.py\t/^def test_new_format():$/;\"\tf\n 1454  test_params_contract\tethereum\\tests\\test_contracts.py\t/^def test_params_contract():$/;\"\tf\n 1455  test_prefix_types_in_functions\tethereum\\tests\\test_contracts.py\t/^def test_prefix_types_in_functions():$/;\"\tf\n ....\n 1478  utils\tethereum\\tests\\test_contracts.py\t/^from ethereum import utils, abi$/;\"\ti\n 1479  _EphemDB\tethereum\\tests\\test_db.py\t/^from ethereum.db import _EphemDB$/;\"\ti\n 1480: alt_content\tethereum\\tests\\test_db.py\t/^alt_content = {key: random_string(32) for key in content}$/;\"\tv\n 1481  ascii_chr\tethereum\\tests\\test_db.py\t/^from rlp.utils import ascii_chr$/;\"\ti\n 1482  content\tethereum\\tests\\test_db.py\t/^content = {random_string(lk): random_string(lv)$/;\"\tv\n ....\n 1571  test_abicontract_interface\tethereum\\tests\\test_tester.py\t/^def test_abicontract_interface():$/;\"\tf\n 1572  config\tethereum\\tests\\test_transactions.py\t/^import ethereum.config as config$/;\"\ti\n 1573: config_fork_specific_validation\tethereum\\tests\\test_transactions.py\t/^from ethereum.messages import config_fork_specific_validation, null_address$/;\"\ti\n 1574  copy\tethereum\\tests\\test_transactions.py\t/^import copy$/;\"\ti\n 1575  decode_hex\tethereum\\tests\\test_transactions.py\t/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;\"\ti\n ....\n 1583  logger\tethereum\\tests\\test_transactions.py\t/^logger = get_logger()$/;\"\tv\n 1584  main\tethereum\\tests\\test_transactions.py\t/^def main():$/;\"\tf\n 1585: null_address\tethereum\\tests\\test_transactions.py\t/^from ethereum.messages import config_fork_specific_validation, null_address$/;\"\ti\n 1586  pytest_generate_tests\tethereum\\tests\\test_transactions.py\t/^def pytest_generate_tests(metafunc):$/;\"\tf\n 1587  rlp\tethereum\\tests\\test_transactions.py\t/^import rlp$/;\"\ti\n ....\n 1686  TransactionQueue\tethereum\\todo_tests\\test_pos.py\t/^from ethereum.transaction_queue import TransactionQueue$/;\"\ti\n 1687  abi\tethereum\\todo_tests\\test_pos.py\t/^from ethereum import abi$/;\"\ti\n 1688: addrs\tethereum\\todo_tests\\test_pos.py\t/^addrs = [utils.privtoaddr(k) for k in privkeys]$/;\"\tv\n 1689: alloc\tethereum\\todo_tests\\test_pos.py\t/^                        alloc={a: {'balance': 10**18} for a in addrs},$/;\"\tv\n 1690  apply_const_message\tethereum\\todo_tests\\test_pos.py\t/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;\"\ti\n 1691  apply_transaction\tethereum\\todo_tests\\test_pos.py\t/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;\"\ti\n ....\n 1694  b2\tethereum\\todo_tests\\test_pos.py\t/^b2 = make_block(chains[0], privkeys[next_validator_id],$/;\"\tv\n 1695  b3\tethereum\\todo_tests\\test_pos.py\t/^b3 = make_block(chains[1], privkeys[next_validator_id],$/;\"\tv\n 1696: blocks_by_v0_in_stage1\tethereum\\todo_tests\\test_pos.py\t/^blocks_by_v0_in_stage1 = len([x for x in vids[:200] if x == 0])$/;\"\tv\n 1697: blocks_by_v0_in_stage2\tethereum\\todo_tests\\test_pos.py\t/^blocks_by_v0_in_stage2 = len([x for x in vids[200:400] if x == 0])$/;\"\tv\n 1698  bn\tethereum\\todo_tests\\test_pos.py\t/^bn = call_casper(chains[0].state, 'getBlockNumber')$/;\"\tv\n 1699  call_casper\tethereum\\todo_tests\\test_pos.py\t/^    make_withdrawal_signature$/;\"\ti\n 1700  casper_config\tethereum\\todo_tests\\test_pos.py\t/^    make_withdrawal_signature$/;\"\ti\n 1701: chains\tethereum\\todo_tests\\test_pos.py\t/^chains = [Chain(s.to_snapshot(), env=s.env) for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1702  config_string\tethereum\\todo_tests\\test_pos.py\t/^config_string = ':info,eth.vm.log:trace'$/;\"\tv\n 1703  configure_logging\tethereum\\todo_tests\\test_pos.py\t/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;\"\ti\n ....\n 1705  ct\tethereum\\todo_tests\\test_pos.py\t/^ct = get_casper_ct()$/;\"\tv\n 1706  default_config\tethereum\\todo_tests\\test_pos.py\t/^from ethereum.config import default_config, Env$/;\"\ti\n 1707: deposit_sizes\tethereum\\todo_tests\\test_pos.py\t/^deposit_sizes = [i * 500 + 500 for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1708  epoch_length\tethereum\\todo_tests\\test_pos.py\t/^                        epoch_length=100)$/;\"\tv\n 1709  expected_revenue_in_stage1\tethereum\\todo_tests\\test_pos.py\t/^expected_revenue_in_stage1 = blocks_by_v0_in_stage1 * max(sum(deposit_sizes[:-1]), 1000000) * 10**18 * BLOCK_MAKING_PPB \\/ 10**9$/;\"\tv\n ....\n 1731  post_bal\tethereum\\todo_tests\\test_pos.py\t/^post_bal = chains[0].state.get_balance(addrs[0])$/;\"\tv\n 1732  pre_bal\tethereum\\todo_tests\\test_pos.py\t/^pre_bal = chains[0].state.get_balance(addrs[0])$/;\"\tv\n 1733: privkeys\tethereum\\todo_tests\\test_pos.py\t/^privkeys = [utils.sha3(str(i)) for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1734: randaos\tethereum\\todo_tests\\test_pos.py\t/^randaos = [RandaoManager(utils.sha3(str(i))) for i in range(NUM_PARTICIPANTS)]$/;\"\tv\n 1735  rlp\tethereum\\todo_tests\\test_pos.py\t/^import rlp$/;\"\ti\n 1736  s\tethereum\\todo_tests\\test_pos.py\t/^s = make_casper_genesis(validators=[(generate_validation_code(a), ds * 10**18, r.get(9999), a)$/;\"\tv\n ....\n 1751  validate_block_header\tethereum\\todo_tests\\test_pos.py\t/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;\"\ti\n 1752  vc\tethereum\\todo_tests\\test_pos.py\t/^vc = generate_validation_code(a)$/;\"\tv\n 1753: vchashes\tethereum\\todo_tests\\test_pos.py\t/^vchashes = [utils.sha3(c) for c in vcodes]$/;\"\tv\n 1754: vcodes\tethereum\\todo_tests\\test_pos.py\t/^vcodes = [generate_validation_code(a) for a in addrs]$/;\"\tv\n 1755  vids\tethereum\\todo_tests\\test_pos.py\t/^vids = []$/;\"\tv\n 1756  vm\tethereum\\todo_tests\\test_pos.py\t/^from ethereum import vm$/;\"\ti\n ....\n 1796  utils\tethereum\\todo_tests\\test_pruning_trie.py\t/^import ethereum.utils as utils$/;\"\ti\n 1797  DB\tethereum\\todo_tests\\test_remoteblocks.py\t/^from ethereum.db import DB$/;\"\ti\n 1798: formt\tethereum\\todo_tests\\test_remoteblocks.py\t/^    formt = sys.argv[4] if len(sys.argv) > 4 else 'lines'$/;\"\tv\n 1799  get_logger\tethereum\\todo_tests\\test_remoteblocks.py\t/^from ethereum.slogging import get_logger$/;\"\ti\n 1800  import_chain_data\tethereum\\todo_tests\\test_remoteblocks.py\t/^def import_chain_data(raw_blocks_fn, test_db_path, skip=0):$/;\"\tf\n ....\n 1838  ethereum\tethereum\\todo_tests\\test_vm_failing.py\t/^import ethereum.testutils as testutils$/;\"\ti\n 1839  failing\tethereum\\todo_tests\\test_vm_failing.py\t/^failing = [$/;\"\tv\n 1840: failing\tethereum\\todo_tests\\test_vm_failing.py\t/^failing = [x.split('_', 1)[-1] for x in failing]  # testnames$/;\"\tv\n 1841  fixtures\tethereum\\todo_tests\\test_vm_failing.py\t/^fixtures = testutils.get_tests_from_file_or_dir($/;\"\tv\n 1842  get_logger\tethereum\\todo_tests\\test_vm_failing.py\t/^from ethereum.slogging import get_logger$/;\"\ti\n ....\n 2109  __len__\tethereum\\transaction_queue.py\t/^    def __len__(self):$/;\"\tm\tclass:TransactionQueue\tfile:\n 2110  __lt__\tethereum\\transaction_queue.py\t/^    def __lt__(self, other):$/;\"\tm\tclass:OrderableTx\tfile:\n 2111: add_transaction\tethereum\\transaction_queue.py\t/^    def add_transaction(self, tx, force=False):$/;\"\tm\tclass:TransactionQueue\n 2112  diff\tethereum\\transaction_queue.py\t/^    def diff(self, txs):$/;\"\tm\tclass:TransactionQueue\n 2113  heapq\tethereum\\transaction_queue.py\t/^import heapq$/;\"\ti\n ....\n 2118  test_diff\tethereum\\transaction_queue.py\t/^def test_diff():$/;\"\tf\n 2119  test_orderable_tx\tethereum\\transaction_queue.py\t/^def test_orderable_tx():$/;\"\tf\n 2120: test_ordering_for_same_prio\tethereum\\transaction_queue.py\t/^def test_ordering_for_same_prio():$/;\"\tf\n 2121  InvalidTransaction\tethereum\\transactions.py\t/^from ethereum.exceptions import InvalidTransaction$/;\"\ti\n 2122  TT256\tethereum\\transactions.py\t/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;\"\ti\n ....\n 2340  to_signed\tethereum\\utils.py\t/^def to_signed(i):$/;\"\tf\n 2341  to_string\tethereum\\utils.py\t/^    def to_string(value):$/;\"\tf\n 2342: to_string_for_regexp\tethereum\\utils.py\t/^    def to_string_for_regexp(value):$/;\"\tf\n 2343  trie_root\tethereum\\utils.py\t/^trie_root = Binary.fixed_length(32, allow_empty=True)$/;\"\tv\n 2344  unicode\tethereum\\utils.py\t/^    unicode = str$/;\"\tv\n ....\n 2400  find_packages\tsetup.py\t/^from setuptools import setup, find_packages$/;\"\ti\n 2401  install_requires\tsetup.py\t/^    install_requires=install_requires,$/;\"\tv\n 2402: install_requires\tsetup.py\t/^install_requires = [install_requires_replacements.get(r, r) for r in install_requires]$/;\"\tv\n 2403: install_requires\tsetup.py\t/^install_requires = set(x.strip() for x in open('requirements.txt'))$/;\"\tv\n 2404  install_requires_replacements\tsetup.py\t/^install_requires_replacements = {$/;\"\tv\n 2405  long_description\tsetup.py\t/^    long_description=readme,$/;\"\tv\n ....\n 2410  setup_requires\tsetup.py\t/^    setup_requires=[$/;\"\tv\n 2411  tests_require\tsetup.py\t/^    tests_require=tests_require,$/;\"\tv\n 2412: tests_require\tsetup.py\t/^tests_require = [tests_require_replacements.get(r, r) for r in tests_require]$/;\"\tv\n 2413: tests_require\tsetup.py\t/^tests_require = set(x.strip() for x in open('dev_requirements.txt'))$/;\"\tv\n 2414  tests_require_replacements\tsetup.py\t/^tests_require_replacements = dict()$/;\"\tv\n 2415  tests_require_replacements\tsetup.py\t/^tests_require_replacements = {$/;\"\tv\n ....\n 2421  fixture\ttools\\fixture_to_example.py\t/^    fixture = json.load(file(f))$/;\"\tv\n 2422  fixture_to_tables\ttools\\fixture_to_example.py\t/^def fixture_to_tables(fixture):$/;\"\tf\n 2423: format_item\ttools\\fixture_to_example.py\t/^def format_item(item, py=True):$/;\"\tf\n 2424: format_to_example\ttools\\fixture_to_example.py\t/^def format_to_example(table, tabspace=2, indent=2):$/;\"\tf\n 2425  json\ttools\\fixture_to_example.py\t/^    import json$/;\"\ti\n 2426  sys\ttools\\fixture_to_example.py\t/^    import sys$/;\"\ti\n ....\n 2558  t\ttools\\vm_test_generator.py\t/^t = pyethereum.tester$/;\"\tv\n 2559  !_TAG_FILE_SORTED\t1\t/0=unsorted, 1=sorted, 2=foldcase/\n 2560: !_TAG_FILE_FORMAT\t2\t/extended format; --format=1 will not append ;\" to lines/\n 2561  !_TAG_PROGRAM_VERSION\t5.8\t//\n 2562: !_TAG_PROGRAM_AUTHOR\tDarren Hiebert\t/dhiebert@users.sourceforge.net/\n 2563  !_TAG_PROGRAM_NAME\tExuberant Ctags\t//\n 2564: !_TAG_PROGRAM_URL\thttp://ctags.sourceforge.net\t/official site/\n 2565  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\.travis.yml:\n   17      - $HOME/.bin\n   18      - $HOME/solc-versions\n   19: before_install:\n   20    - mkdir -p $HOME/.bin\n   21    - export PATH=$PATH:$HOME/.bin\n   ..\n   31    - travis_retry pip install -r dev_requirements.txt\n   32  script:\n   33:   # XXX: For now we're only performing minimal CI checks as most tests are\n   34    # broken. Tests will be individually added here as they're fixed.\n   35    - make lint-minimal\n   ..\n   49      - secure: \"KBw4iPJVsw3qv0qbvkZ2tjams/280aEovJ88ylR9ClI2krtxJFoVlAB0YdkztpKxcAxbIZg8nd4S3XpeOUsxfoZq5mZ2wHNU7G8LjqjwZ7eOhj76K+NAnEhRQT2evqZkWqP0h5fxuXQaT4KjwxGkxGNDEMJUVH5RO2cnFUQO98s=\"\n   50  \n   51: before_deploy:\n   52  - cd $TRAVIS_BUILD_DIR\n   53  deploy:\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\README.md:\n   38  * `mk_poststate_of_blockhash(hash)` - creates a state object after a given block\n   39  * `has_block(block)` - is that block in the chain? Returns True/False\n   40: * `get_chain(from, to)` - roughly equivalent to `[get_block_by_number(i) for i in range(from, to)]`, though automatically stops if it reaches the head. `from` can be elided to start from genesis, `to` can be elided to go up to the head.\n   41  * `get_tx_position(tx)` - if the transaction is in the chain, returns `(blknum, index)` where `blknum` is the block number of the block that contains the transaction and `index` is its position in the block\n   42  \n   ..\n   61      * `refunds` - suicide/selfdestruct refund counter\n   62  \n   63: Pyethereum follows a **maximally state-centric model**; the ONLY information needed to process a transaction or a block is located within the state itself, allowing the actual state transition logic to be a very clean `apply_transaction(state, tx)` and `apply_block(state, block)`.\n   64  \n   65  * `get_balance`- gets the balance of an account\n   66  * `get_code` - gets the code of an account\n   67: * `get_storage_data(addr, k)` - gets the storage at the given key of the given address. Expects a key in **numerical** form (eg. b\"cow\" or \"0x636f77\" is represented as 6516599).\n   68: * `to_snapshot(root_only=False, no_prevblocks=False)` - creates a snapshot for the current state. If `root_only` is set, only adds the state root, not the entire state. If `no_prevblocks` is set, does not add previous headers and uncles. Setting either of those flags means that the same database would be required to recover from the snapshot.\n   69  * `from_snapshot(snapshot, env)` (classmethod) - creates a state from the given snapshot with the given `env`.\n   70  * `ephemeral_clone()` - creates a clone of the state that you can work with without affecting the original\n   ..\n   77  \n   78  * `apply_block(state, block)` - takes a state and processes a block onto that state\n   79: * `make_head_candidate(chain, txqueue=None, parent=None, timestamp, coinbase, extra_data, min_gasprice=0)` - creates a candidate block for the chain on top of the given parent block (default: head of the chain). Gets transactions from the given `txqueue` object with the given `mingasprice` (otherwise does not add transactions). `timestamp`, `coinbase` and `extra_data` can be used to specify those parameters in the block; otherwise defaults are used\n   80  \n   81  ### ethereum.messages\n   ..\n  103  * `ecrecover_to_pub(hash, v, r, s)` - recovers the public key that made the signature as a 64-byte binary blob of `encode_int32(x) + encode_int32(y)`. Hashing this and taking the last 20 bytes gives the _address_ that signed a message.\n  104  * `ecsign(hash, key)` - returns the v, r, s values of a signature\n  105: * `normalize_key(key)` - converts a key from many formats into 32-byte binary\n  106  * `privtoaddr(key)` - converts a key to an address\n  107  \n  108  #### Addresses\n  109  \n  110: * `normalize_address(addr)` - converts an address into 20-byte binary form\n  111  * `check_checksum(addr)` - returns True if the address checksum passes, otherwise False\n  112: * `checksum_encode(addr)` - converts an address into hex form with a checksum\n  113  * `mk_contract_address(addr, nonce)` - creates the address of a contract created by the given address with the given nonce\n  114  \n  ...\n  119  ### ethereum.block\n  120  \n  121: Contains the `Block` and `BlockHeader` classes. Generally recommended to avoid creating blocks and block headers directly, instead using `mk_head_candidate`. The member variables are straightforward:\n  122  \n  123  * `block.transactions` - transactions in a block\n  ...\n  128  \n  129  * `header.hash` - the hash (also the block hash)\n  130: * `header.mining_hash` - the hash used for proof of work mining\n  131  * `header.to_dict()` - serializes into a human-readable dict\n  132  * `header.prevhash` - previous block hash\n  ...\n  164  \n  165  * `decode_keystore_json(jsondata, password)` - returns the private key from an encrypted keystore object. NOTE: if you are loading from a file, the most convenient way to do this is `import json; key = decode_keystore_json(json.load(open('filename.json')), 'password')`\n  166: * `make_keystore_json(key, pw, kdf='pbkdf2', cipher='aes-128-ctr')` - creates an encrypted keystore object for the key. Keeping `kdf` and `cipher` at their default values is recommended.\n  167  \n  168  ### ethereum.abi\n  169  \n  170: Most compilers for HLLs (solidity, serpent, viper, etc) on top of Ethereum have the option to output an ABI declaration for a program. This is a json object that looks something like this:\n  171  \n  172      [{\"name\": \"ecrecover(uint256,uint256,uint256,uint256)\", \"type\": \"function\", \"constant\": false,\n  ...\n  176       \"inputs\": [{\"name\": \"x\", \"type\": \"uint256\", \"indexed\": false}, {\"name\": \"y\", \"type\": \"uint256\", \"indexed\": false}, {\"name\": \"z\", \"type\": \"uint256\", \"indexed\": false}]}]\n  177  \n  178: You can initialize an `abi.ContractTranslator` object to encode and decode data for contracts as follows:\n  179  \n  180      true, false = True, False  \n  ...\n  205  ### Consensus abstraction\n  206  \n  207: The pyethereum codebase is designed to be maximally friendly for use across many different consensus algorithms. If you want to add a new consensus algo, you'll need to take the following steps:\n  208  \n  209: * Add a directory alongside `pow`, and in it create a `chain.py` class that implements a `Chain` module. This may have a totally different fork choice rule for proof of work (GHOST, signature counting, Casper, etc).\n  210  * Add an entry to `consensus_strategy.py`. You will need to implement:\n  211      * `check_seal` - check that a block is correctly \"sealed\" (mined, signed, etc)\n  212      * `validate_uncles(state, block)` - check that uncles are valid\n  213:     * `initialize(state, block)` - called in `apply_block` before transactions are processed\n  214      * `finalize(state, block)` - called in `apply_block` after transactions are processed\n  215      * `get_uncle_candidates(chain, state)` - called in `mk_head_candidate` to include uncles in a block\n  ...\n  222  ## Tests\n  223  \n  224: Run `python3.6 -m pytest ethereum/tests/<filename>` for any .py file in that directory. Currently all tests are passing except for a few Metropolis-specific state tests and block tests.\n  225  \n  226  To make your own state tests, use the tester module as follows:\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\README.rst:\n   56  -  ``has_block(block)`` - is that block in the chain? Returns True/False\n   57  -  ``get_chain(from, to)`` - roughly equivalent to\n   58:    ``[get_block_by_number(i) for i in range(from, to)]``, though\n   59     automatically stops if it reaches the head. ``from`` can be elided to\n   60     start from genesis, ``to`` can be elided to go up to the head.\n   ..\n   92  \n   93  Pyethereum follows a **maximally state-centric model**; the ONLY\n   94: information needed to process a transaction or a block is located within\n   95  the state itself, allowing the actual state transition logic to be a\n   96  very clean ``apply_transaction(state, tx)`` and\n   ..\n  100  -  ``get_code`` - gets the code of an account\n  101  -  ``get_storage_data(addr, k)`` - gets the storage at the given key of\n  102:    the given address. Expects a key in **numerical** form (eg. b\"cow\" or\n  103     \"0x636f77\" is represented as 6516599).\n  104  -  ``to_snapshot(root_only=False, no_prevblocks=False)`` - creates a\n  105:    snapshot for the current state. If ``root_only`` is set, only adds\n  106     the state root, not the entire state. If ``no_prevblocks`` is set,\n  107     does not add previous headers and uncles. Setting either of those\n  ...\n  126     onto that state\n  127  -  ``make_head_candidate(chain, txqueue=None, parent=None, timestamp, coinbase, extra_data, min_gasprice=0)``\n  128:    - creates a candidate block for the chain on top of the given parent\n  129     block (default: head of the chain). Gets transactions from the given\n  130     ``txqueue`` object with the given ``mingasprice`` (otherwise does not\n  ...\n  170     last 20 bytes gives the *address* that signed a message.\n  171  -  ``ecsign(hash, key)`` - returns the v, r, s values of a signature\n  172: -  ``normalize_key(key)`` - converts a key from many formats into\n  173     32-byte binary\n  174  -  ``privtoaddr(key)`` - converts a key to an address\n  ...\n  178  \n  179  -  ``normalize_address(addr)`` - converts an address into 20-byte binary\n  180:    form\n  181  -  ``check_checksum(addr)`` - returns True if the address checksum\n  182     passes, otherwise False\n  183: -  ``checksum_encode(addr)`` - converts an address into hex form with a\n  184     checksum\n  185  -  ``mk_contract_address(addr, nonce)`` - creates the address of a\n  ...\n  198  Contains the ``Block`` and ``BlockHeader`` classes. Generally\n  199  recommended to avoid creating blocks and block headers directly, instead\n  200: using ``mk_head_candidate``. The member variables are straightforward:\n  201  \n  202  -  ``block.transactions`` - transactions in a block\n  ...\n  207  \n  208  -  ``header.hash`` - the hash (also the block hash)\n  209: -  ``header.mining_hash`` - the hash used for proof of work mining\n  210  -  ``header.to_dict()`` - serializes into a human-readable dict\n  211  -  ``header.prevhash`` - previous block hash\n  ...\n  255     ``import json; key = decode_keystore_json(json.load(open('filename.json')), 'password')``\n  256  -  ``make_keystore_json(key, pw, kdf='pbkdf2', cipher='aes-128-ctr')`` -\n  257:    creates an encrypted keystore object for the key. Keeping ``kdf`` and\n  258     ``cipher`` at their default values is recommended.\n  259  \n  ...\n  261  ~~~~~~~~~~~~\n  262  \n  263: Most compilers for HLLs (solidity, serpent, viper, etc) on top of\n  264: Ethereum have the option to output an ABI declaration for a program.\n  265  This is a json object that looks something like this:\n  266  \n  ...\n  274  \n  275  You can initialize an ``abi.ContractTranslator`` object to encode and\n  276: decode data for contracts as follows:\n  277  \n  278  ::\n  ...\n  314  ~~~~~~~~~~~~~~~~~~~~~\n  315  \n  316: The pyethereum codebase is designed to be maximally friendly for use\n  317  across many different consensus algorithms. If you want to add a new\n  318  consensus algo, you'll need to take the following steps:\n  ...\n  320  -  Add a directory alongside ``pow``, and in it create a ``chain.py``\n  321     class that implements a ``Chain`` module. This may have a totally\n  322:    different fork choice rule for proof of work (GHOST, signature\n  323     counting, Casper, etc).\n  324  -  Add an entry to ``consensus_strategy.py``. You will need to\n  ...\n  328        signed, etc)\n  329     -  ``validate_uncles(state, block)`` - check that uncles are valid\n  330:    -  ``initialize(state, block)`` - called in ``apply_block`` before\n  331        transactions are processed\n  332     -  ``finalize(state, block)`` - called in ``apply_block`` after\n  ...\n  346  -----\n  347  \n  348: Run ``python3.6 -m pytest ethereum/tests/<filename>`` for any .py file\n  349: in that directory. Currently all tests are passing except for a few\n  350  Metropolis-specific state tests and block tests.\n  351  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\setup.py:\n    6  \n    7  # requirements\n    8: install_requires = set(x.strip() for x in open('requirements.txt'))\n    9  install_requires_replacements = {\n   10      'https://github.com/ethereum/ethash/tarball/master': 'pyethash',\n   11  }\n   12: install_requires = [install_requires_replacements.get(r, r) for r in install_requires]\n   13  \n   14  # dev requirements\n   15: tests_require = set(x.strip() for x in open('dev_requirements.txt'))\n   16  tests_require_replacements = dict()\n   17  tests_require_replacements = {\n   18      'https://github.com/ethereum/serpent/tarball/develop': 'ethereum-serpent>=2.0.4'\n   19  }\n   20: tests_require = [tests_require_replacements.get(r, r) for r in tests_require]\n   21  \n   22  # *IMPORTANT*: Don't manually change the version here. Use the 'bumpversion' utility.\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\__init__.py:\n   18  try:\n   19      _dist = get_distribution('pyethapp')\n   20:     # Normalize case for Windows systems\n   21      dist_loc = os.path.normcase(_dist.location)\n   22      here = os.path.normcase(__file__)\n   ..\n   34          match = GIT_DESCRIBE_RE.match(rev)\n   35          if match:\n   36:             __version__ = \"{}+git-{}\".format(match.group(\"version\"), match.group(\"git\"))\n   37      except:  # FIXME!\n   38          pass\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\abi.py:\n   39      all_pieces = []\n   40  \n   41:     for position in range(0, len(data), 32):\n   42          piece = data[position:position + 32]\n   43          all_pieces.append(piece)\n   ..\n   96      function_types = [\n   97          _canonical_type(type_)\n   98:         for type_ in encode_types\n   99      ]\n  100  \n  101:     function_signature = '{function_name}({canonical_types})'.format(\n  102          function_name=name,\n  103          canonical_types=','.join(function_types),\n  ...\n  118  \n  119      Where `canonical_type_of` is a function that simply returns the canonical\n  120:     type of a given argument, e.g. for uint indexed foo, it would return\n  121      uint256). Note the lack of spaces.\n  122      \"\"\"\n  ...\n  124      event_types = [\n  125          _canonical_type(type_)\n  126:         for type_ in encode_types\n  127      ]\n  128  \n  129:     event_signature = '{event_name}({canonical_types})'.format(\n  130          event_name=name,\n  131          canonical_types=','.join(event_types),\n  ...\n  188      \"\"\" Encode `arg` as `typ`.\n  189  \n  190:     `arg` will be encoded in a best effort manner, were necessary the function\n  191      will try to correctly define the underlying binary representation (ie.\n  192      decoding a hex-encoded address/hash).\n  ...\n  222  \n  223      Note:\n  224:         This function don't work with array types, for that use the `enc`\n  225          function.\n  226      \"\"\"\n  ...\n  231  \n  232          if not (0 < sub <= 256 and sub % 8 == 0):\n  233:             raise ValueError('invalid unsigned integer bit length {}'.format(sub))\n  234  \n  235          try:\n  ...\n  250  \n  251          if not (0 < sub <= 256 and sub % 8 == 0):\n  252:             raise ValueError('invalid integer bit length {}'.format(sub))\n  253  \n  254          try:\n  ...\n  283  \n  284          if not (0 < high + low <= 256 and high % 8 == 0 and low % 8 == 0):\n  285:             raise ValueError('invalid unsigned fixed length {}'.format(sub))\n  286  \n  287          if not 0 <= arg < 2 ** high:\n  ...\n  301  \n  302          if not (0 < high + low <= 256 and high % 8 == 0 and low % 8 == 0):\n  303:             raise ValueError('invalid unsigned fixed length {}'.format(sub))\n  304  \n  305          if not -2 ** bits <= arg < 2 ** bits:\n  ...\n  327          if len(sub):  # fixed length\n  328              if not 0 <= len(arg) <= int(sub):\n  329:                 raise ValueError('invalid string length {}'.format(sub))\n  330  \n  331              if not 0 <= int(sub) <= 32:\n  332:                 raise ValueError('invalid string length {}'.format(sub))\n  333  \n  334              return rzpad(arg, 32)\n  ...\n  349                  raise EncodingError('Expecting string: %r' % arg)\n  350  \n  351:         arg = utils.to_string(arg)  # py2: force unicode into str\n  352  \n  353          if len(sub):  # fixed length\n  ...\n  413          self.event_data = {}\n  414  \n  415:         for description in contract_interface:\n  416              entry_type = description.get('type', 'function')\n  417              encode_types = []\n  ...\n  422                  encode_types = [\n  423                      element['type']\n  424:                     for element in description.get('inputs', [])\n  425                  ]\n  426  \n  427                  signature = [\n  428                      (element['type'], element['name'])\n  429:                     for element in description.get('inputs', [])\n  430                  ]\n  431  \n  ...\n  436                  decode_types = [\n  437                      element['type']\n  438:                     for element in description.get('outputs', [])\n  439                  ]\n  440  \n  ...\n  453                  indexed = [\n  454                      element['indexed']\n  455:                     for element in description['inputs']\n  456                  ]\n  457                  names = [\n  458                      element['name']\n  459:                     for element in description['inputs']\n  460                  ]\n  461                  # event_id == topics[0]\n  ...\n  483  \n  484              else:\n  485:                 raise ValueError('Unknown type {}'.format(description['type']))\n  486  \n  487      def encode(self, function_name, args):\n  ...\n  508          \"\"\"\n  509          if function_name not in self.function_data:\n  510:             raise ValueError('Unkown function {}'.format(function_name))\n  511  \n  512          description = self.function_data[function_name]\n  ...\n  562          # data: abi_serialise(EVENT_NON_INDEXED_ARGS)\n  563          # EVENT_NON_INDEXED_ARGS is the series of EVENT_ARGS that are not\n  564:         # indexed, abi_serialise is the ABI serialisation function used for\n  565          # returning a series of typed values from a function.\n  566          unindexed_types = [\n  567              type_\n  568:             for type_, indexed in zip(event['types'], event['indexed'])\n  569              if not indexed\n  570          ]\n  ...\n  576  \n  577          result = {}\n  578:         for name, type_, indexed in zip(event['names'], event['types'], event['indexed']):\n  579              if indexed:\n  580                  topic_bytes = utils.zpad(\n  ...\n  618      # size (eg. 256, 128x128, none), array component (eg. [], [45], none)\n  619      regexp = '([a-z]*)([0-9]*x?[0-9]*)((\\[[0-9]*\\])*)'\n  620:     base, sub, arr, _ = re.match(regexp, utils.to_string_for_regexp(typ)).groups()\n  621      arrlist = re.findall('\\[[0-9]*\\]', arr)\n  622      assert len(''.join(arrlist)) == len(arr), \\\n  ...\n  627              \"String type must have no suffix or numerical suffix\"\n  628          assert not sub or int(sub) <= 32, \\\n  629:             \"Maximum 32 bytes for fixed-length str or bytes\"\n  630      # Check validity of integer type\n  631      elif base == 'uint' or base == 'int':\n  ...\n  639      elif base == 'ufixed' or base == 'fixed':\n  640          assert re.match('^[0-9]+x[0-9]+$', sub), \\\n  641:             \"Real type must have suffix of form <high>x<low>, eg. 128x128\"\n  642:         high, low = [int(x) for x in sub.split('x')]\n  643          assert 8 <= (high + low) <= 256, \\\n  644              \"Real size out of bounds (max 32 bytes)\"\n  ...\n  652      elif base == 'address':\n  653          assert sub == '', \"Address cannot have suffix\"\n  654:     return base, sub, [ast.literal_eval(x) for x in arrlist]\n  655  \n  656  \n  ...\n  679  \n  680      # Encode dynamic-sized lists via the head/tail mechanism described in\n  681:     # https://github.com/ethereum/wiki/wiki/Proposal-for-new-ABI-value-encoding\n  682      if type_size is None:\n  683          assert isinstance(arg, list), \\\n  ...\n  692                  \"Wrong array size: found %d, expecting %d\" % \\\n  693                  (len(arg), arrlist[-1][0])\n  694:         for i in range(len(arg)):\n  695              if subsize is None:\n  696                  myhead += enc(INT256, 32 * len(arg) + len(mytail))\n  ...\n  707              o = b''\n  708              assert len(arg) == arrlist[-1][0], \"Incorrect array size\"\n  709:             for x in arg:\n  710                  o += enc(subtyp, x)\n  711              return o\n  ...\n  715  def encode_abi(types, args):\n  716      headsize = 0\n  717:     proctypes = [process_type(typ) for typ in types]\n  718:     sizes = [get_size(typ) for typ in proctypes]\n  719:     for i, arg in enumerate(args):\n  720          if sizes[i] is None:\n  721              headsize += 32\n  ...\n  723              headsize += sizes[i]\n  724      myhead, mytail = b'', b''\n  725:     for i, arg in enumerate(args):\n  726          if sizes[i] is None:\n  727              myhead += enc(INT256, headsize + len(mytail))\n  ...\n  751          return (o - 2 ** int(sub)) if o >= 2 ** (int(sub) - 1) else o\n  752      elif base == 'ufixed':\n  753:         high, low = [int(x) for x in sub.split('x')]\n  754          return big_endian_to_int(data) * 1.0 // 2 ** low\n  755      elif base == 'fixed':\n  756:         high, low = [int(x) for x in sub.split('x')]\n  757          o = big_endian_to_int(data)\n  758          i = (o - 2 ** (high + low)) if o >= 2 ** (high + low - 1) else o\n  ...\n  771  def decode_abi(types, data):\n  772      # Process types\n  773:     proctypes = [process_type(typ) for typ in types]\n  774      # Get sizes of everything\n  775:     sizes = [get_size(typ) for typ in proctypes]\n  776      # Initialize array of outputs\n  777      outs = [None] * len(types)\n  ...\n  781      # its start position\n  782      pos = 0\n  783:     for i, typ in enumerate(types):\n  784          if sizes[i] is None:\n  785              start_positions[i] = big_endian_to_int(data[pos:pos + 32])\n  ...\n  793              pos += sizes[i]\n  794      # We add a start position equal to the length of the entire data\n  795:     # for convenience.\n  796      j = len(types) - 1\n  797      while j >= 0 and start_positions[j] is None:\n  798          start_positions[j] = start_positions[len(types)]\n  799          j -= 1\n  800:     assert pos <= len(data), \"Not enough data for head\"\n  801:     # Grab the data for tail arguments using the start positions\n  802      # calculated above\n  803:     for i, typ in enumerate(types):\n  804          if sizes[i] is None:\n  805              offset = start_positions[i]\n  ...\n  807              outs[i] = data[offset:next_offset]\n  808      # Recursively decode them all\n  809:     return [dec(proctypes[i], outs[i]) for i in range(len(outs))]\n  810  \n  811  \n  ...\n  817      if base in ('string', 'bytes') and not sub:\n  818          L = big_endian_to_int(arg[:32])\n  819:         assert len(arg[32:]) == ceil32(L), \"Wrong data size for string/bytes object: expected %d actual %d\" % (ceil32(L), len(arg[32:]))\n  820          return arg[32:][:L]\n  821      # Dynamic-sized arrays\n  ...\n  829          # case\n  830          if subsize is None:\n  831:             assert len(arg) >= 32 + 32 * L, \"Not enough data for head\"\n  832              start_positions = [big_endian_to_int(arg[32 + 32 * i: 64 + 32 * i])\n  833:                                for i in range(L)] + [len(arg)]\n  834              outs = [arg[start_positions[i]: start_positions[i + 1]]\n  835:                     for i in range(L)]\n  836:             return [dec(subtyp, out) for out in outs]\n  837:         # If children are static, then grab the data slice for each one and\n  838          # sequentially decode them manually\n  839          else:\n  840              return [dec(subtyp, arg[32 + subsize * i: 32 + subsize * (i + 1)])\n  841:                     for i in range(L)]\n  842      # Static-sized arrays: decode piece-by-piece\n  843      elif len(arrlist):\n  ...\n  846          subsize = get_size(subtyp)\n  847          return [dec(subtyp, arg[subsize * i:subsize * (i + 1)])\n  848:                 for i in range(L)]\n  849      else:\n  850          return decode_single(typ, arg)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\block.py:\n   37      :ivar bloom: TODO\n   38      :ivar difficulty: the block's difficulty\n   39:     :ivar number: the number of ancestors of this block (0 for the genesis\n   40                    block)\n   41      :ivar gas_limit: the block's gas limit\n   ..\n   83                   nonce=''):\n   84          # at the beginning of a method, locals() is a dict of all arguments\n   85:         fields = {k: v for k, v in locals().items() if k != 'self'}\n   86          if len(fields['coinbase']) == 40:\n   87              fields['coinbase'] = decode_hex(fields['coinbase'])\n   ..\n  110          \"\"\"Serialize the header to a readable dictionary.\"\"\"\n  111          d = {}\n  112:         for field in ('prevhash', 'uncles_hash', 'extra_data', 'nonce',\n  113                        'mixhash'):\n  114              d[field] = b'0x' + encode_hex(getattr(self, field))\n  115:         for field in ('state_root', 'tx_list_root', 'receipts_root',\n  116                        'coinbase'):\n  117              d[field] = encode_hex(getattr(self, field))\n  118:         for field in ('number', 'difficulty', 'gas_limit', 'gas_used',\n  119                        'timestamp'):\n  120              d[field] = utils.to_string(getattr(self, field))\n  ...\n  155                 receipts are stored (required)\n  156      :param parent: optional parent which if not given may have to be loaded from\n  157:                    the database for replay\n  158      \"\"\"\n  159  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\bloom.py:\n   29      h = utils.sha3(val)\n   30  #   print('bloom_insert', bloom_bits(val), repr(val))\n   31:     for i in range(0, BUCKETS_PER_VAL * 2, 2):\n   32          bloom |= 1 << ((safe_ord(h[i + 1]) + (safe_ord(h[i]) << 8)) & 2047)\n   33      return bloom\n   ..\n   36  def bloom_bits(val):\n   37      h = utils.sha3(val)\n   38:     return [bits_in_number(1 << ((safe_ord(h[i + 1]) + (safe_ord(h[i]) << 8)) & 2047)) for i in range(0, BUCKETS_PER_VAL * 2, 2)]\n   39  \n   40  \n   41  def bits_in_number(val):\n   42      assert is_numeric(val)\n   43:     return [n for n in range(2048) if (1 << n) & val]\n   44  \n   45  \n   ..\n   51  def bloom_combine(*args):\n   52      bloom = 0\n   53:     for arg in args:\n   54          bloom |= arg\n   55      return bloom\n   ..\n   57  \n   58  def bloom_from_list(args):\n   59:     return bloom_combine(*[bloom_insert(0, arg) for arg in args])\n   60  \n   61  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\child_dao_list.py:\n    8  L.append('0x807640a13483f8ac783c557fcdf27be11ea4ac7a')\n    9  # child DAOs (created by DAO creator)\n   10: L.extend(['0x' + encode_hex(mk_contract_address(source, i)) for i in range(1, 58)])\n   11  # child extrabalances\n   12: L.extend(['0x' + encode_hex(mk_contract_address(mk_contract_address(source, i), 0)) for i in range(1, 58)])\n   13  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\common.py:\n   35  # Difficulty adjustment algo\n   36  def calc_difficulty(parent, timestamp, config=default_config):\n   37:     # Special case for test chains\n   38      if parent.difficulty == 1:\n   39          return 1\n   ..\n   93              raise ValueError(\"Extra data too long\")\n   94          if header.timestamp <= parent.timestamp:\n   95:             raise ValueError(\"Timestamp equal to or before parent\")\n   96          if header.timestamp >= 2**256:\n   97              raise ValueError(\"Timestamp waaaaaaaaaaayy too large\")\n   ..\n  158  def mk_receipt_sha(receipts):\n  159      t = trie.Trie(EphemDB())\n  160:     for i, receipt in enumerate(receipts):\n  161          t.update(rlp.encode(i), rlp.encode(receipt))\n  162      return t.root_hash\n  ...\n  174      state.gas_limit = block.header.gas_limit\n  175      state.block_number = block.header.number\n  176:     state.recent_uncles[state.block_number] = [x.hash for x in block.uncles]\n  177      state.block_coinbase = block.header.coinbase\n  178      state.block_difficulty = block.header.difficulty\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\config.py:\n   53      # Blank account initial nonce\n   54      ACCOUNT_INITIAL_NONCE=0,\n   55:     # Homestead fork\n   56      HOMESTEAD_FORK_BLKNUM=1150000,\n   57      HOMESTEAD_DIFF_ADJUSTMENT_CUTOFF=10,\n   58:     # Metropolis fork\n   59      METROPOLIS_FORK_BLKNUM=2 ** 100,\n   60      METROPOLIS_ENTRY_POINT=2 ** 160 - 1,\n   ..\n   64      METROPOLIS_GETTER_CODE=decode_hex('6000355460205260206020f3'),\n   65      METROPOLIS_DIFF_ADJUSTMENT_CUTOFF=9,\n   66:     # DAO fork\n   67      DAO_FORK_BLKNUM=1920000,\n   68      DAO_FORK_BLKHASH=decode_hex('4985f5ca3d2afbec36529aa96f74de3cc10a2a4a6c44f2157a57d2c6059a11bb'),\n   ..\n   70      CHILD_DAO_LIST=list(map(utils.normalize_address, child_dao_list)),\n   71      DAO_WITHDRAWER=utils.normalize_address('0xbf4ed7b27f1d666546e30d74d50d173d20bca754'),\n   72:     # Anti-DoS fork\n   73      ANTI_DOS_FORK_BLKNUM = 2463000,\n   74      SPURIOUS_DRAGON_FORK_BLKNUM = 2675000,\n   ..\n   76      # Default consensus strategy: ethash, poa, casper, pbft\n   77      CONSENSUS_STRATEGY = 'ethash',\n   78:     # Serenity fork\n   79      SERENITY_FORK_BLKNUM = 2**99,\n   80      PREV_HEADER_DEPTH = 256,\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\consensus_strategy.py:\n    3          assert sorted(kwargs.keys()) == sorted(['check_seal', 'validate_uncles', 'initialize',\n    4                                                  'finalize', 'get_uncles'])\n    5:         for k, v in kwargs.items():\n    6              setattr(self, k, v)\n    7  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\db.py:\n   52  \n   53  \n   54: # Used for SPV proof creation\n   55  class ListeningDB(BaseDB):\n   56  \n   ..\n   86  \n   87  \n   88: # Used for making temporary objects\n   89  class OverlayDB(BaseDB):\n   90  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\fast_rlp.py:\n   12          prefix = length_prefix(len(item), 128)\n   13      else:\n   14:         item = b''.join([_encode_optimized(x) for x in item])\n   15          prefix = length_prefix(len(item), 192)\n   16      return prefix + item\n   ..\n  105          st = time.time()\n  106          x = trie.Trie(db.EphemDB())\n  107:         for i in range(10000):\n  108              x.update(str(i), str(i**3))\n  109          print('elapsed', time.time() - st)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\fastvm.py:\n   54  \n   55      def extract_copy(self, mem, memstart, datastart, size):\n   56:         for i in range(size):\n   57              if datastart + i < self.size:\n   58                  mem[memstart + i] = self.data[self.offset + datastart + i]\n   ..\n   89          self.gas = 0\n   90          self.last_returned = bytearray()\n   91:         for kw in kwargs:\n   92              setattr(self, kw, kwargs[kw])\n   93  \n   ..\n  213      s = time.time()\n  214      steps = 0\n  215:     _prevop = None  # for trace only\n  216  \n  217      while compustate.pc in processed_code:\n  ...\n  234            return vm_exception('INVALID OP', opcode=ops[-1][1])\n  235  \n  236:       for op, opcode, pushval in ops:\n  237  \n  238          if trace_vm:\n  ...\n  250                  if len(compustate.memory) < 1024:\n  251                      trace_data['memory'] = \\\n  252:                         ''.join([encode_hex(ascii_chr(x)) for x\n  253                                    in compustate.memory])\n  254                  else:\n  255                      trace_data['sha3memory'] = \\\n  256:                         encode_hex(utils.sha3(b''.join([ascii_chr(x) for\n  257                                                x in compustate.memory])))\n  258              if _prevop in ('SSTORE',) or steps == 0:\n  ...\n  275          # Pushes first because they are very frequent\n  276          if 0x60 <= opcode <= 0x7f:\n  277:             # compustate.pc += opcode - 0x5f # Move 1 byte forward for 0x60, up to 32 bytes for 0x7f\n  278              stk.append(pushval)\n  279          elif opcode < 0x10:\n  ...\n  308              elif op == 'EXP':\n  309                  base, exponent = stk.pop(), stk.pop()\n  310:                 # fee for exponent is dependent on its bytes\n  311                  # calc n bytes to represent exponent\n  312                  nbytes = len(utils.encode_int(exponent))\n  313                  expfee = nbytes * opcodes.GEXPONENTBYTE\n  314:                 if ext.post_clearing_hardfork():\n  315                      expfee += opcodes.EXP_SUPPLEMENTAL_GAS * nbytes\n  316                  if compustate.gas < expfee:\n  ...\n  371                  stk.append(utils.coerce_to_int(msg.to))\n  372              elif op == 'BALANCE':\n  373:                 if ext.post_anti_dos_hardfork():\n  374                      if not eat_gas(compustate, opcodes.BALANCE_SUPPLEMENTAL_GAS):\n  375                          return vm_exception(\"OUT OF GAS\")\n  ...\n  401                  if not data_copy(compustate, size):\n  402                      return vm_exception('OOG COPY DATA')\n  403:                 for i in range(size):\n  404                      if dstart + i < len(code):\n  405                          mem[mstart + i] = utils.safe_ord(code[dstart + i])\n  ...\n  420                  stk.append(ext.tx_gasprice)\n  421              elif op == 'EXTCODESIZE':\n  422:                 if ext.post_anti_dos_hardfork():\n  423                      if not eat_gas(compustate, opcodes.EXTCODELOAD_SUPPLEMENTAL_GAS):\n  424                          return vm_exception(\"OUT OF GAS\")\n  ...\n  426                  stk.append(len(ext.get_code(addr) or b''))\n  427              elif op == 'EXTCODECOPY':\n  428:                 if ext.post_anti_dos_hardfork():\n  429                      if not eat_gas(compustate, opcodes.EXTCODELOAD_SUPPLEMENTAL_GAS):\n  430                          return vm_exception(\"OUT OF GAS\")\n  ...\n  437                  if not data_copy(compustate, size):\n  438                      return vm_exception('OOG COPY DATA')\n  439:                 for i in range(size):\n  440                      if s2 + i < len(extcode):\n  441                          mem[start + i] = utils.safe_ord(extcode[s2 + i])\n  ...\n  444          elif opcode < 0x50:\n  445              if op == 'BLOCKHASH':\n  446:                 if ext.post_metropolis_hardfork() and False:\n  447                      bh_addr = ext.blockhash_store\n  448                      stk.append(ext.get_storage_data(bh_addr, stk.pop()))\n  ...\n  478                  mem[s0] = s1 % 256\n  479              elif op == 'SLOAD':\n  480:                 if ext.post_anti_dos_hardfork():\n  481                      if not eat_gas(compustate, opcodes.SLOAD_SUPPLEMENTAL_GAS):\n  482                          return vm_exception(\"OUT OF GAS\")\n  ...\n  518                  stk.append(compustate.gas)  # AFTER subtracting cost 1\n  519          elif op[:3] == 'DUP':\n  520:             stk.append(stk[0x7f - opcode]) # 0x7f - opcode is a negative number, -1 for 0x80 ... -16 for 0x8f\n  521          elif op[:4] == 'SWAP':\n  522:             temp = stk[0x8e - opcode] # 0x8e - opcode is a negative number, -2 for 0x90 ... -17 for 0x9f\n  523              stk[0x8e - opcode] = stk[-1]\n  524              stk[-1] = temp\n  ...\n  531              b. Logs are kept track of during tx execution exactly the same way as suicides\n  532                 (except as an ordered list, not a set).\n  533:                Each log is in the form [address, [topic1, ... ], data] where:\n  534                 * address is what the ADDRESS opcode would output\n  535                 * data is mem[MEMSTART: MEMSTART + MEMSZ]\n  ...\n  539              depth = int(op[3:])\n  540              mstart, msz = stk.pop(), stk.pop()\n  541:             topics = [stk.pop() for x in range(depth)]\n  542              compustate.gas -= msz * opcodes.GLOGBYTE\n  543              if msg.static:\n  ...\n  559                  cd = CallData(mem, mstart, msz)\n  560                  ingas = compustate.gas\n  561:                 if ext.post_anti_dos_hardfork():\n  562                      ingas = all_but_1n(ingas, opcodes.CALL_CHILD_LIMIT_DENOM)\n  563                  create_msg = Message(msg.to, b'', value, ingas, cd, msg.depth + 1)\n  ...\n  587                  return vm_exception('OOG EXTENDING MEMORY')\n  588              to = utils.int_to_addr(to)\n  589:             # Extra gas costs based on hard fork-dependent factors\n  590:             extra_gas = (not ext.account_exists(to)) * (op == 'CALL') * (value > 0 or not ext.post_clearing_hardfork()) * opcodes.GCALLNEWACCOUNT + \\\n  591                  (value > 0) * opcodes.GCALLVALUETRANSFER + \\\n  592:                 ext.post_anti_dos_hardfork() * opcodes.CALL_SUPPLEMENTAL_GAS\n  593              # Compute child gas limit\n  594:             if ext.post_anti_dos_hardfork():\n  595                  if compustate.gas < extra_gas:\n  596                      return vm_exception('OUT OF GAS', needed=extra_gas)\n  ...\n  613                      call_msg = Message(msg.to, to, value, submsg_gas, cd,\n  614                                         msg.depth + 1, code_address=to, static=msg.static)\n  615:                 elif ext.post_homestead_hardfork() and op == 'DELEGATECALL':\n  616                      call_msg = Message(msg.sender, msg.to, msg.value, submsg_gas, cd,\n  617                                         msg.depth + 1, code_address=to, transfers_value=False, static=msg.static)\n  ...\n  633                      stk.append(1)\n  634                  # Set output memory\n  635:                 for i in range(min(len(data), memoutsz)):\n  636                      mem[memoutstart + i] = data[i]\n  637                  compustate.gas += gas\n  ...\n  643              return peaceful_exit('RETURN', compustate.gas, mem[s0: s0 + s1])\n  644          elif op == 'REVERT':\n  645:             if not ext.post_metropolis_hardfork():\n  646                  return vm_exception('Opcode not yet enabled')\n  647              s0, s1 = stk.pop(), stk.pop()\n  ...\n  655              to = ((b'\\x00' * (32 - len(to))) + to)[12:]\n  656              xfer = ext.get_balance(msg.to)\n  657:             if ext.post_anti_dos_hardfork():\n  658                  extra_gas = opcodes.SUICIDE_SUPPLEMENTAL_GAS + \\\n  659:                     (not ext.account_exists(to)) * (xfer > 0 or not ext.post_clearing_hardfork()) * opcodes.GCALLNEWACCOUNT\n  660                  if not eat_gas(compustate, extra_gas):\n  661                      return vm_exception(\"OUT OF GAS\")\n  ...\n  668          # assert utils.is_numeric(compustate.gas)\n  669          # this is slow!\n  670:         # for a in stk:\n  671          #     assert is_numeric(a), (op, stk)\n  672          #     assert a >= 0 and a < 2**256, (a, op, stk)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\genesis_helpers.py:\n   29  \n   30      state = State(env=env)\n   31:     for addr, data in genesis_data[\"alloc\"].items():\n   32          addr = normalize_address(addr)\n   33          assert len(addr) == 20\n   ..\n   41              state.set_nonce(addr, parse_as_int(data['nonce']))\n   42          if 'storage' in data:\n   43:             for k, v in data['storage'].items():\n   44                  state.set_storage_data(addr, big_endian_to_int(parse_as_bin(k)), big_endian_to_int(parse_as_bin(v)))\n   45      get_consensus_strategy(state.config).initialize(state, block)\n   ..\n   49      print('deleting %d' % len(state.deletes))\n   50      rdb = RefcountDB(state.db)\n   51:     for delete in state.deletes:\n   52          rdb.delete(delete)\n   53      block.header.state_root = state.trie.root_hash\n   ..\n  123      state.prev_headers = [h]\n  124  \n  125:     for addr, data in alloc.items():\n  126          addr = normalize_address(addr)\n  127          assert len(addr) == 20\n  ...\n  135              state.set_nonce(addr, parse_as_int(data['nonce']))\n  136          if 'storage' in data:\n  137:             for k, v in data['storage'].items():\n  138                  state.set_storage_data(addr, parse_as_bin(k), parse_as_bin(v))\n  139  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\messages.py:\n   63  \n   64      def bloomables(self):\n   65:         return [self.address] + [utils.int32.serialize(x) for x in self.topics]\n   66  \n   67      def to_dict(self):\n   ..\n   71              \"data\": b'0x' + encode_hex(self.data),\n   72              \"topics\": [encode_hex(utils.int32.serialize(t))\n   73:                        for t in self.topics]\n   74          }\n   75  \n   ..\n  100      @property\n  101      def bloom(self):\n  102:         bloomables = [x.bloomables() for x in self.logs]\n  103          return bloom.bloom_from_list(utils.flatten(bloomables))\n  104  \n  ...\n  108      return Receipt(state.trie.root_hash, state.gas_used, logs)\n  109  \n  110: def config_fork_specific_validation(config, blknum, tx):\n  111      # (1) The transaction signature is valid;\n  112      _ = tx.sender\n  ...\n  132          raise UnsignedTransaction(tx)\n  133  \n  134:     assert config_fork_specific_validation(state.config, state.block_number, tx)\n  135  \n  136      # (2) the transaction nonce is valid (equivalent to the\n  ...\n  197      state.delta_balance(tx.sender, -tx.startgas * tx.gasprice)\n  198  \n  199:     message_data = vm.CallData([safe_ord(x) for x in tx.data], 0, len(tx.data))\n  200      message = vm.Message(tx.sender, tx.to, tx.value, tx.startgas - intrinsic_gas, message_data, code_address=tx.to)\n  201  \n  ...\n  246      suicides = state.suicides\n  247      state.suicides = []\n  248:     for s in suicides:\n  249          state.set_balance(s, 0)\n  250          state.del_account(s)\n  ...\n  271  \n  272      def __init__(self, state, tx):\n  273:         self.specials = {k:v for k, v in default_specials.items()}\n  274:         for k, v in state.config['CUSTOM_SPECIALS']:\n  275              self.specials[k] = v\n  276          self._state = state\n  ...\n  300          self.msg = lambda msg: _apply_msg(self, msg, self.get_code(msg.code_address))\n  301          self.account_exists = state.account_exists\n  302:         self.post_homestead_hardfork = lambda: state.is_HOMESTEAD()\n  303:         self.post_metropolis_hardfork = lambda: state.is_METROPOLIS()\n  304:         self.post_serenity_hardfork = lambda: state.is_SERENITY()\n  305:         self.post_anti_dos_hardfork = lambda: state.is_ANTI_DOS()\n  306:         self.post_spurious_dragon_hardfork = lambda: state.is_SPURIOUS_DRAGON()\n  307          self.blockhash_store = state.config['METROPOLIS_BLOCKHASH_STORE']\n  308          self.snapshot = state.snapshot\n  ...\n  362          ext.increment_nonce(msg.sender)\n  363  \n  364:     if ext.post_metropolis_hardfork() and msg.sender == null_address:\n  365          msg.to = utils.mk_contract_address(msg.sender, 0)\n  366          # msg.to = sha3(msg.sender + code)[12:]\n  ...\n  369          msg.to = utils.mk_contract_address(msg.sender, nonce)\n  370  \n  371:     if ext.post_metropolis_hardfork() and (ext.get_nonce(msg.to) or len(ext.get_code(msg.to))):\n  372          log_msg.debug('CREATING CONTRACT ON TOP OF EXISTING CONTRACT')\n  373          return 0, 0, b''\n  ...\n  386      snapshot = ext.snapshot()\n  387  \n  388:     ext.set_nonce(msg.to, 1 if ext.post_spurious_dragon_hardfork() else 0)\n  389      res, gas, dat = _apply_msg(ext, msg, code)\n  390  \n  ...\n  396              return 1, gas, msg.to\n  397          gcost = len(dat) * opcodes.GCONTRACTBYTE\n  398:         if gas >= gcost and (len(dat) <= 24576 or not ext.post_spurious_dragon_hardfork()):\n  399              gas -= gcost\n  400          else:\n  401              dat = []\n  402              log_msg.debug('CONTRACT CREATION FAILED', have=gas, want=gcost, block_number=ext.block_number)\n  403:             if ext.post_homestead_hardfork():\n  404                  ext.revert(snapshot)\n  405                  return 0, 0, b''\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\meta.py:\n   25          assert validate_transaction_tree(state, block)\n   26          # Process transactions\n   27:         for tx in block.transactions:\n   28              apply_transaction(state, tx)\n   29          # Finalize (incl paying block rewards)\n   ..\n   31          # Verify state root, tx list root, receipt root\n   32          assert verify_execution_results(state, block)\n   33:         # Post-finalize (ie. add the block header to the state for now)\n   34          post_finalize(state, block)\n   35      except (ValueError, AssertionError) as e:\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\new_state.py:\n   24  BLANK_ROOT = utils.sha3rlp(b'')\n   25  \n   26: def snapshot_form(val):\n   27      if is_numeric(val):\n   28          return str(val)\n   ..\n   70  \n   71      def commit(self):\n   72:         for k, v in self.storage_cache.items():\n   73              if v:\n   74                  self.storage_trie.update(utils.encode_int32(k), rlp.encode(v))\n   ..\n  118      def to_dict(self):\n  119          odict = self.storage_trie.to_dict()\n  120:         for k, v in self.storage_cache.items():\n  121              odict[utils.encode_int(k)] = rlp.encode(utils.encode_int(v))\n  122          return {'balance': str(self.balance), 'nonce': str(self.nonce), 'code': '0x'+encode_hex(self.code),\n  123                  'storage': {'0x'+encode_hex(key.lstrip(b'\\x00') or b'\\x00'):\n  124:                             '0x'+encode_hex(rlp.decode(val)) for key, val in odict.items()} }\n  125  \n  126  #from ethereum.state import State\n  ...\n  131          self.env = env\n  132          self.trie = SecureTrie(Trie(self.db, root))\n  133:         for k, v in STATE_DEFAULTS.items():\n  134              setattr(self, k, kwargs.get(k, copy.copy(v)))\n  135          self.journal = []\n  ...\n  228  \n  229      def add_log(self, log):\n  230:         for listener in self.log_listeners:\n  231              listener(log)\n  232          self.logs.append(log)\n  ...\n  243  \n  244      def snapshot(self):\n  245:         return (self.trie.root_hash, len(self.journal), {k: copy.copy(getattr(self, k)) for k in STATE_DEFAULTS})\n  246  \n  247      def revert(self, snapshot):\n  ...\n  254              self.trie.root_hash = h\n  255              self.cache = {}\n  256:         for k in STATE_DEFAULTS:\n  257              setattr(self, k, copy.copy(auxvars[k]))\n  258  \n  ...\n  262          setattr(self, k, v)\n  263  \n  264:     def is_SERENITY(self, at_fork_height=False):\n  265:         if at_fork_height: return self.block_number == self.config['SERENITY_FORK_BLKNUM']\n  266          else: return self.block_number >= self.config['SERENITY_FORK_BLKNUM']\n  267  \n  268:     def is_HOMESTEAD(self, at_fork_height=False):\n  269:         if at_fork_height: return self.block_number == self.config['HOMESTEAD_FORK_BLKNUM']\n  270          else: return self.block_number >= self.config['HOMESTEAD_FORK_BLKNUM']\n  271  \n  272:     def is_METROPOLIS(self, at_fork_height=False):\n  273:         if at_fork_height: return self.block_number == self.config['METROPOLIS_FORK_BLKNUM']\n  274          else: return self.block_number >= self.config['METROPOLIS_FORK_BLKNUM']\n  275  \n  276:     def is_ANTI_DOS(self, at_fork_height=False):\n  277:         if at_fork_height: return self.block_number == self.config['ANTI_DOS_FORK_BLKNUM']\n  278          else: return self.block_number >= self.config['ANTI_DOS_FORK_BLKNUM']\n  279  \n  280:     def is_SPURIOUS_DRAGON(self, at_fork_height=False):\n  281:         if at_fork_height: return self.block_number == self.config['SPURIOUS_DRAGON_FORK_BLKNUM']\n  282          else: return self.block_number >= self.config['SPURIOUS_DRAGON_FORK_BLKNUM']\n  283  \n  284:     def is_DAO(self, at_fork_height=False):\n  285:         if at_fork_height: return self.block_number == self.config['DAO_FORK_BLKNUM']\n  286          else: return self.block_number >= self.config['DAO_FORK_BLKNUM']\n  287  \n  ...\n  309  \n  310      def commit(self, allow_empties=False):\n  311:         for addr, acct in self.cache.items():\n  312              if acct.touched:\n  313                  acct.commit()\n  ...\n  322  \n  323      def to_dict(self):\n  324:         for addr in self.trie.to_dict().keys():\n  325              self.get_and_cache_account(addr)\n  326:         return {encode_hex(addr): acct.to_dict() for addr, acct in self.cache.items()}\n  327  \n  328      def del_account(self, address):\n  ...\n  346          snapshot = {}\n  347          if root_only:\n  348:             # Smaller snapshot format that only includes the state root\n  349              # (requires original DB to re-initialize)\n  350              snapshot[\"state_root\"] = '0x'+encode_hex(self.trie.root_hash)\n  ...\n  353              snapshot[\"alloc\"] = self.to_dict()\n  354          # Save non-state-root variables\n  355:         for k, default in STATE_DEFAULTS.items():\n  356              default = copy.copy(default)\n  357              v = getattr(self, k)\n  ...\n  361                  snapshot[k] = '0x'+encode_hex(v)\n  362              elif k == 'prev_headers' and not no_prevblocks:\n  363:                 snapshot[k] = [prev_header_to_dict(h) for h in v[:self.config['PREV_HEADER_DEPTH']]]\n  364              elif k == 'recent_uncles' and not no_prevblocks:\n  365:                 snapshot[k] = {str(n): ['0x'+encode_hex(h) for h in headers] for n, headers in v.items()}\n  366          return snapshot\n  367  \n  ...\n  371          state = State(env = env)\n  372          if \"alloc\" in snapshot_data:\n  373:             for addr, data in snapshot_data[\"alloc\"].items():\n  374                  if len(addr) == 40:\n  375                      addr = decode_hex(addr)\n  ...\n  384                      state.set_nonce(addr, parse_as_int(data['nonce']))\n  385                  if 'storage' in data:\n  386:                     for k, v in data['storage'].items():\n  387                          state.set_storage_data(addr, parse_as_bin(k), parse_as_bin(v))\n  388          elif \"state_root\" in snapshot_data:\n  ...\n  390          else:\n  391              raise Exception(\"Must specify either alloc or state root parameter\")\n  392:         for k, default in STATE_DEFAULTS.items():\n  393              default = copy.copy(default)\n  394              v = snapshot_data[k] if k in snapshot_data else None\n  ...\n  399              elif k == 'prev_headers':\n  400                  if k in snapshot_data:\n  401:                     headers = [dict_to_prev_header(h) for h in v]\n  402                  else:\n  403                      headers = default\n  ...\n  406                  if k in snapshot_data:\n  407                      uncles = {}\n  408:                     for height, _uncles in v.items():\n  409                          uncles[int(height)] = []\n  410:                         for uncle in _uncles:\n  411                              uncles[int(height)].append(parse_as_bin(uncle))\n  412                  else:\n  ...\n  421          env2 = Env(OverlayDB(self.env.db), self.env.config)\n  422          s = State.from_snapshot(snapshot, env2)\n  423:         for param in STATE_DEFAULTS:\n  424              setattr(s, param, getattr(self, param))\n  425          s.recent_uncles = self.recent_uncles\n  426          s.prev_headers = self.prev_headers\n  427:         for acct in self.cache.values():\n  428              assert not acct.touched\n  429          s.journal = copy.copy(self.journal)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\opcodes.py:\n   76  }\n   77  \n   78: for i in range(1, 33):\n   79      opcodes[0x5f + i] = ['PUSH' + str(i), 0, 1, 3]\n   80  \n   81: for i in range(1, 17):\n   82      opcodes[0x7f + i] = ['DUP' + str(i), i, i + 1, 3]\n   83      opcodes[0x8f + i] = ['SWAP' + str(i), i + 1, i + 1, 3]\n   84  \n   85  reverse_opcodes = {}\n   86: for o in opcodes:\n   87      vars()[opcodes[o][0]] = opcodes[o]\n   88      reverse_opcodes[opcodes[o][0]] = o\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\securetrie.py:\n   21      def to_dict(self):\n   22          o = {}\n   23:         for h, v in list(self.trie.to_dict().items()):\n   24              k = self.db.get(h)\n   25              o[k] = v\n   ..\n   27  \n   28      def iter_branch(self):\n   29:         for h, v in self.trie.iter_branch():\n   30              k = self.db.get(h)\n   31              yield (k, v)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\slogging.py:\n   75      use only once!\n   76      \"\"\"\n   77:     max_capacity = 1000 * 1000  # check we are not forgotten or abused\n   78  \n   79      def __init__(self, disable_other_handlers=False, log_config=None):\n   ..\n  120      name_levels.extend(\n  121          (name, logging.getLevelName(logger.level))\n  122:         for name, logger\n  123          in root.manager.loggerDict.items()\n  124          if hasattr(logger, 'level')\n  125      )\n  126  \n  127:     config_string = ','.join('%s:%s' % x for x in name_levels)\n  128  \n  129      return dict(config_string=config_string, log_json=SLogger.manager.log_json)\n  ...\n  175          return self.isEnabledFor(logging._checkLevel(level_name.upper()))\n  176  \n  177:     def format_message(self, msg, kwargs, highlight, level):\n  178          if getattr(self, 'log_json', False):\n  179              message = dict()\n  180:             message['event'] = '{}.{}'.format(self.name, msg.lower().replace(' ', '_'))\n  181              message['level'] = logging.getLevelName(level)\n  182              try:\n  ...\n  192                  message.update({\n  193                      k: v if is_numeric(v) or isinstance(v, (float, complex)) else repr(v)\n  194:                     for k, v in kwargs.items()\n  195                  })\n  196                  msg = json.dumps(message, cls=_LogJSONEncoder)\n  197          else:\n  198:             msg = \"{}{} {}{}\".format(\n  199                  bcolors.WARNING if highlight else \"\",\n  200                  msg,\n  201:                 \" \".join(\"{}={!s}\".format(k, v) for k, v in kwargs.items()),\n  202                  bcolors.ENDC if highlight else \"\"\n  203              )\n  ...\n  213          extra['kwargs'] = kwargs\n  214          extra['original_msg'] = msg\n  215:         msg = self.format_message(msg, kwargs, highlight, level)\n  216          super(SLogger, self)._log(level, msg, args, exc_info, extra)\n  217  \n  ...\n  235              rec_dict = getattr(record, 'kwargs', {}).copy()\n  236              rec_dict['event'] = getattr(record, 'original_msg', \"\")\n  237:             for listener in log_listeners:\n  238                  listener(rec_dict)\n  239          super(RootLogger, self).handle(record)\n  ...\n  259      if isinstance(input_, dict):\n  260          res = {}\n  261:         for k, v in input_.items():\n  262              v = _stringify_dict_keys(v)\n  263              if not isinstance(k, (int, long, bool, None.__class__)):\n  ...\n  265              res[k] = v\n  266      elif isinstance(input_, (list, tuple)):\n  267:         res = input_.__class__([_stringify_dict_keys(i) for i in input_])\n  268      else:\n  269          res = input_\n  ...\n  287  def configure(config_string=None, log_json=False, log_file=None):\n  288      if not config_string:\n  289:         config_string = \":{}\".format(DEFAULT_LOGLEVEL)\n  290  \n  291      if log_json:\n  292          SLogger.manager.log_json = True\n  293:         log_format = JSON_FORMAT\n  294      else:\n  295          SLogger.manager.log_json = False\n  296:         log_format = PRINT_FORMAT\n  297  \n  298      if len(rootLogger.handlers) == 0:\n  299          handler = StreamHandler()\n  300:         formatter = Formatter(log_format)\n  301:         handler.setFormatter(formatter)\n  302          rootLogger.addHandler(handler)\n  303      if log_file:\n  304:         if not any(isinstance(hndlr, FileHandler) for hndlr in rootLogger.handlers):\n  305              handler = FileHandler(log_file)\n  306:             formatter = Formatter(\"{} {}\".format(FILE_PREFIX, log_format))\n  307:             handler.setFormatter(formatter)\n  308              rootLogger.addHandler(handler)\n  309  \n  310:     # Reset logging levels before applying new config below\n  311:     for name, logger in SLogger.manager.loggerDict.items():\n  312          if hasattr(logger, 'setLevel'):\n  313              # Guard against `logging.PlaceHolder` instances\n  314              logger.setLevel(logging.NOTSET)\n  315:             if config_string == \":{}\".format(DEFAULT_LOGLEVEL):\n  316                  logger.propagate = True\n  317              else:\n  318                  logger.propagate = True\n  319  \n  320:     for name_levels in config_string.split(','):\n  321          name, _, level = name_levels.partition(':')\n  322          logger = getLogger(name)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\snapshot.py:\n   51      base_block = chain.get_block_by_number(max(head_block.number-recent, 0))\n   52      return {\n   53:         'base': snapshot_form(rlp.encode(base_block.header)),\n   54:         'chainDifficulty': snapshot_form(chain.get_score(base_block)),\n   55          'blocks': create_blocks_snapshot(chain, base_block, head_block),\n   56          'alloc': create_state_snapshot(chain, base_block)\n   ..\n   63      alloc = dict()\n   64      count = 0\n   65:     for addr, account_rlp in state.trie.iter_branch():\n   66          alloc[encode_hex(addr)] = create_account_snapshot(env, account_rlp)\n   67          count += 1\n   ..\n   74      storage_trie = SecureTrie(Trie(env.db, account.storage))\n   75      storage = dict()\n   76:     for k, v in storage_trie.iter_branch():\n   77          storage[encode_hex(k.lstrip('\\x00') or '\\x00')] = encode_hex(v)\n   78      return {\n   79:         'nonce': snapshot_form(account.nonce),\n   80:         'balance': snapshot_form(account.balance),\n   81          'code': encode_hex(account.code),\n   82          'storage': storage\n   ..\n   88      block = head\n   89      while True:\n   90:         recent_blocks.append(snapshot_form(rlp.encode(block)))\n   91          if block and block.prevhash != base.hash:\n   92              block = chain.get_parent(block)\n   ..\n  130  \n  131      count = 0\n  132:     for block_rlp in snapshot['blocks'][1:]:\n  133          block_rlp = scan_bin(block_rlp)\n  134          block = rlp.decode(block_rlp, Block)\n  ...\n  148      count = 0\n  149      print \"Start loading state from snapshot\"\n  150:     for addr in alloc:\n  151          print \"[%d] loading account %s\" % (count, addr)\n  152          account = alloc[addr]\n  ...\n  155              t = SecureTrie(Trie(db, BLANK_ROOT))\n  156              c = 0\n  157:             for k in account['storage']:\n  158                  v = account['storage'][k]\n  159                  enckey = zpad(decode_hex(k), 32)\n  ...\n  183  \n  184  \n  185: def snapshot_form(val):\n  186      if is_numeric(val):\n  187          return str(val)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\specials.py:\n   34      except Exception as e:\n   35          return 1, msg.gas - gas_cost, []\n   36:     o = [0] * 12 + [safe_ord(x) for x in utils.sha3(pub)[-20:]]\n   37      return 1, msg.gas - gas_cost, o\n   38  \n   ..\n   46          return 0, 0, []\n   47      d = msg.data.extract_all()\n   48:     o = [safe_ord(x) for x in hashlib.sha256(d).digest()]\n   49      return 1, msg.gas - gas_cost, o\n   50  \n   ..\n   58          return 0, 0, []\n   59      d = msg.data.extract_all()\n   60:     o = [0] * 12 + [safe_ord(x) for x in hashlib.new('ripemd160', d).digest()]\n   61      return 1, msg.gas - gas_cost, o\n   62  \n   ..\n   79  \n   80  def proc_modexp(ext, msg):\n   81:     if not ext.post_metropolis_hardfork():\n   82          return 1, msg.gas, []\n   83      print('modexp proc', msg.gas)\n   ..\n  104          return 1, msg.gas - gas_cost, [0] * modlen\n  105      o = pow(utils.big_endian_to_int(base), utils.big_endian_to_int(exp), utils.big_endian_to_int(mod))\n  106:     return 1, msg.gas - gas_cost, [safe_ord(x) for x in utils.zpad(utils.int_to_big_endian(o), modlen)]\n  107  \n  108  def validate_point(x, y):\n  ...\n  120  \n  121  def proc_ecadd(ext, msg):\n  122:     if not ext.post_metropolis_hardfork():\n  123          return 1, msg.gas, []\n  124      import py_ecc.optimized_bn128 as bn128\n  ...\n  136          return 0, 0, []\n  137      o = bn128.normalize(bn128.add(p1, p2))\n  138:     return 1, msg.gas - opcodes.GECADD, [safe_ord(x) for x in (encode_int32(o[0].n) + encode_int32(o[1].n))]\n  139  \n  140  def proc_ecmul(ext, msg):\n  141:     if not ext.post_metropolis_hardfork():\n  142          return 1, msg.gas, []\n  143      import py_ecc.optimized_bn128 as bn128\n  ...\n  154      o = bn128.normalize(bn128.multiply(p, m))\n  155      return (1, msg.gas - opcodes.GECMUL,\n  156:             [safe_ord(c) for c in (encode_int32(o[0].n) + encode_int32(o[1].n))])\n  157  \n  158  def proc_ecpairing(ext, msg):\n  159:     if not ext.post_metropolis_hardfork():\n  160          return 1, msg.gas, []\n  161      import py_ecc.optimized_bn128 as bn128\n  ...\n  170      zero = (bn128.FQ2.one(), bn128.FQ2.one(), bn128.FQ2.zero())\n  171      exponent = bn128.FQ12.one()\n  172:     for i in range(0, msg.data.size, 192):\n  173          x1 = msg.data.extract32(i)\n  174          y1 = msg.data.extract32(i + 32)\n  ...\n  180          if p1 is False:\n  181              return 0, 0, []\n  182:         for v in (x2_i, x2_r, y2_i, y2_r):\n  183              if v >= bn128.field_modulus:\n  184                  return 0, 0, []\n  ...\n  198  \n  199  specials = {\n  200:     decode_hex(k): v for k, v in\n  201      {\n  202          b'0000000000000000000000000000000000000001': proc_ecrecover,\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\state.py:\n   26  THREE = b'\\x00' * 19 + b'\\x03'\n   27  \n   28: def snapshot_form(val):\n   29      if is_numeric(val):\n   30          return str(val)\n   ..\n   73  \n   74      def commit(self):\n   75:         for k, v in self.storage_cache.items():\n   76              if v:\n   77                  self.storage_trie.update(utils.encode_int32(k), rlp.encode(v))\n   ..\n  120      def to_dict(self):\n  121          odict = self.storage_trie.to_dict()\n  122:         for k, v in self.storage_cache.items():\n  123              odict[utils.encode_int(k)] = rlp.encode(utils.encode_int(v))\n  124          return {'balance': str(self.balance), 'nonce': str(self.nonce), 'code': '0x'+encode_hex(self.code),\n  125                  'storage': {'0x'+encode_hex(key.lstrip(b'\\x00') or b'\\x00'):\n  126:                             '0x'+encode_hex(rlp.decode(val)) for key, val in odict.items()} }\n  127  \n  128  #from ethereum.state import State\n  ...\n  132          self.env = env\n  133          self.trie = SecureTrie(Trie(RefcountDB(self.db), root))\n  134:         for k, v in STATE_DEFAULTS.items():\n  135              setattr(self, k, kwargs.get(k, copy.copy(v)))\n  136          self.journal = []\n  ...\n  238  \n  239      def add_log(self, log):\n  240:         for listener in self.log_listeners:\n  241              listener(log)\n  242          self.logs.append(log)\n  ...\n  253  \n  254      def snapshot(self):\n  255:         return (self.trie.root_hash, len(self.journal), {k: copy.copy(getattr(self, k)) for k in STATE_DEFAULTS})\n  256  \n  257      def revert(self, snapshot):\n  ...\n  268              self.trie.root_hash = h\n  269              self.cache = {}\n  270:         for k in STATE_DEFAULTS:\n  271              setattr(self, k, copy.copy(auxvars[k]))\n  272          if three_touched and 2675000 < self.block_number < 2675200 : # Compatibility with weird geth+parity bug\n  ...\n  278          setattr(self, k, v)\n  279  \n  280:     def is_SERENITY(self, at_fork_height=False):\n  281:         if at_fork_height: return self.block_number == self.config['SERENITY_FORK_BLKNUM']\n  282          else: return self.block_number >= self.config['SERENITY_FORK_BLKNUM']\n  283  \n  284:     def is_HOMESTEAD(self, at_fork_height=False):\n  285:         if at_fork_height: return self.block_number == self.config['HOMESTEAD_FORK_BLKNUM']\n  286          else: return self.block_number >= self.config['HOMESTEAD_FORK_BLKNUM']\n  287  \n  288:     def is_METROPOLIS(self, at_fork_height=False):\n  289:         if at_fork_height: return self.block_number == self.config['METROPOLIS_FORK_BLKNUM']\n  290          else: return self.block_number >= self.config['METROPOLIS_FORK_BLKNUM']\n  291  \n  292:     def is_ANTI_DOS(self, at_fork_height=False):\n  293:         if at_fork_height: return self.block_number == self.config['ANTI_DOS_FORK_BLKNUM']\n  294          else: return self.block_number >= self.config['ANTI_DOS_FORK_BLKNUM']\n  295  \n  296:     def is_SPURIOUS_DRAGON(self, at_fork_height=False):\n  297:         if at_fork_height: return self.block_number == self.config['SPURIOUS_DRAGON_FORK_BLKNUM']\n  298          else: return self.block_number >= self.config['SPURIOUS_DRAGON_FORK_BLKNUM']\n  299  \n  300:     def is_DAO(self, at_fork_height=False):\n  301:         if at_fork_height: return self.block_number == self.config['DAO_FORK_BLKNUM']\n  302          else: return self.block_number >= self.config['DAO_FORK_BLKNUM']\n  303  \n  ...\n  327  \n  328      def commit(self, allow_empties=False):\n  329:         for addr, acct in self.cache.items():\n  330              if acct.touched or acct.deleted:\n  331                  acct.commit()\n  ...\n  346  \n  347      def to_dict(self):\n  348:         for addr in self.trie.to_dict().keys():\n  349              self.get_and_cache_account(addr)\n  350:         return {encode_hex(addr): acct.to_dict() for addr, acct in self.cache.items()}\n  351  \n  352      def del_account(self, address):\n  ...\n  372          snapshot = {}\n  373          if root_only:\n  374:             # Smaller snapshot format that only includes the state root\n  375              # (requires original DB to re-initialize)\n  376              snapshot[\"state_root\"] = '0x'+encode_hex(self.trie.root_hash)\n  ...\n  379              snapshot[\"alloc\"] = self.to_dict()\n  380          # Save non-state-root variables\n  381:         for k, default in STATE_DEFAULTS.items():\n  382              default = copy.copy(default)\n  383              v = getattr(self, k)\n  ...\n  387                  snapshot[k] = '0x'+encode_hex(v)\n  388              elif k == 'prev_headers' and not no_prevblocks:\n  389:                 snapshot[k] = [prev_header_to_dict(h) for h in v[:self.config['PREV_HEADER_DEPTH']]]\n  390              elif k == 'recent_uncles' and not no_prevblocks:\n  391:                 snapshot[k] = {str(n): ['0x'+encode_hex(h) for h in headers] for n, headers in v.items()}\n  392          return snapshot\n  393  \n  ...\n  397          state = State(env = env)\n  398          if \"alloc\" in snapshot_data:\n  399:             for addr, data in snapshot_data[\"alloc\"].items():\n  400                  if len(addr) == 40:\n  401                      addr = decode_hex(addr)\n  ...\n  410                      state.set_nonce(addr, parse_as_int(data['nonce']))\n  411                  if 'storage' in data:\n  412:                     for k, v in data['storage'].items():\n  413                          state.set_storage_data(addr, parse_as_bin(k), parse_as_bin(v))\n  414          elif \"state_root\" in snapshot_data:\n  ...\n  416          else:\n  417              raise Exception(\"Must specify either alloc or state root parameter\")\n  418:         for k, default in STATE_DEFAULTS.items():\n  419              default = copy.copy(default)\n  420              v = snapshot_data[k] if k in snapshot_data else None\n  ...\n  425              elif k == 'prev_headers':\n  426                  if k in snapshot_data:\n  427:                     headers = [dict_to_prev_header(h) for h in v]\n  428                  else:\n  429                      headers = default\n  ...\n  432                  if k in snapshot_data:\n  433                      uncles = {}\n  434:                     for height, _uncles in v.items():\n  435                          uncles[int(height)] = []\n  436:                         for uncle in _uncles:\n  437                              uncles[int(height)].append(parse_as_bin(uncle))\n  438                  else:\n  ...\n  450          env2 = Env(OverlayDB(self.env.db), self.env.config)\n  451          s = State.from_snapshot(snapshot, env2)\n  452:         for param in STATE_DEFAULTS:\n  453              setattr(s, param, getattr(self, param))\n  454          s.recent_uncles = self.recent_uncles\n  455          s.prev_headers = self.prev_headers\n  456:         for acct in self.cache.values():\n  457              assert not acct.touched or not acct.deleted\n  458          s.journal = copy.copy(self.journal)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\transaction_queue.py:\n   29          return len(self.txs)\n   30  \n   31:     def add_transaction(self, tx, force=False):\n   32:         prio = PRIO_INFINITY if force else -tx.gasprice\n   33          heapq.heappush(self.txs, OrderableTx(prio, self.counter, tx))\n   34          self.counter += 1\n   ..\n   39              item.prio = -item.tx.gasprice\n   40              heapq.heappush(self.txs, item)\n   41:         for i in range(min(len(self.txs), max_seek_depth)):\n   42              item = heapq.heaptop(self.txs)\n   43              if item.tx.startgas > max_gas:\n   ..\n   59  \n   60      def diff(self, txs):\n   61:         remove_hashes = [tx.hash for tx in txs]\n   62:         keep = [item for item in self.txs if item.tx.hash not in remove_hashes]\n   63          q = TransactionQueue()\n   64          q.txs = keep\n   ..\n   87                    (999999, 50000, 74)]\n   88      # Add transactions to queue\n   89:     for param in params:\n   90          q.add_transaction(make_test_tx(s=param[0], g=param[1]))\n   91      # Attempt pops from queue\n   92:     for (maxgas, expected_s, expected_g) in operations:\n   93          tx = q.pop_transaction(max_gas=maxgas)\n   94          if tx:\n   ..\n  105      tx4 = make_test_tx(data='foobar')\n  106      q1 = TransactionQueue()\n  107:     for tx in [tx1, tx2, tx3, tx4]:\n  108          q1.add_transaction(tx)\n  109      q2 = q1.diff([tx2])\n  110      assert len(q2) == 3\n  111:     assert tx1 in [item.tx for item in q2.txs]\n  112:     assert tx3 in [item.tx for item in q2.txs]\n  113:     assert tx4 in [item.tx for item in q2.txs]\n  114  \n  115      q3 = q2.diff([tx4])\n  116      assert len(q3) == 2\n  117:     assert tx1 in [item.tx for item in q3.txs]\n  118:     assert tx3 in [item.tx for item in q3.txs]\n  119  \n  120  \n  ...\n  126  \n  127  \n  128: def test_ordering_for_same_prio():\n  129      q = TransactionQueue()\n  130      count = 10\n  131      # Add <count> transactions to the queue, all with the same\n  132      # startgas/gasprice but with sequential nonces.\n  133:     for i in range(count):\n  134          q.add_transaction(make_test_tx(nonce=i))\n  135  \n  136      expected_nonce_order = range(count)\n  137      nonces = []\n  138:     for i in range(count):\n  139          tx = q.pop_transaction()\n  140          nonces.append(tx.nonce)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\transactions.py:\n   27  \n   28      nonce is the number of transactions already sent by that account, encoded\n   29:     in binary form (eg.  0 -> '', 7 -> '\\x07', 1000 -> '\\x03\\xd8').\n   30  \n   31      (v,r,s) is the raw Electrum-style signature of the transaction without the\n   ..\n   35  \n   36      A valid transaction is one where:\n   37:     (i) the signature is well-formed (ie. 0 <= v <= 3, 0 <= r < P, 0 <= s < N,\n   38          0 <= r < P - N if v >= 2), and\n   39      (ii) the sending account has enough funds to pay the fee and the value.\n   ..\n  130      def to_dict(self):\n  131          d = {}\n  132:         for name, _ in self.__class__.fields:\n  133              d[name] = getattr(self, name)\n  134              if name in ('to', 'data'):\n  ...\n  171          return encode_hex(self.hash)\n  172  \n  173:     # This method should be called for block numbers >= HOMESTEAD_FORK_BLKNUM only.\n  174      # The >= operator is replaced by > because the integer division N/2 always produces the value\n  175      # which is by 0.5 less than the real N/2\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\trie.py:\n   14  \n   15  hti = {}\n   16: for i, c in enumerate(b'0123456789abcdef'):\n   17      hti[c] = i\n   18: for i, c in enumerate('0123456789abcdef'):\n   19      hti[c] = i\n   20  \n   ..\n   32      [6, 8, 6, 5, 6, 12, 6, 12, 6, 15]\n   33      \"\"\"\n   34:     return [hti[c] for c in encode_hex(s)]\n   35  \n   36  \n   37  def nibbles_to_bin(nibbles):\n   38:     if any(x > 15 or x < 0 for x in nibbles):\n   39          raise Exception(\"nibbles can only be [0,..15]\")\n   40  \n   ..\n   43  \n   44      res = b''\n   45:     for i in range(0, len(nibbles), 2):\n   46          res += ascii_chr(16 * nibbles[i] + nibbles[i + 1])\n   47      return res\n   ..\n   90          nibbles = [flags, 0] + nibbles\n   91      o = b''\n   92:     for i in range(0, len(nibbles), 2):\n   93          o += ascii_chr(16 * nibbles[i] + nibbles[i + 1])\n   94      return o\n   ..\n  144  \n  145          :param db key value database\n  146:         :root: blank or trie node in form of [key, value] or [v0,v1..v15,v]\n  147          \"\"\"\n  148          self.db = db  # Pass in a database object directly\n  ...\n  154  \n  155      #     :param dbfile: key value database\n  156:     #     :root: blank or trie node in form of [key, value] or [v0,v1..v15,v]\n  157      #     \"\"\"\n  158      #     if isinstance(dbfile, str):\n  ...\n  203          node_type = self._get_node_type(node)\n  204          if node_type == NODE_TYPE_BRANCH:\n  205:             for item in node[:16]:\n  206                  self._delete_child_storage(self._decode_to_node(item))\n  207          elif node_type == NODE_TYPE_EXTENSION:\n  ...\n  232          \"\"\" get node type and content\n  233  \n  234:         :param node: node in form of list, or BLANK_NODE\n  235          :return: node type\n  236          \"\"\"\n  ...\n  249          \"\"\" get value inside a node\n  250  \n  251:         :param node: node in form of list, or BLANK_NODE\n  252          :param key: nibble list without terminator\n  253          :return:\n  ...\n  282          \"\"\" update item inside a node\n  283  \n  284:         :param node: node in form of list, or BLANK_NODE\n  285          :param key: nibble list without terminator\n  286              .. note:: key may be []\n  ...\n  324          # find longest common prefix\n  325          prefix_length = 0\n  326:         for i in range(min(len(curr_key), len(key))):\n  327              if key[i] != curr_key[i]:\n  328                  break\n  ...\n  369  \n  370          if prefix_length:\n  371:             # create node for key prefix\n  372              return [pack_nibbles(curr_key[:prefix_length]),\n  373                      self._encode_node(new_node)]\n  ...\n  387              if reverse:\n  388                  scan_range.reverse()\n  389:             for i in scan_range:\n  390                  o = self._getany(self._decode_to_node(node[i]), reverse=reverse, path=path + [i])\n  391                  if o is not None:\n  ...\n  422              b1[key[0]] = self._encode_node(sub1) if sub1 else ''\n  423              b2[key[0]] = self._encode_node(sub2) if sub2 else ''\n  424:             return self._normalize_branch_node(b1) if len([x for x in b1 if x]) else BLANK_NODE, \\\n  425:                  self._normalize_branch_node(b2) if len([x for x in b2 if x]) else BLANK_NODE\n  426  \n  427          descend_key = without_terminator(unpack_to_nibbles(node[0]))\n  ...\n  481              # find longest common prefix\n  482              prefix_length = 0\n  483:             for i in range(min(len(descend_key1), len(descend_key2))):\n  484                  if descend_key1[i] != descend_key2[i]:\n  485                      break\n  ...\n  500  \n  501          nodes = [[node1], [node2]]\n  502:         for (node, node_type) in zip(nodes, [node_type1, node_type2]):\n  503              if node_type != NODE_TYPE_BRANCH:\n  504                  new_node = [BLANK_NODE] * 17\n  ...\n  510                  node[0] = new_node\n  511          node1, node2 = nodes[0][0], nodes[1][0]\n  512:         assert len([i for i in range(17) if node1[i] and node2[i]]) <= 1\n  513:         new_node = [self._encode_node(self._merge(self._decode_to_node(node1[i]), self._decode_to_node(node2[i]))) if node1[i] and node2[i] else node1[i] or node2[i] for i in range(17)]\n  514          return new_node\n  515  \n  ...\n  539              else:\n  540                  scan_range = list(range(key[0] + 1 if len(key) else 0, 16))\n  541:             for i in scan_range:\n  542                  sub_node = self._decode_to_node(node[i])\n  543                  # print('prelim getany', path+[i])\n  ...\n  596      def _delete_node_storage(self, node):\n  597          \"\"\"delete storage\n  598:         :param node: node in form of list, or BLANK_NODE\n  599          \"\"\"\n  600          if node == BLANK_NODE:\n  ...\n  607          ===== FIXME ====\n  608          in the current trie implementation two nodes can share identical subtrees\n  609:         thus we can not safely delete nodes for now\n  610          \"\"\"\n  611          self.deletes.append(encoded)\n  ...\n  615          \"\"\" update item inside a node\n  616  \n  617:         :param node: node in form of list, or BLANK_NODE\n  618          :param key: nibble list without terminator\n  619              .. note:: key may be []\n  ...\n  637          \"\"\"node should have only one item changed\n  638          \"\"\"\n  639:         not_blank_items_count = sum(1 for x in range(17) if node[x])\n  640          assert not_blank_items_count >= 1\n  641  \n  ...\n  644  \n  645          # now only one item is not blank\n  646:         not_blank_index = [i for i, item in enumerate(node) if item][0]\n  647  \n  648          # the value item is not blank\n  ...\n  704              return BLANK_NODE if key == curr_key else node\n  705  \n  706:         # for inner key value type\n  707          new_sub_node = self._delete_and_delete_storage(\n  708              self._decode_to_node(node[1]), key[len(curr_key):])\n  ...\n  750          \"\"\"Get counts of (key, value) stored in this and the descendant nodes\n  751  \n  752:         :param node: node in form of list, or BLANK_NODE\n  753          \"\"\"\n  754          if node == BLANK_NODE:\n  ...\n  765          elif node_type == NODE_TYPE_BRANCH:\n  766              sizes = [self._get_size(self._decode_to_node(node[x]))\n  767:                      for x in range(16)]\n  768              sizes = sizes + [1 if node[-1] else 0]\n  769              return sum(sizes)\n  ...\n  771      def _iter_branch(self, node):\n  772          \"\"\"yield (key, value) stored in this and the descendant nodes\n  773:         :param node: node in form of list, or BLANK_NODE\n  774  \n  775          .. note::\n  776:             Here key is in full form, rather than key of the individual node\n  777          \"\"\"\n  778          if node == BLANK_NODE:\n  ...\n  783          if is_key_value_type(node_type):\n  784              nibbles = without_terminator(unpack_to_nibbles(node[0]))\n  785:             key = b'+'.join([to_string(x) for x in nibbles])\n  786              if node_type == NODE_TYPE_EXTENSION:\n  787                  sub_tree = self._iter_branch(self._decode_to_node(node[1]))\n  ...\n  790  \n  791              # prepend key of this node to the keys of children\n  792:             for sub_key, sub_value in sub_tree:\n  793                  full_key = (key + b'+' + sub_key).strip(b'+')\n  794                  yield (full_key, sub_value)\n  795  \n  796          elif node_type == NODE_TYPE_BRANCH:\n  797:             for i in range(16):\n  798                  sub_tree = self._iter_branch(self._decode_to_node(node[i]))\n  799:                 for sub_key, sub_value in sub_tree:\n  800                      full_key = (str_to_bytes(str(i)) + b'+' + sub_key).strip(b'+')\n  801                      yield (full_key, sub_value)\n  ...\n  804  \n  805      def iter_branch(self):\n  806:         for key_str, value in self._iter_branch(self.root_node):\n  807              if key_str:\n  808:                 nibbles = [int(x) for x in key_str.split(b'+')]\n  809              else:\n  810                  nibbles = []\n  ...\n  816          to dict items.\n  817  \n  818:         :param node: node in form of list, or BLANK_NODE\n  819  \n  820          .. note::\n  821  \n  822:             Here key is in full form, rather than key of the individual node\n  823          \"\"\"\n  824          if node == BLANK_NODE:\n  ...\n  829          if is_key_value_type(node_type):\n  830              nibbles = without_terminator(unpack_to_nibbles(node[0]))\n  831:             key = b'+'.join([to_string(x) for x in nibbles])\n  832              if node_type == NODE_TYPE_EXTENSION:\n  833                  sub_dict = self._to_dict(self._decode_to_node(node[1]))\n  ...\n  837              # prepend key of this node to the keys of children\n  838              res = {}\n  839:             for sub_key, sub_value in sub_dict.items():\n  840                  full_key = (key + b'+' + sub_key).strip(b'+')\n  841                  res[full_key] = sub_value\n  ...\n  844          elif node_type == NODE_TYPE_BRANCH:\n  845              res = {}\n  846:             for i in range(16):\n  847                  sub_dict = self._to_dict(self._decode_to_node(node[i]))\n  848  \n  849:                 for sub_key, sub_value in sub_dict.items():\n  850                      full_key = (str_to_bytes(str(i)) + b'+' + sub_key).strip(b'+')\n  851                      res[full_key] = sub_value\n  ...\n  858          d = self._to_dict(self.root_node)\n  859          res = {}\n  860:         for key_str, value in d.items():\n  861              if key_str:\n  862:                 nibbles = [int(x) for x in key_str.split(b'+')]\n  863              else:\n  864                  nibbles = []\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\utils.py:\n   41          return int_to_big_endian(value)\n   42  \n   43:     def to_string_for_regexp(value):\n   44          return str(value)\n   45      unicode = unicode\n   46  \n   47      def bytearray_to_bytestr(value):\n   48:         return bytes(''.join(chr(c) for c in value))\n   49  \n   50      def encode_int32(v):\n   ..\n   52  \n   53      def bytes_to_int(value):\n   54:         return big_endian_to_int(bytes(''.join(chr(c) for c in value)))\n   55  \n   56  else:\n   ..\n   71          return int_to_big_endian(value)\n   72  \n   73:     def to_string_for_regexp(value):\n   74          return str(to_string(value), 'utf-8')\n   75      unicode = str\n   ..\n  157  def flatten(li):\n  158      o = []\n  159:     for l in li:\n  160          o.extend(l)\n  161      return o\n  ...\n  164  def bytearray_to_int(arr):\n  165      o = 0\n  166:     for a in arr:\n  167          o = (o << 8) + a\n  168      return o\n  ...\n  171  def int_to_32bytearray(i):\n  172      o = [0] * 32\n  173:     for x in range(32):\n  174          o[31 - x] = i & 0xff\n  175          i >>= 8\n  ...\n  195      o = ''\n  196      v = big_endian_to_int(sha3(encode_hex(addr)))\n  197:     for i, c in enumerate(encode_hex(addr)):\n  198          if c in '0123456789':\n  199              o += c\n  ...\n  218          x = x[:20]\n  219      if len(x) != 20:\n  220:         raise Exception(\"Invalid address format: %r\" % x)\n  221      return x\n  222  \n  ...\n  231          o = decode_hex(key[2:])\n  232      else:\n  233:         raise Exception(\"Invalid key format: %r\" % key)\n  234      if o == b'\\x00' * 32:\n  235          raise Exception(\"Zero privkey invalid\")\n  ...\n  266  def int_to_addr(x):\n  267      o = [b''] * 20\n  268:     for i in range(20):\n  269          o[19 - i] = ascii_chr(x & 0xff)\n  270          x >>= 8\n  ...\n  331  \n  332  \n  333: # Format encoders/decoders for bin, addr, int\n  334  \n  335  \n  ...\n  351      \"\"\"decodes and integer from serialization\"\"\"\n  352      if len(v) > 0 and (v[0] == b'\\x00' or v[0] == 0):\n  353:         raise Exception(\"No leading zero bytes allowed for integers\")\n  354      return big_endian_to_int(v)\n  355  \n  ...\n  410  }\n  411  \n  412: # Encoding to printable format\n  413  printers = {\n  414      \"bin\": lambda v: '0x' + encode_hex(v),\n  ...\n  419  }\n  420  \n  421: # Decoding from printable format\n  422  scanners = {\n  423      \"bin\": scan_bin,\n  ...\n  447  \n  448  def print_func_call(ignore_first_arg=False, max_call_number=100):\n  449:     \"\"\" utility function to facilitate debug, it will print input args before\n  450      function call, and print return value after function call\n  451  \n  ...\n  478              tmp_args = args[1:] if ignore_first_arg and len(args) else args\n  479              this_call_number = local['call_number']\n  480:             print(('{0}#{1} args: {2}, {3}'.format(\n  481                  f.__name__,\n  482                  this_call_number,\n  483:                 ', '.join([display(x) for x in tmp_args]),\n  484                  ', '.join(display(key) + '=' + to_string(value)\n  485:                           for key, value in kwargs.items())\n  486              )))\n  487              res = f(*args, **kwargs)\n  488:             print(('{0}#{1} return: {2}'.format(\n  489                  f.__name__,\n  490                  this_call_number,\n  ...\n  500  def dump_state(trie):\n  501      res = ''\n  502:     for k, v in list(trie.to_dict().items()):\n  503          res += '%r:%r\\n' % (encode_hex(k), encode_hex(v))\n  504      return res\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\vm.py:\n   64      # Extract a slice and copy it to memory\n   65      def extract_copy(self, mem, memstart, datastart, size):\n   66:         for i in range(size):\n   67              if datastart + i < self.size:\n   68                  mem[memstart + i] = self.data[self.offset + datastart + i]\n   ..\n  102          self.gas = 0\n  103          self.last_returned = bytearray()\n  104:         for kw in kwargs:\n  105              setattr(self, kw, kwargs[kw])\n  106  \n  ...\n  126  \n  127  \n  128: # Extends memory, and pays gas for it\n  129  def mem_extend(mem, compustate, op, start, sz):\n  130      if sz and start + sz > len(mem):\n  ...\n  145  \n  146  \n  147: # Pays gas for copying data\n  148  def data_copy(compustate, size):\n  149      return eat_gas(compustate, opcodes.GCOPY * utils.ceil32(size) // 32)\n  ...\n  160  \n  161  \n  162: # Used to compute maximum amount of gas for child calls\n  163  def all_but_1n(x, n):\n  164      return x - x // n\n  ...\n  201      op = None\n  202      steps = 0\n  203:     _prevop = None  # for trace only\n  204  \n  205      while compustate.pc < codelen:\n  ...\n  248                  if len(compustate.memory) < 4096:\n  249                      trace_data['memory'] = \\\n  250:                         ''.join([encode_hex(ascii_chr(x)) for x\n  251                                    in compustate.memory])\n  252                  else:\n  253                      trace_data['sha3memory'] = \\\n  254:                         encode_hex(utils.sha3(b''.join([ascii_chr(x) for\n  255                                                x in compustate.memory])))\n  256              if _prevop in ('SSTORE',) or steps == 0:\n  ...\n  274          if 0x60 <= opcode <= 0x7f:\n  275              stk.append(pushcache[compustate.pc - 1])\n  276:             compustate.pc += opcode - 0x5f # Move 1 byte forward for 0x60, up to 32 bytes for 0x7f\n  277          # Arithmetic\n  278          elif opcode < 0x10:\n  ...\n  307              elif op == 'EXP':\n  308                  base, exponent = stk.pop(), stk.pop()\n  309:                 # fee for exponent is dependent on its bytes\n  310                  # calc n bytes to represent exponent\n  311                  nbytes = len(utils.encode_int(exponent))\n  312                  expfee = nbytes * opcodes.GEXPONENTBYTE\n  313:                 if ext.post_spurious_dragon_hardfork():\n  314                      expfee += opcodes.EXP_SUPPLEMENTAL_GAS * nbytes\n  315                  if compustate.gas < expfee:\n  ...\n  372                  stk.append(utils.coerce_to_int(msg.to))\n  373              elif op == 'BALANCE':\n  374:                 if ext.post_anti_dos_hardfork():\n  375                      if not eat_gas(compustate, opcodes.BALANCE_SUPPLEMENTAL_GAS):\n  376                          return vm_exception(\"OUT OF GAS\")\n  ...\n  402                  if not data_copy(compustate, size):\n  403                      return vm_exception('OOG COPY DATA')\n  404:                 for i in range(size):\n  405                      if dstart + i < codelen:\n  406                          mem[mstart + i] = safe_ord(code[dstart + i])\n  ...\n  421                  stk.append(ext.tx_gasprice)\n  422              elif op == 'EXTCODESIZE':\n  423:                 if ext.post_anti_dos_hardfork():\n  424                      if not eat_gas(compustate, opcodes.EXTCODELOAD_SUPPLEMENTAL_GAS):\n  425                          return vm_exception(\"OUT OF GAS\")\n  ...\n  427                  stk.append(len(ext.get_code(addr) or b''))\n  428              elif op == 'EXTCODECOPY':\n  429:                 if ext.post_anti_dos_hardfork():\n  430                      if not eat_gas(compustate, opcodes.EXTCODELOAD_SUPPLEMENTAL_GAS):\n  431                          return vm_exception(\"OUT OF GAS\")\n  ...\n  438                  if not data_copy(compustate, size):\n  439                      return vm_exception('OOG COPY DATA')\n  440:                 for i in range(size):\n  441                      if s2 + i < len(extcode):\n  442                          mem[start + i] = safe_ord(extcode[s2 + i])\n  ...\n  446          elif opcode < 0x50:\n  447              if op == 'BLOCKHASH':\n  448:                 if ext.post_metropolis_hardfork() and False:\n  449                      bh_addr = ext.blockhash_store\n  450                      stk.append(ext.get_storage_data(bh_addr, stk.pop()))\n  ...\n  481                  mem[s0] = s1 % 256\n  482              elif op == 'SLOAD':\n  483:                 if ext.post_anti_dos_hardfork():\n  484                      if not eat_gas(compustate, opcodes.SLOAD_SUPPLEMENTAL_GAS):\n  485                          return vm_exception(\"OUT OF GAS\")\n  ...\n  518          # DUPn (eg. DUP1: a b c -> a b c c, DUP3: a b c -> a b c a)\n  519          elif op[:3] == 'DUP':\n  520:             stk.append(stk[0x7f - opcode]) # 0x7f - opcode is a negative number, -1 for 0x80 ... -16 for 0x8f\n  521          # SWAPn (eg. SWAP1: a b c d -> a b d c, SWAP3: a b c d -> d b c a)\n  522          elif op[:4] == 'SWAP':\n  523:             temp = stk[0x8e - opcode] # 0x8e - opcode is a negative number, -2 for 0x90 ... -17 for 0x9f\n  524              stk[0x8e - opcode] = stk[-1]\n  525              stk[-1] = temp\n  ...\n  532              b. Logs are kept track of during tx execution exactly the same way as suicides\n  533                 (except as an ordered list, not a set).\n  534:                Each log is in the form [address, [topic1, ... ], data] where:\n  535                 * address is what the ADDRESS opcode would output\n  536                 * data is mem[MEMSTART: MEMSTART + MEMSZ]\n  ...\n  540              depth = int(op[3:])\n  541              mstart, msz = stk.pop(), stk.pop()\n  542:             topics = [stk.pop() for x in range(depth)]\n  543              compustate.gas -= msz * opcodes.GLOGBYTE\n  544              if msg.static:\n  ...\n  560                  cd = CallData(mem, mstart, msz)\n  561                  ingas = compustate.gas\n  562:                 if ext.post_anti_dos_hardfork():\n  563                      ingas = all_but_1n(ingas, opcodes.CALL_CHILD_LIMIT_DENOM)\n  564                  create_msg = Message(msg.to, b'', value, ingas, cd, msg.depth + 1)\n  ...\n  592              extra_gas = 0\n  593              # Creating a new account\n  594:             if op == 'CALL' and not ext.account_exists(to) and (value > 0 or not ext.post_spurious_dragon_hardfork()):\n  595                  extra_gas += opcodes.GCALLNEWACCOUNT\n  596              # Value transfer\n  ...\n  598                  extra_gas += opcodes.GCALLVALUETRANSFER\n  599              # Cost increased from 40 to 700 in Tangerine Whistle\n  600:             if ext.post_anti_dos_hardfork():\n  601                  extra_gas += opcodes.CALL_SUPPLEMENTAL_GAS\n  602              # Compute child gas limit\n  603:             if ext.post_anti_dos_hardfork():\n  604                  if compustate.gas < extra_gas:\n  605                      return vm_exception('OUT OF GAS', needed=extra_gas)\n  ...\n  622                      call_msg = Message(msg.to, to, value, submsg_gas, cd,\n  623                                         msg.depth + 1, code_address=to, static=msg.static)\n  624:                 elif ext.post_homestead_hardfork() and op == 'DELEGATECALL':\n  625                      call_msg = Message(msg.sender, msg.to, msg.value, submsg_gas, cd,\n  626                                         msg.depth + 1, code_address=to, transfers_value=False, static=msg.static)\n  627:                 elif ext.post_metropolis_hardfork() and op == 'STATICCALL':\n  628                      call_msg = Message(msg.to, to, value, submsg_gas, cd,\n  629                                         msg.depth + 1, code_address=to, static=True)\n  ...\n  642                      stk.append(1)\n  643                  # Set output memory\n  644:                 for i in range(min(len(data), memoutsz)):\n  645                      mem[memoutstart + i] = data[i]\n  646                  compustate.gas += gas\n  ...\n  654          # Revert opcode (Metropolis)\n  655          elif op == 'REVERT':\n  656:             if not ext.post_metropolis_hardfork():\n  657                  return vm_exception('Opcode not yet enabled')\n  658              s0, s1 = stk.pop(), stk.pop()\n  ...\n  667              to = ((b'\\x00' * (32 - len(to))) + to)[12:]\n  668              xfer = ext.get_balance(msg.to)\n  669:             if ext.post_anti_dos_hardfork():\n  670                  extra_gas = opcodes.SUICIDE_SUPPLEMENTAL_GAS + \\\n  671:                     (not ext.account_exists(to)) * (xfer > 0 or not ext.post_spurious_dragon_hardfork()) * opcodes.GCALLNEWACCOUNT\n  672                  if not eat_gas(compustate, extra_gas):\n  673                      return vm_exception(\"OUT OF GAS\")\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\experimental\\fastvm.py:\n   33  TT255 = 2 ** 255\n   34  \n   35: for op in opcodes.opcodes:\n   36      globals()[\"op_\"+opcodes.opcodes[op][0]] = op\n   37  \n   ..\n   50          d = self.data[self.offset: self.offset + self.size]\n   51          d += [0] * (self.size - len(d))\n   52:         return b''.join([ascii_chr(x) for x in d])\n   53  \n   54      def extract32(self, i):\n   ..\n   59  \n   60      def extract_copy(self, mem, memstart, datastart, size):\n   61:         for i in range(min(size, self.size - datastart)):\n   62              mem[memstart + i] = self.data[self.offset + datastart + i]\n   63:         for i in range(max(0, min(size, self.size - datastart)), size):\n   64              mem[memstart + i] = 0\n   65  \n   ..\n   90          self.pc = 0\n   91          self.gas = 0\n   92:         for kw in kwargs:\n   93              setattr(self, kw, kwargs[kw])\n   94  \n   ..\n  121          opcode, pushval = code[i], 0\n  122          if op[:4] == 'PUSH':\n  123:             for j in range(int(op[4:])):\n  124                  i += 1\n  125                  byte = code[i] if i < len(code) else 0\n  ...\n  206      op = None\n  207      steps = 0\n  208:     _prevop = None  # for trace only\n  209  \n  210      while 1:\n  ...\n  231        compustate.gas -= gas\n  232  \n  233:       for op in ops:\n  234  \n  235          if trace_vm:\n  ...\n  247                  if len(compustate.memory) < 1024:\n  248                      trace_data['memory'] = \\\n  249:                         b''.join([encode_hex(ascii_chr(x)) for x\n  250                                    in compustate.memory])\n  251                  else:\n  252                      trace_data['sha3memory'] = \\\n  253:                         encode_hex(utils.sha3(''.join([ascii_chr(x) for\n  254                                                x in compustate.memory])))\n  255              if _prevop in (op_SSTORE, op_SLOAD) or steps == 0:\n  ...\n  305              elif op == op_EXP:\n  306                  base, exponent = stk.pop(), stk.pop()\n  307:                 # fee for exponent is dependent on its bytes\n  308                  # calc n bytes to represent exponent\n  309                  nbytes = len(utils.encode_int(exponent))\n  ...\n  393                  if not data_copy(compustate, size):\n  394                      return vm_exception('OOG COPY DATA')\n  395:                 for i in range(size):\n  396                      if s1 + i < len(code):\n  397                          mem[start + i] = utils.safe_ord(code[s1 + i])\n  ...\n  412                  if not data_copy(compustate, size):\n  413                      return vm_exception('OOG COPY DATA')\n  414:                 for i in range(size):\n  415                      if s2 + i < len(extcode):\n  416                          mem[start + i] = utils.safe_ord(extcode[s2 + i])\n  ...\n  438                      return vm_exception('OOG EXTENDING MEMORY')\n  439                  data = 0\n  440:                 for c in mem[s0: s0 + 32]:\n  441                      data = (data << 8) + c\n  442                  stk.append(data)\n  ...\n  446                      return vm_exception('OOG EXTENDING MEMORY')\n  447                  v = s1\n  448:                 for i in range(31, -1, -1):\n  449                      mem[s0 + i] = v % 256\n  450                      v //= 256\n  ...\n  508              b. Logs are kept track of during tx execution exactly the same way as suicides\n  509                 (except as an ordered list, not a set).\n  510:                Each log is in the form [address, [topic1, ... ], data] where:\n  511                 * address is what the ADDRESS opcode would output\n  512                 * data is mem[MEMSTART: MEMSTART + MEMSZ]\n  ...\n  516              depth = op - op_LOG0\n  517              mstart, msz = stk.pop(), stk.pop()\n  518:             topics = [stk.pop() for x in range(depth)]\n  519              compustate.gas -= msz * opcodes.GLOGBYTE\n  520              if not mem_extend(mem, compustate, op, mstart, msz):\n  ...\n  565                      stk.append(1)\n  566                      compustate.gas += gas\n  567:                     for i in range(min(len(data), memoutsz)):\n  568                          mem[memoutstart + i] = data[i]\n  569              else:\n  ...\n  593                      stk.append(1)\n  594                      compustate.gas += gas\n  595:                     for i in range(min(len(data), memoutsz)):\n  596                          mem[memoutstart + i] = data[i]\n  597              else:\n  ...\n  614  \n  615          # this is slow!\n  616:         # for a in stk:\n  617          #     assert is_numeric(a), (op, stk)\n  618          #     assert a >= 0 and a < 2**256, (a, op, stk)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\experimental\\pruning_trie.py:\n   16  \n   17  hti = {}\n   18: for i, c in enumerate(b'0123456789abcdef'):\n   19      hti[c] = i\n   20  \n   ..\n   32      [6, 8, 6, 5, 6, 12, 6, 12, 6, 15]\n   33      \"\"\"\n   34:     return [hti[c] for c in encode_hex(s)]\n   35  \n   36  \n   37  def nibbles_to_bin(nibbles):\n   38:     if any(x > 15 or x < 0 for x in nibbles):\n   39          raise Exception(\"nibbles can only be [0,..15]\")\n   40  \n   ..\n   43  \n   44      res = b''\n   45:     for i in range(0, len(nibbles), 2):\n   46          res += ascii_chr(16 * nibbles[i] + nibbles[i + 1])\n   47      return res\n   ..\n   70          self.exempt.append(set())\n   71          if mode == VERIFYING:\n   72:             self.nodes.append(set([rlp_encode(x) for x in nodes]))\n   73          else:\n   74              self.nodes.append(set())\n   ..\n  146          nibbles = [flags, 0] + nibbles\n  147      o = b''\n  148:     for i in range(0, len(nibbles), 2):\n  149          o += ascii_chr(16 * nibbles[i] + nibbles[i + 1])\n  150      return o\n  ...\n  204  \n  205          :param db key value database\n  206:         :root: blank or trie node in form of [key, value] or [v0,v1..v15,v]\n  207          \"\"\"\n  208          self.db = db  # Pass in a database object directly\n  ...\n  212          self.set_root_hash(root_hash)\n  213          self.death_row_timeout = 5000\n  214:         self.nodes_for_death_row = []\n  215          self.journal = []\n  216  \n  ...\n  219  \n  220      #     :param dbfile: key value database\n  221:     #     :root: blank or trie node in form of [key, value] or [v0,v1..v15,v]\n  222      #     \"\"\"\n  223      #     if isinstance(dbfile, str):\n  ...\n  304          # o = 1 if len(rlp_encode(node)) >= 32 else 0\n  305          # if node_type == NODE_TYPE_BRANCH:\n  306:         #     for item in node[:16]:\n  307          #         o += self.total_node_count(self._decode_to_node(item))\n  308          # elif is_key_value_type(node_type):\n  ...\n  321          node_type = self._get_node_type(node)\n  322          if node_type == NODE_TYPE_BRANCH:\n  323:             for item in node[:16]:\n  324                  self._delete_child_storage(self._decode_to_node(item))\n  325          elif is_key_value_type(node_type):\n  ...\n  352          \"\"\" get node type and content\n  353  \n  354:         :param node: node in form of list, or BLANK_NODE\n  355          :return: node type\n  356          \"\"\"\n  ...\n  369          \"\"\" get value inside a node\n  370  \n  371:         :param node: node in form of list, or BLANK_NODE\n  372          :param key: nibble list without terminator\n  373          :return:\n  ...\n  403          \"\"\" update item inside a node\n  404  \n  405:         :param node: node in form of list, or BLANK_NODE\n  406          :param key: nibble list without terminator\n  407              .. note:: key may be []\n  ...\n  452          # find longest common prefix\n  453          prefix_length = 0\n  454:         for i in range(min(len(curr_key), len(key))):\n  455              if key[i] != curr_key[i]:\n  456                  break\n  ...\n  510          if prefix_length:\n  511              # sys.stderr.write('444441: %d\\n' % prefix_length)\n  512:             # create node for key prefix\n  513              o = [pack_nibbles(curr_key[:prefix_length]),\n  514                   self._encode_node(new_node)]\n  ...\n  533              if reverse:\n  534                  scan_range.reverse()\n  535:             for i in scan_range:\n  536                  o = self._getany(self._decode_to_node(node[i]), path=path + [i])\n  537                  if o:\n  ...\n  563              else:\n  564                  scan_range = list(range(key[0] + 1 if len(key) else 0, 16))\n  565:             for i in scan_range:\n  566                  sub_node = self._decode_to_node(node[i])\n  567                  o = self._getany(sub_node, reverse, path + [i])\n  ...\n  605      def _delete_node_storage(self, node, is_root=False):\n  606          \"\"\"delete storage\n  607:         :param node: node in form of list, or BLANK_NODE\n  608          \"\"\"\n  609          if node == BLANK_NODE:\n  ...\n  616          ===== FIXME ====\n  617          in the current trie implementation two nodes can share identical subtrees\n  618:         thus we can not safely delete nodes for now\n  619          \"\"\"\n  620          hashkey = utils.sha3(encoded)\n  ...\n  624          \"\"\" update item inside a node\n  625  \n  626:         :param node: node in form of list, or BLANK_NODE\n  627          :param key: nibble list without terminator\n  628              .. note:: key may be []\n  ...\n  648          \"\"\"node should have only one item changed\n  649          \"\"\"\n  650:         not_blank_items_count = sum(1 for x in range(17) if node[x])\n  651          assert not_blank_items_count >= 1\n  652  \n  ...\n  656  \n  657          # now only one item is not blank\n  658:         not_blank_index = [i for i, item in enumerate(node) if item][0]\n  659  \n  660          # the value item is not blank\n  ...\n  735                  return node\n  736  \n  737:         # for inner key value type\n  738          new_sub_node = self._delete_and_delete_storage(\n  739              self._decode_to_node(node[1]), key[len(curr_key):])\n  ...\n  805  \n  806          elif node_type == NODE_TYPE_BRANCH:\n  807:             for i in range(16):\n  808                  self.clear_all(self._decode_to_node(node[i]))\n  809  \n  ...\n  811          \"\"\"Get counts of (key, value) stored in this and the descendant nodes\n  812  \n  813:         :param node: node in form of list, or BLANK_NODE\n  814          \"\"\"\n  815          if node == BLANK_NODE:\n  ...\n  826          elif node_type == NODE_TYPE_BRANCH:\n  827              sizes = [self._get_size(self._decode_to_node(node[x]))\n  828:                      for x in range(16)]\n  829              sizes = sizes + [1 if node[-1] else 0]\n  830              return sum(sizes)\n  ...\n  834          to dict items.\n  835  \n  836:         :param node: node in form of list, or BLANK_NODE\n  837  \n  838          .. note::\n  839  \n  840:             Here key is in full form, rather than key of the individual node\n  841          \"\"\"\n  842          if node == BLANK_NODE:\n  ...\n  847          if is_key_value_type(node_type):\n  848              nibbles = without_terminator(unpack_to_nibbles(node[0]))\n  849:             key = b'+'.join([to_string(x) for x in nibbles])\n  850              if node_type == NODE_TYPE_EXTENSION:\n  851                  sub_dict = self._to_dict(self._decode_to_node(node[1]))\n  ...\n  855              # prepend key of this node to the keys of children\n  856              res = {}\n  857:             for sub_key, sub_value in sub_dict.items():\n  858                  full_key = (key + b'+' + sub_key).strip(b'+')\n  859                  res[full_key] = sub_value\n  ...\n  862          elif node_type == NODE_TYPE_BRANCH:\n  863              res = {}\n  864:             for i in range(16):\n  865                  sub_dict = self._to_dict(self._decode_to_node(node[i]))\n  866  \n  867:                 for sub_key, sub_value in sub_dict.items():\n  868                      full_key = (str_to_bytes(str(i)) + b'+' + sub_key).strip(b'+')\n  869                      res[full_key] = sub_value\n  ...\n  876          d = self._to_dict(self.root_node)\n  877          res = {}\n  878:         for key_str, value in d.items():\n  879              if key_str:\n  880:                 nibbles = [int(x) for x in key_str.split(b'+')]\n  881              else:\n  882                  nibbles = []\n  ...\n  886  \n  887      def iter_branch(self):\n  888:         for key_str, value in self._iter_branch(self.root_node):\n  889              if key_str:\n  890:                 nibbles = [int(x) for x in key_str.split(b'+')]\n  891              else:\n  892                  nibbles = []\n  ...\n  896      def _iter_branch(self, node):\n  897          \"\"\"yield (key, value) stored in this and the descendant nodes\n  898:         :param node: node in form of list, or BLANK_NODE\n  899  \n  900          .. note::\n  901:             Here key is in full form, rather than key of the individual node\n  902          \"\"\"\n  903          if node == BLANK_NODE:\n  ...\n  908          if is_key_value_type(node_type):\n  909              nibbles = without_terminator(unpack_to_nibbles(node[0]))\n  910:             key = b'+'.join([to_string(x) for x in nibbles])\n  911              if node_type == NODE_TYPE_EXTENSION:\n  912                  sub_tree = self._iter_branch(self._decode_to_node(node[1]))\n  ...\n  915  \n  916              # prepend key of this node to the keys of children\n  917:             for sub_key, sub_value in sub_tree:\n  918                  full_key = (key + b'+' + sub_key).strip(b'+')\n  919                  yield (full_key, sub_value)\n  920  \n  921          elif node_type == NODE_TYPE_BRANCH:\n  922:             for i in range(16):\n  923                  sub_tree = self._iter_branch(self._decode_to_node(node[i]))\n  924:                 for sub_key, sub_value in sub_tree:\n  925                      full_key = (str_to_bytes(str(i)) + b'+' + sub_key).strip(b'+')\n  926                      yield (full_key, sub_value)\n  ...\n  989      t = Trie(db.EphemDB())\n  990  \n  991:     for i, node in enumerate(proof):\n  992          R = rlp_encode(node)\n  993          H = utils.sha3(R)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\experimental\\refcount_db.py:\n   81          death_row_nodes = rlp.decode(death_row_node)\n   82          pruned = 0\n   83:         for nodekey in death_row_nodes:\n   84              try:\n   85                  refcount, val = rlp.decode(self.db.get(b'r:'+nodekey))\n   ..\n  109          except:\n  110              death_row_nodes = []\n  111:         for nodekey in self.death_row:\n  112              refcount, val = rlp.decode(self.db.get(b'r:'+nodekey))\n  113              if refcount == ZERO_ENCODED:\n  ...\n  115                  self.db.put(b'r:'+nodekey, rlp.encode([new_refcount, val]))\n  116          if len(self.death_row) > 0:\n  117:             sys.stderr.write('%d nodes marked for pruning during block %d\\n' %\n  118                               (len(self.death_row), timeout_epoch))\n  119          death_row_nodes.extend(self.death_row)\n  ...\n  141          try:\n  142              journal = rlp.decode(self.db.get('journal:'+str(epoch)))\n  143:             for new_refcount, hashkey in journal[::-1]:\n  144                  node_object = rlp.decode(self.db.get(b'r:'+hashkey))\n  145                  self.db.put(b'r:'+hashkey,\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\experimental\\spv.py:\n   68      if b.state_root == post_med:\n   69          if b.gas_used == utils.decode_int(post_gas):\n   70:             if [x.serialize() for x in b.logs] == logs:\n   71                  if b.mk_log_bloom() == bloom:\n   72                      return o\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\full_casper\\casper_utils.py:\n   99      def __init__(self, seed, rounds=10**4+1):\n  100          self.medstate = []\n  101:         for i in range(rounds):\n  102              if not i % RANDAO_SAVE_INTERVAL:\n  103                  self.medstate.append(seed)\n  ...\n  106      def get(self, index):\n  107          med = self.medstate[index // RANDAO_SAVE_INTERVAL]\n  108:         for i in range(index % RANDAO_SAVE_INTERVAL):\n  109              med = utils.sha3(med)\n  110          return med\n  ...\n  112      def get_parent(self, val):\n  113          origval = val\n  114:         for i in range(RANDAO_SAVE_INTERVAL):\n  115              if val in self.medstate:\n  116                  o = self.get(self.medstate.index(val) * RANDAO_SAVE_INTERVAL - i - 1)\n  ...\n  120          raise Exception(\"Randao parent not found\")\n  121  \n  122: # Create the validation code for a given address\n  123  def generate_validation_code(addr):\n  124      import serpent\n  ...\n  137  def call_casper(state, fun, args=[], gas=1000000, value=0):\n  138      ct = get_casper_ct()\n  139:     abidata = vm.CallData([utils.safe_ord(x) for x in ct.encode(fun, args)])\n  140      msg = vm.Message(casper_config['METROPOLIS_ENTRY_POINT'], casper_config['CASPER_ADDR'],\n  141                       value, gas, abidata)\n  ...\n  175          utils.zpad(utils.encode_int(skips), 32) + \\\n  176          vchash\n  177:     for val in utils.ecsign(block.header.signing_hash, key):\n  178          block.header.extra_data += utils.zpad(utils.encode_int(val), 32)\n  179      return block\n  ...\n  205      config = state.config\n  206  \n  207:     # preparation for casper\n  208:     # TODO: maybe serveral blocks before serenity hf?\n  209:     if state.is_SERENITY(at_fork_height=True):\n  210          state.set_code(config['CASPER_ADDR'], get_casper_code())\n  211          state.set_code(config['RLP_DECODER_ADDR'], get_rlp_decoder_code())\n  ...\n  233  \n  234      # Add validators\n  235:     for i, (vcode, deposit_size, randao_commitment, address) in enumerate(validators):\n  236          validator_inject(state, vcode, deposit_size, randao_commitment, address, i, ct)\n  237  \n  ...\n  240  \n  241      assert call_casper(state, 'getEpoch', []) == 0\n  242:     assert call_casper(state, 'getTotalDeposits', []) == sum([d for a,d,r,a in validators])\n  243      state.set_storage_data(utils.normalize_address(state.config['METROPOLIS_BLOCKHASH_STORE']),\n  244                             state.block_number % state.config['METROPOLIS_WRAPAROUND'],\n  ...\n  263      else:\n  264          descendants = chain.get_descendants(chain.get_block(chain.db.get('GENESIS_HASH')))\n  265:     potential_uncles = [x for x in descendants if x not in chain and isinstance(x, Block)]\n  266:     uncles = [x.header for x in potential_uncles if not call_casper(chain.state, 'isDunkleIncluded', [x.header.hash])]\n  267      dunkle_txs = []\n  268      ct = get_casper_ct()\n  269      start_nonce = state.get_nonce(state.config['METROPOLIS_ENTRY_POINT'])\n  270:     for i, u in enumerate(uncles[:4]):\n  271          txdata = ct.encode('includeDunkle', [rlp.encode(u)])\n  272          dunkle_txs.append(Transaction(start_nonce + i, 0, 650000, chain.config['CASPER_ADDR'], 0, txdata))\n  ...\n  292      blk.uncles = []\n  293      initialize(state, blk)\n  294:     for tx in get_dunkle_candidates(chain, state):\n  295          assert apply_transaction(state, tx)\n  296          blk.transactions.append(tx)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\hybrid_casper\\consensus.py:\n    6      state.gas_limit = block.header.gas_limit\n    7      state.block_number = block.header.number\n    8:     state.recent_uncles[state.block_number] = [x.hash for x in block.uncles]\n    9      state.block_coinbase = block.header.coinbase\n   10      state.block_difficulty = block.header.difficulty\n   ..\n   22          update_block_env_variables(state, block)\n   23  \n   24:     if state.is_DAO(at_fork_height=True):\n   25:         for acct in state.config['CHILD_DAO_LIST']:\n   26              state.transfer_value(acct, state.config['DAO_WITHDRAWER'], state.get_balance(acct))\n   27  \n   28:     if state.is_METROPOLIS(at_fork_height=True):\n   29          state.set_code(utils.normalize_address(\n   30              config[\"METROPOLIS_STATEROOT_STORE\"]), config[\"METROPOLIS_GETTER_CODE\"])\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\pow\\chain.py:\n  119          b = block\n  120          header_depth = state.config['PREV_HEADER_DEPTH']\n  121:         for i in range(header_depth + 1):\n  122              state.prev_headers.append(b.header)\n  123              if i < 6:\n  124                  state.recent_uncles[state.block_number - i] = []\n  125:                 for u in b.uncles:\n  126                      state.recent_uncles[state.block_number - i].append(u.hash)\n  127              try:\n  ...\n  132              if state.db.get(b.header.prevhash) == 'GENESIS':\n  133                  jsondata = json.loads(state.db.get('GENESIS_STATE'))\n  134:                 for h in jsondata[\"prev_headers\"][:header_depth - i]:\n  135                      state.prev_headers.append(dict_to_prev_header(h))\n  136:                 for blknum, uncles in jsondata[\"recent_uncles\"].items():\n  137                      if int(blknum) >= state.block_number - int(state.config['MAX_UNCLE_DEPTH']):\n  138:                         state.recent_uncles[blknum] = [parse_as_bin(u) for u in uncles]\n  139              else:\n  140                  raise Exception(\"Dangling prevhash\")\n  ...\n  170              existing = b''\n  171          existing_hashes = []\n  172:         for i in range(0, len(existing), 32):\n  173              existing_hashes.append(existing[i: i+32])\n  174          if child.header.hash not in existing_hashes:\n  ...\n  191          try:\n  192              data = self.db.get(b'child:' + blockhash)\n  193:             for i in range(0, len(data), 32):\n  194                  o.append(data[i:i + 32])\n  195              return o\n  ...\n  203          if isinstance(block, BlockHeader):\n  204              block = block.hash\n  205:         return [self.get_block(h) for h in self.get_child_hashes(block)]\n  206  \n  207      # Get the score (AKA total difficulty in PoW) of a given block\n  ...\n  217              block = self.get_parent(block)\n  218          score = int(self.db.get(key))\n  219:         for h,d in fills:\n  220              key = b'score:' + h\n  221              score = score + d + random.randrange(d // 10**6 + 1)\n  ...\n  246                  i += 1\n  247              self.time_queue.insert(i, block)\n  248:             log.info('Block received too early (%d vs %d). Delaying for %d seconds' %\n  249                       (now, block.header.timestamp, block.header.timestamp - now))\n  250              return False\n  ...\n  263              block_score = self.get_score(block)  # side effect: put 'score:' cache in db\n  264              self.head_hash = block.header.hash\n  265:             for i, tx in enumerate(block.transactions):\n  266                  self.db.put(b'txindex:' + tx.hash, rlp.encode([block.number, i]))\n  267              assert self.get_blockhash_by_number(block.header.number) == block.header.hash\n  ...\n  303                  # new chains\n  304                  changed_accts = {}\n  305:                 # Read: for i in range(common ancestor block number...new block number)\n  306:                 for i in itertools.count(replace_from):\n  307                      log.info('Rewriting height %d' % i)\n  308                      key = b'block:%d' % i\n  309:                     # Delete data for old blocks\n  310                      orig_at_height = self.db.get(key) if key in self.db else None\n  311                      if orig_at_height:\n  ...\n  315                          self.db.delete(key)\n  316                          # Delete from txindex\n  317:                         for tx in orig_block_at_height.transactions:\n  318                              if b'txindex:' + tx.hash in self.db:\n  319                                  self.db.delete(b'txindex:' + tx.hash)\n  320                          # Add to changed list\n  321                          acct_list = self.db.get(b'changed:'+orig_block_at_height.hash)\n  322:                         for j in range(0, len(acct_list), 20):\n  323                              changed_accts[acct_list[j: j+20]] = True\n  324:                     # Add data for new blocks\n  325                      if i in new_chain:\n  326                          new_block_at_height = new_chain[i]\n  ...\n  329                          self.db.put(key, new_block_at_height.header.hash)\n  330                          # Add to txindex\n  331:                         for j, tx in enumerate(new_block_at_height.transactions):\n  332                              self.db.put(b'txindex:' + tx.hash,\n  333                                          rlp.encode([new_block_at_height.number, j]))\n  ...\n  335                          if i < b.number:\n  336                              acct_list = self.db.get(b'changed:'+new_block_at_height.hash)\n  337:                             for j in range(0, len(acct_list), 20):\n  338                                  changed_accts[acct_list[j: j+20]] = True\n  339                      if i not in new_chain and not orig_at_height:\n  340                          break\n  341                  # Add changed list from new head to changed list\n  342:                 for c in changed.keys():\n  343                      changed_accts[c] = True\n  344                  # Update the on-disk state cache\n  345:                 for addr in changed_accts.keys():\n  346                      data = temp_state.trie.get(addr)\n  347                      if data:\n  ...\n  360                  self.parent_queue[block.header.prevhash] = []\n  361              self.parent_queue[block.header.prevhash].append(block)\n  362:             log.info('Got block %d (%s) with prevhash %s, parent not found. Delaying for now' %\n  363                       (block.number, encode_hex(block.hash), encode_hex(block.prevhash)))\n  364              return False\n  ...\n  369          log.debug('Saved %d address change logs' % len(changed.keys()))\n  370          self.db.put(b'deletes:'+block.hash, b''.join(deletes))\n  371:         log.debug('Saved %d trie node deletes for block %d (%s)' % (len(deletes), block.number, utils.encode_hex(block.hash)))\n  372          # Delete old junk data\n  373          old_block_hash = self.get_blockhash_by_number(block.number - self.max_history)\n  ...\n  377                  log.debug('Deleting up to %d trie nodes' % (len(deletes) // 32))\n  378                  rdb = RefcountDB(self.db)\n  379:                 for i in range(0, len(deletes), 32):\n  380                      rdb.delete(deletes[i: i+32])\n  381                  self.db.delete(b'deletes:'+old_block_hash)\n  ...\n  392          if self.new_head_cb and block.header.number != 0:\n  393              self.new_head_cb(block)\n  394:         # Are there blocks that we received that were waiting for this block?\n  395          # If so, process them.\n  396          if block.header.hash in self.parent_queue:\n  397:             for _blk in self.parent_queue[block.header.hash]:\n  398                  self.add_block(_blk)\n  399              del self.parent_queue[block.header.hash]\n  ...\n  423              frm = int(self.db.get('GENESIS_NUMBER')) + 1\n  424          chain = []\n  425:         for i in itertools.islice(itertools.count(), frm, to):\n  426              h = self.get_blockhash_by_number(i)\n  427              if not h:\n  ...\n  467          header = block.header\n  468          hashes = []\n  469:         for i in xrange(max):\n  470              hash = header.prevhash\n  471              block = self.get_block(hash)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\pow\\consensus.py:\n   17          update_block_env_variables(state, block)\n   18  \n   19:     if state.is_DAO(at_fork_height=True):\n   20:         for acct in state.config['CHILD_DAO_LIST']:\n   21              state.transfer_value(acct, state.config['DAO_WITHDRAWER'], state.get_balance(acct))\n   22  \n   23:     # if state.is_METROPOLIS(at_fork_height=True):\n   24      #     state.set_code(utils.normalize_address(\n   25      #         config[\"METROPOLIS_STATEROOT_STORE\"]), config[\"METROPOLIS_GETTER_CODE\"])\n   ..\n   37      uncles = []\n   38      ineligible = {}\n   39:     for h, _uncles in state.recent_uncles.items():\n   40:         for u in _uncles:\n   41              ineligible[u] = True\n   42:     for i in range(0, min(state.config['MAX_UNCLE_DEPTH'], len((state.prev_headers)))):\n   43          ineligible[state.prev_headers[i].hash] = True\n   44:     for i in range(1, min(state.config['MAX_UNCLE_DEPTH'], len(state.prev_headers))):\n   45          child_hashes = chain.get_child_hashes(state.prev_headers[i].hash)\n   46:         for c in child_hashes:\n   47              if c not in ineligible and len(uncles) < 2:\n   48                  uncles.append(chain.get_block(c).header)\n   ..\n   57      if utils.sha3(rlp.encode(block.uncles)) != block.header.uncles_hash:\n   58          raise VerificationFailed(\"Uncle hash mismatch\")\n   59:     # Enforce maximum number of uncles\n   60      if len(block.uncles) > state.config['MAX_UNCLES']:\n   61          raise VerificationFailed(\"Too many uncles\")\n   62      # Uncle must have lower block number than blockj\n   63:     for uncle in block.uncles:\n   64          if uncle.number >= block.header.number:\n   65              raise VerificationFailed(\"Uncle number too high\")\n   ..\n   67      # Check uncle validity\n   68      MAX_UNCLE_DEPTH = state.config['MAX_UNCLE_DEPTH']\n   69:     ancestor_chain = [block.header] + [a for a in state.prev_headers[:MAX_UNCLE_DEPTH + 1] if a]\n   70      # Uncles of this block cannot be direct ancestors and cannot also\n   71      # be uncles included 1-6 blocks ago\n   72:     ineligible = [b.hash for b in ancestor_chain]\n   73:     for blknum, uncles in state.recent_uncles.items():\n   74          if state.block_number > int(blknum) >= state.block_number - MAX_UNCLE_DEPTH:\n   75:             ineligible.extend([u for u in uncles])\n   76:     eligible_ancestor_hashes = [x.hash for x in ancestor_chain[2:]]\n   77:     for uncle in block.uncles:\n   78          if uncle.prevhash not in eligible_ancestor_hashes:\n   79              raise VerificationFailed(\"Uncle does not have a valid ancestor\")\n   80:         parent = [x for x in ancestor_chain if x.hash == uncle.prevhash][0]\n   81          if uncle.difficulty != calc_difficulty(parent, uncle.timestamp, config=state.config):\n   82              raise VerificationFailed(\"Difficulty mismatch\")\n   ..\n  103      udpf = state.config['UNCLE_DEPTH_PENALTY_FACTOR']\n  104  \n  105:     for uncle in block.uncles:\n  106          r = int(br * (udpf + uncle.number - state.block_number) // udpf)\n  107          state.delta_balance(uncle.coinbase, r)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\pow\\ethash.py:\n   26      # Sequentially produce the initial dataset\n   27      o = [sha3_512(seed)]\n   28:     for i in range(1, n):\n   29          o.append(sha3_512(o[-1]))\n   30  \n   31:     for _ in range(CACHE_ROUNDS):\n   32:         for i in range(n):\n   33              v = o[i][0] % n\n   34              o[i] = sha3_512(list(map(xor, o[(i - 1 + n) % n], o[v])))\n   ..\n   43      mix[0] ^= i\n   44      mix = sha3_512(mix)\n   45:     for j in range(DATASET_PARENTS):\n   46          cache_index = fnv(i ^ j, mix[j % r])\n   47          mix = list(map(fnv, mix, cache[cache_index % n]))\n   ..\n   52      o = []\n   53      percent = (full_size // HASH_BYTES) // 100\n   54:     for i in range(full_size // HASH_BYTES):\n   55          if i % percent == 0:\n   56              sys.stderr.write(\"Completed %d items, %d percent\\n\" % (i, i // percent))\n   ..\n   65      s = sha3_512(header + nonce[::-1])\n   66      mix = []\n   67:     for _ in range(MIX_BYTES // HASH_BYTES):\n   68          mix.extend(s)\n   69:     for i in range(ACCESSES):\n   70          p = fnv(i ^ s[0], mix[i % w]) % (n // mixhashes) * mixhashes\n   71          newdata = []\n   72:         for j in range(mixhashes):\n   73              newdata.extend(dataset_lookup(p + j))\n   74          mix = list(map(fnv, mix, newdata))\n   75      cmix = []\n   76:     for i in range(0, len(mix), 4):\n   77          cmix.append(fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]))\n   78      return {\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\pow\\ethash_utils.py:\n   46  \n   47  def serialize_hash(h):\n   48:     return b''.join([zpad(encode_int(x), 4) for x in h])\n   49  \n   50  \n   51  def deserialize_hash(h):\n   52:     return [decode_int(h[i:i+WORD_BYTES]) for i in range(0, len(h), WORD_BYTES)]\n   53  \n   54  \n   ..\n   79  \n   80  \n   81: # Works for dataset and cache\n   82  def serialize_cache(ds):\n   83:     return b''.join([serialize_hash(h) for h in ds])\n   84  \n   85  serialize_dataset = serialize_cache\n   ..\n   88  def deserialize_cache(ds):\n   89      return [deserialize_hash(ds[i:i+HASH_BYTES])\n   90:             for i in range(0, len(ds), HASH_BYTES)]\n   91  \n   92  deserialize_dataset = deserialize_cache\n   ..\n  107  \n  108      def __iter__(self):\n  109:         for i in range(self.len):\n  110              yield self[i]\n  111  \n  112      def __repr__(self):\n  113:         return repr([x for x in self])\n  114  \n  115  \n  116  def isprime(x):\n  117:     for i in range(2, int(x**0.5)):\n  118          if not x % i:\n  119              return False\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\pow\\ethpow.py:\n   90      4) verify (or, if mining, compute a valid) state and nonce.\n   91  \n   92:     :param block: the block for which to find a valid nonce\n   93      \"\"\"\n   94  \n   ..\n  116      nonce = start_nonce\n  117      target = utils.zpad(utils.int_to_big_endian(2**256 // (difficulty or 1) - 1), 32)\n  118:     for i in range(1, rounds + 1):\n  119          bin_nonce = utils.zpad(utils.int_to_big_endian((nonce + i) & TT64M1), 8)\n  120          o = hashimoto_light(block_number, cache, mining_hash, bin_nonce)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_blocks.py:\n   29  def translate_keys(olddict, keymap, valueconv, deletes):\n   30      o = {}\n   31:     for k in list(olddict.keys()):\n   32          if k not in deletes:\n   33              o[keymap.get(k, k)] = valueconv(k, olddict[k])\n   ..\n   67      env = Env(db.EphemDB())\n   68      genesis_decl = {}\n   69:     for param in (\"bloom\", \"timestamp\", \"nonce\", \"extraData\",\n   70                    \"gasLimit\", \"coinbase\", \"difficulty\",\n   71                    \"parentHash\", \"mixHash\", \"gasUsed\"):\n   ..\n   74  \n   75      old_config = copy.deepcopy(env.config)\n   76:     for k, v in config_overrides.items():\n   77          env.config[k] = v\n   78  \n   ..\n   90  \n   91  \n   92:     for blk in params[\"blocks\"]:\n   93          if 'blockHeader' not in blk:\n   94              success = True\n   ..\n  180      fixtures = testutils.get_tests_from_file_or_dir(sys.argv[1])\n  181      if len(sys.argv) >= 3:\n  182:         for filename, tests in list(fixtures.items()):\n  183:             for testname, testdata in list(tests.items()):\n  184                  if testname == sys.argv[2]:\n  185                      print(\"Testing: %s %s\" % (filename, testname))\n  186                      run_block_test(testdata, get_config_overrides(filename, testname))\n  187      else:\n  188:         for filename, tests in list(fixtures.items()):\n  189:             for testname, testdata in list(tests.items()):\n  190                  if (filename.split('/')[-1], testname) not in skips:\n  191                      print(\"Testing: %s %s\" % (filename, testname))\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_bloom.py:\n   24      # cd fixtures; git pull origin develop; cd ..;  git commit fixtures\n   25      filenames = os.listdir(os.path.join(testutils.fixture_path, 'VMTests'))\n   26:     files = [os.path.join(testutils.fixture_path, 'VMTests', f) for f in filenames]\n   27      vm_fixtures = {}\n   28      try:\n   29:         for f, fn in zip(files, filenames):\n   30              if f[-5:] == '.json':\n   31                  vm_fixtures[fn[:-5]] = json.load(open(f, 'r'))\n   ..\n   40      return lambda: do_test_bloom(testdata)\n   41  \n   42: for filename, tests in list(vm_tests_fixtures().items()):\n   43:     for testname, testdata in list(tests.items()):\n   44          if 'logs' not in testdata or 'log' not in testname.lower():\n   45              continue\n   ..\n   60      \"\"\"\n   61      The logs sections is a mapping between the blooms and their corresponding logentries.\n   62:     Each logentry has the format:\n   63      address: The address of the logentry.\n   64      data: The data of the logentry.\n   65      topics: The topics of the logentry, given as an array of values.\n   66      \"\"\"\n   67:     for data in test_logs:\n   68          address = data['address']\n   69          # Test via bloom\n   70          b = bloom.bloom_insert(0, decode_hex(address))\n   71:         for t in data['topics']:\n   72              b = bloom.bloom_insert(b, decode_hex(t))\n   73          # Test via Log\n   74:         topics = [decode_int_from_hex(x) for x in data['topics']]\n   75          log = Log(decode_hex(address), topics, '')\n   76          log_bloom = bloom.b64(bloom.bloom_from_list(log.bloomables()))\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_chain.py:\n   52      \"\"\"\n   53      txqueue = TransactionQueue()\n   54:     for t in transactions:\n   55          txqueue.add_transaction(t)\n   56      parent_timestamp = parent.timestamp if parent else chain.state.timestamp\n   ..\n   79      assert chain.state.block_number == 0\n   80      assert chain.state.block_difficulty == 1\n   81:     for i in range(2):\n   82          blk = mine_next_block(chain)\n   83          assert blk.number == i + 1\n   ..\n  138      tx = get_transaction(gasprice=10)  # must fail, as there is no balance\n  139      a_blk2 = mine_next_block(chain, transactions=[tx])\n  140:     assert tx.hash not in [x.hash for x in a_blk2.transactions]\n  141      assert len(a_blk2.transactions) == 0\n  142  \n  ...\n  147      tx = get_transaction()\n  148      blk = mine_next_block(chain, transactions=[tx])\n  149:     assert tx.hash in [x.hash for x in blk.transactions]\n  150      assert blk.transactions[0] == tx\n  151      assert len(blk.transactions) == 1\n  ...\n  267      tx0 = get_transaction(nonce=0)\n  268      R1 = mine_next_block(chainR, transactions=[tx0])\n  269:     assert tx0.hash in [x.hash for x in R1.transactions]\n  270  \n  271      # Local: mine two blocks\n  ...\n  278      # receive serialized remote blocks, newest first\n  279      rlp_blocks = [rlp.encode(R1)]\n  280:     for rlp_block in rlp_blocks:\n  281          block = rlp.decode(rlp_block, Block)\n  282          chainL.add_block(block)\n  ...\n  295      chainR = Chain({v: {\"balance\": utils.denoms.ether * 1}}, difficulty=1)\n  296      remote_blocks = []\n  297:     for i in range(3):\n  298          tx = get_transaction(nonce=i)\n  299          blk = mine_next_block(chainR, transactions=[tx])\n  ...\n  307  \n  308      # receive serialized remote blocks, newest first\n  309:     rlp_blocks = [rlp.encode(x) for x in remote_blocks]\n  310:     for rlp_block in rlp_blocks:\n  311          block = rlp.decode(rlp_block, Block)\n  312          chainL.add_block(block)\n  ...\n  335      # next block should reward uncles\n  336      blk2 = mine_on_chain(chain, blk1, coinbase=local_coinbase)\n  337:     # print [x.hash for x in chain.get_chain()], [blk0.hash, uncle.hash, blk1.hash, blk2.hash]\n  338      assert blk1.hash in chain\n  339:     assert uncle.header.hash in [u.hash for u in blk2.uncles]\n  340      assert chain.head == blk2\n  341      assert chain.get_chain() == [blk0, blk1, blk2]\n  ...\n  347  # TODO ##########################################\n  348  #\n  349: # test for remote block with invalid transaction\n  350: # test for multiple transactions from same address received\n  351  #    in arbitrary order mined in the same block\n  352  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_contracts.py:\n  335      x2 = c.contract(hedge_code, sender=tester.k0, language='serpent')\n  336      # Have the first party register, sending 10^16 wei and\n  337:     # asking for a hedge using currency code 500\n  338      o1 = x2.main(x.address, 500, value=10 ** 16)\n  339      assert o1 == 1\n  ...\n  866      return(self.campaigns[id].contrib_total)\n  867  \n  868: # Clearing function for internal use\n  869  def clear(self, id):\n  870      if self == msg.sender:\n  ...\n  898      x.contribute(200, value=70001, sender=tester.k4)\n  899      # Expect the 100001 units to be delivered to the destination\n  900:     # account for campaign 2\n  901      assert 100001 == c.head_state.get_balance(utils.int_to_addr(48))\n  902      mida1 = c.head_state.get_balance(tester.a1)\n  ...\n 1327  #     c.mine(7)\n 1328  #     # Hashes of last 14 blocks including existing one\n 1329: #     o1 = [x % 2 ** 256 for x in x.get_prevhashes(14)]\n 1330  #     # hash of self = 0, hash of blocks back to genesis block as is, hash of\n 1331: #     # blocks before genesis block = 0\n 1332: #     t1 = [0] + [utils.big_endian_to_int(b.hash) for b in s.blocks[-2::-1]] \\\n 1333  #         + [0] * 6\n 1334  #     assert o1 == t1\n 1335  #     s.mine(256)\n 1336  #     # Test 256 limit: only 1 <= g <= 256 generation ancestors get hashes shown\n 1337: #     o2 = [x % 2 ** 256 for x in x.get_prevhashes(270)]\n 1338: #     t2 = [0] + [utils.big_endian_to_int(b.hash) for b in s.blocks[-2:-258:-1]] \\\n 1339  #         + [0] * 13\n 1340  #     assert o2 == t2\n ....\n 1392      contract = c.contract(mcopy_code_2, language='serpent')\n 1393      assert contract.mcopy_test() == \\\n 1394:         b''.join([utils.zpad(utils.int_to_big_endian(x), 32) for x in [99, 111, 119]])\n 1395  \n 1396  \n ....\n 1530  \n 1531  \n 1532: new_format_inner_test_code = \"\"\"\n 1533  def foo(a, b:arr, c:str):\n 1534      return a * 10 + b[1]\n ....\n 1537  filename4 = \"nfitc2635987162498621846198246.se\"\n 1538  \n 1539: new_format_outer_test_code = \"\"\"\n 1540  extern blah: [foo:[int256,int256[],bytes]:int256]\n 1541  \n ....\n 1546  \n 1547  \n 1548: def test_new_format():\n 1549      c = tester.Chain()\n 1550:     open(filename4, 'w').write(new_format_inner_test_code)\n 1551:     x = c.contract(new_format_outer_test_code, language='serpent')\n 1552      assert x.bar() == 175\n 1553  \n ....\n 1763  # test_double_array = None\n 1764  # test_abi_logging = None\n 1765: # test_new_format = None\n 1766  # test_abi_address_output = None\n 1767  # test_string_logging = None\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_db.py:\n    9  \n   10  def random_string(length):\n   11:     return b''.join([ascii_chr(random.randint(0, 255)) for _ in range(length)])\n   12  \n   13  \n   14  content = {random_string(lk): random_string(lv)\n   15:            for lk, lv in itertools.product([1, 32, 255], [0, 1, 32, 255])}\n   16: alt_content = {key: random_string(32) for key in content}\n   17  \n   18  \n   19  def test_ephem():\n   20      db = _EphemDB()\n   21:     for key in content:\n   22          assert key not in db\n   23          with pytest.raises(KeyError):\n   24              db.get(key)\n   25:     for key, value in content.items():\n   26          db.put(key, value)\n   27          assert key in db\n   28          assert db.get(key) == value\n   29:     for key in content:\n   30          db.put(key, alt_content[key])\n   31          assert key in db\n   32          assert db.get(key) == alt_content[key]\n   33:     for key, value in content.items():\n   34          db.delete(key)\n   35          assert key not in db\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_difficulty.py:\n   71          # load fixtures from specified file or dir\n   72          fixtures = testutils.get_tests_from_file_or_dir(sys.argv[1])\n   73:     for filename, tests in list(fixtures.items()):\n   74:         for testname, testdata in list(tests.items()):\n   75              if len(sys.argv) < 3 or testname == sys.argv[2]:\n   76                  print(\"Testing: %s %s\" % (filename, testname))\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_genesis.py:\n   25      assert genesis_fixture is not None, \"Could not read genesishashtest.json from fixtures. Make sure you did 'git submodule init'!\"\n   26      # FIXME: assert that link is uptodate\n   27:     for k in ('genesis_rlp_hex', 'genesis_state_root', 'genesis_hash'):\n   28          assert k in genesis_fixture\n   29      return genesis_fixture\n   ..\n   39      env = new_env()\n   40      genesis = blocks_genesis(env)\n   41:     for k, v in list(env.config['GENESIS_INITIAL_ALLOC'].items()):\n   42          assert genesis.get_balance(k) == v.get(\"balance\", 0) or v.get(\"wei\", 0)\n   43  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_opcodes.py:\n    2  \n    3  opcode_gas = {\n    4:     opcode: gas for (opcode, ins, outs, gas) in opcodes.opcodes.values()\n    5  }\n    6  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_state.py:\n   32              'stMemoryStressTest' in filename or # We run out of memory\n   33              'MLOAD_Bounds.json' in filename or # We run out of memory\n   34:             'failed_tx_xcf416c53' in filename or # we know how to pass: force address 3 to get deleted. TODO confer with c++ best path foward.\n   35              'RevertDepthCreateAddressCollision.json' in filename or # we know how to pass: delete contract's code. Looks like c++ issue.\n   36              'pairingTest.json' in filename or # definitely a c++ issue\n   ..\n   51          except:\n   52              fixtures = {'stdin': json.loads(sys.argv[1])}\n   53:     for filename, tests in list(fixtures.items()):\n   54:         for testname, testdata in list(tests.items()):\n   55              if len(sys.argv) < 3 or testname == sys.argv[2]:\n   56                  print(\"Testing: %s %s\" % (filename, testname))\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_tester.py:\n   18  @pytest.mark.skipif(not SOLIDITY_AVAILABLE, reason='solc compiler not available')\n   19  def test_abicontract_interface():\n   20:     \"\"\" Test for issue #370. \"\"\"\n   21      tester_state = Chain()\n   22  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_transactions.py:\n    4  from rlp.utils import decode_hex, encode_hex, str_to_bytes\n    5  from ethereum.tools import testutils\n    6: from ethereum.messages import config_fork_specific_validation, null_address\n    7  import ethereum.config as config\n    8  import sys\n    .\n   28          #if blknum >= config.default_config[\"HOMESTEAD_FORK_BLKNUM\"]:\n   29          #    tx.check_low_s_homestead()\n   30:         assert config_fork_specific_validation(konfig, blknum, tx)\n   31          assert tx.startgas >= tx.intrinsic_gas_used\n   32          if tx.sender == null_address:\n   ..\n   67          # load fixtures from specified file or dir\n   68          fixtures = testutils.get_tests_from_file_or_dir(sys.argv[1])\n   69:     for filename, tests in list(fixtures.items()):\n   70:         for testname, testdata in list(tests.items()):\n   71              if len(sys.argv) < 3 or testname == sys.argv[2]:\n   72                  print(\"Testing: %s %s\" % (filename, testname))\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_trie.py:\n   25      fixture = {}\n   26      testdir = os.path.join(fixture_path, 'TrieTests')\n   27:     for f in os.listdir(testdir):\n   28          if f != 'trietest.json':\n   29              continue\n   30          sub_fixture = json.load(open(os.path.join(testdir, f)))\n   31:         for k, v in sub_fixture.items():\n   32              fixture[f + \"_\" + k] = v\n   33      return fixture\n   ..\n   43          return x\n   44  \n   45:     pairs['in'] = [(_dec(k), _dec(v)) for k, v in pairs['in']]\n   46:     deletes = [(k, v) for k, v in pairs['in'] if v is None]\n   47  \n   48      N_PERMUTATIONS = 1000\n   49:     for i, permut in enumerate(itertools.permutations(pairs['in'])):\n   50          if i > N_PERMUTATIONS:\n   51              break\n   52          t = trie.Trie(db.EphemDB())\n   53:         for k, v in permut:\n   54              #logger.debug('updating with (%s, %s)' %(k, v))\n   55              if v is not None:\n   ..\n   58                  t.delete(to_string(k))\n   59          # make sure we have deletes at the end\n   60:         for k, v in deletes:\n   61              t.delete(to_string(k))\n   62          if pairs['root'] != '0x' + encode_hex(t.root_hash):\n   ..\n   66  \n   67  if __name__ == '__main__':\n   68:     for name, pairs in load_tests().items():\n   69          run_test(name, pairs)\n   70  else:\n   71:     for key, pairs in load_tests().items():\n   72          globals()[\"test_\" + key] = lambda: run_test(key, pairs)\n   73  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tests\\test_trie_next_prev.py:\n   33      data = load_tests()[name]\n   34  \n   35:     for k in data['in']:\n   36          logger.debug('updating with (%s, %s)' % (k, k))\n   37          k = to_string(k)\n   38          t.update(k, k)\n   39:     for point, prev, nxt in data['tests']:\n   40          assert to_string(nxt) == (t.next(point) or b'')\n   41          assert to_string(prev) == (t.prev(point) or b'')\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_logging.py:\n    8  def setup_function(function):\n    9      \"\"\" setup any state tied to the execution of the given function.\n   10:     Invoked for every test function in the module.\n   11      \"\"\"\n   12      function.snapshot = slogging.get_configuration()\n   ..\n   99      assert r == dict(event='test listener', abc='thislistener')\n  100  \n  101:     log.trace('trace is usually filtered', abc='thislistener')  # this handler for function log_cb does not work\n  102      assert \"trace is usually filtered\" not in caplog.text\n  103  \n  ...\n  112      slogging.configure()\n  113      names = {'a', 'b', 'c'}\n  114:     for n in names:\n  115          slogging.get_logger(n)\n  116      assert names.issubset(set(slogging.get_logger_names()))\n  ...\n  194  def test_howto_use_in_tests():\n  195      # select what you want to see.\n  196:     # e.g. TRACE from vm except for pre_state :DEBUG otherwise\n  197      slogging.configure(':DEBUG,eth.vm:TRACE,vm.pre_state:INFO')\n  198      log = slogging.get_logger('tests.logging')\n  ...\n  219      except:\n  220          log = slogging.get_logger('eth.vm')\n  221:         for x in recorder.pop_records():\n  222              log.info(x.pop('event'), **x)\n  223  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_pos.py:\n   28  BLOCK_MAKING_PPB = 10\n   29  \n   30: print('Initializing privkeys, addresses and randaos for validators')\n   31: privkeys = [utils.sha3(str(i)) for i in range(NUM_PARTICIPANTS)]\n   32: addrs = [utils.privtoaddr(k) for k in privkeys]\n   33: randaos = [RandaoManager(utils.sha3(str(i))) for i in range(NUM_PARTICIPANTS)]\n   34: deposit_sizes = [i * 500 + 500 for i in range(NUM_PARTICIPANTS)]\n   35: vcodes = [generate_validation_code(a) for a in addrs]\n   36: vchashes = [utils.sha3(c) for c in vcodes]\n   37  assert len(privkeys) == len(addrs) == len(randaos) == len(deposit_sizes) == len(vcodes) == len(vchashes) == NUM_PARTICIPANTS\n   38  \n   ..\n   42  print('Constructing genesis')\n   43  s = make_casper_genesis(validators=[(generate_validation_code(a), ds * 10**18, r.get(9999), a)\n   44:                                     for a, ds, r in zip(addrs, deposit_sizes, randaos)][:-1],\n   45:                         alloc={a: {'balance': 10**18} for a in addrs},\n   46                          timestamp=int(time.time() - 99999),\n   47                          epoch_length=100)\n   48  print('Genesis constructed successfully')\n   49: chains = [Chain(s.to_snapshot(), env=s.env) for i in range(NUM_PARTICIPANTS)]\n   50  withdrawal_time_1 = call_casper(chains[0].state, 'getLockDuration', [vchashes[0]])\n   51  \n   ..\n  117  # Create some blocks\n  118  bn = call_casper(chains[0].state, 'getBlockNumber')\n  119: for i in range(bn + 1, 200):\n  120      next_validator = call_casper(chains[0].state, 'getValidator', [0])\n  121      next_validator_id = vchashes.index(next_validator)\n  ...\n  124      assert chains[0].add_block(b)\n  125      vids.append(next_validator_id)\n  126: print('Created 200 blocks before any deposits/widthdraws, created by validators:', vids)\n  127  assert len(vchashes) - 1 not in vids\n  128  assert 0 in vids\n  ...\n  135  chains[0].state.commit()\n  136  print('Withdrew a validator')\n  137: print('%d blocks before ETH becomes available' % withdrawal_time_1)\n  138: for i in range(200, 400):\n  139      next_validator = call_casper(chains[0].state, 'getValidator', [0])\n  140      next_validator_id = vchashes.index(next_validator)\n  ...\n  147  assert len(vchashes) - 1 in vids\n  148  assert 0 in vids\n  149: for i in range(400, 400 + withdrawal_time_1 + 1):\n  150      next_validator = call_casper(chains[0].state, 'getValidator', [0])\n  151      next_validator_id = vchashes.index(next_validator)\n  ...\n  163  post_bal = chains[0].state.get_balance(addrs[0])\n  164  print('Wei withdrawn:', post_bal - pre_bal)\n  165: blocks_by_v0_in_stage1 = len([x for x in vids[:200] if x == 0])\n  166  expected_revenue_in_stage1 = blocks_by_v0_in_stage1 * max(sum(deposit_sizes[:-1]), 1000000) * 10**18 * BLOCK_MAKING_PPB / 10**9\n  167: blocks_by_v0_in_stage2 = len([x for x in vids[200:400] if x == 0])\n  168  expected_revenue_in_stage2 = blocks_by_v0_in_stage2 * max(sum(deposit_sizes), 1000000) * 10**18 * BLOCK_MAKING_PPB / 10**9\n  169  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_pruning_trie.py:\n   15  def check_db_tightness(trees, db):\n   16      all_nodes = []\n   17:     for t in trees:\n   18:         for nd in t.all_nodes():\n   19              if nd not in all_nodes:\n   20                  all_nodes.append(nd)\n   21      if len(db.kv) != len(all_nodes):\n   22:         for k, v in db.kv.items():\n   23              if rlp.decode(rlp.decode(v)[1]) not in all_nodes:\n   24                  print(utils.encode_hex(k[2:]), rlp.decode(rlp.decode(v)[1]))\n   ..\n   34      db.logging = True\n   35  \n   36:     for i in range(NODES):\n   37          t.update(to_string(i), to_string(i))\n   38          db.commit_refcount_changes(0)\n   39          db.cleanup(0)\n   40          check_db_tightness([t], db)\n   41:     for i in range(NODES):\n   42          t.update(to_string(i), to_string(i ** 3))\n   43          db.commit_refcount_changes(0)\n   44          db.cleanup(0)\n   45          check_db_tightness([t], db)\n   46:     for i in range(NODES):\n   47          t.delete(to_string(i))\n   48          db.commit_refcount_changes(0)\n   ..\n   58      t = pruning_trie.Trie(db)\n   59      db.ttl = NODES // 4\n   60:     for i in range(NODES):\n   61          t.update(to_string(i), to_string(i))\n   62          db.commit_refcount_changes(i)\n   63          db.cleanup(i)\n   64:     for i in range(NODES):\n   65          t.update(to_string(i), to_string(i ** 3))\n   66          db.commit_refcount_changes(i + NODES)\n   67          db.cleanup(i + NODES)\n   68:     for i in range(NODES):\n   69          t.delete(to_string(i))\n   70          db.commit_refcount_changes(i + NODES * 2)\n   71          db.cleanup(i + NODES * 2)\n   72:     for i in range(NODES // 4):\n   73          db.cleanup(i + NODES * 3)\n   74      assert len(t.to_dict()) == 0\n   ..\n   81      t = pruning_trie.Trie(db)\n   82      db.ttl = 0\n   83:     for i in range(NODES):\n   84          t.update(to_string(i), to_string(i))\n   85          db.commit_refcount_changes(i)\n   ..\n   96      t = pruning_trie.Trie(db)\n   97      db.ttl = NODES // 4\n   98:     for i in range(NODES):\n   99          t.update(to_string(i), to_string(i))\n  100          db.commit_refcount_changes(i)\n  ...\n  103      db.commit_refcount_changes(NODES)\n  104      db.cleanup(NODES)\n  105:     for i in range(NODES // 4 + 1):\n  106          db.cleanup(i + NODES)\n  107      assert len(db.kv) == 0\n  ...\n  109  \n  110  def test_insert_delete():\n  111:     for a in (5, 15, 60):\n  112          db = RefcountDB(EphemDB())\n  113          NODES = a\n  ...\n  115          db.ttl = 0\n  116          db.logging = True\n  117:         for i in range(NODES):\n  118              t1.update(to_string(i), to_string(i))\n  119              db.commit_refcount_changes(i)\n  120              db.cleanup(i)\n  121              check_db_tightness([t1], db)\n  122:         for i in range(NODES):\n  123              t1.delete(to_string(NODES - 1 - i))\n  124              db.commit_refcount_changes(NODES + i)\n  ...\n  134      t2 = pruning_trie.Trie(db)\n  135      db.ttl = 0\n  136:     for i in range(NODES):\n  137          t1.update(to_string(i), to_string(i))\n  138          if i < NODES // 2:\n  ...\n  141          db.cleanup(i)\n  142          check_db_tightness([t1, t2], db)\n  143:     for i in range(NODES):\n  144          sys.stderr.write('clearing: %d\\n' % i)\n  145          t1.delete(to_string(NODES - 1 - i))\n  ...\n  147          db.cleanup(NODES + i)\n  148          check_db_tightness([t1, t2], db)\n  149:     assert t2.to_dict() == {to_string(i): to_string(i) for i in range(NODES // 2)}\n  150:     for i in range(NODES // 2):\n  151          t2.delete(to_string(i))\n  152          db.commit_refcount_changes(NODES * 2 + i)\n  ...\n  162      t2 = pruning_trie.Trie(db)\n  163      db.ttl = NODES // 4\n  164:     for i in range(NODES):\n  165          t1.update(to_string(i), to_string(i))\n  166          if i < NODES // 2:\n  ...\n  170      t1.clear_all()\n  171      db.cleanup(NODES)\n  172:     assert t2.to_dict() == {to_string(i): to_string(i) for i in range(NODES // 2)}\n  173:     for i in range(NODES // 2):\n  174          t2.delete(to_string(i))\n  175          db.commit_refcount_changes(NODES + i)\n  176          db.cleanup(NODES + i)\n  177:     for i in range(NODES // 4):\n  178          db.cleanup(NODES + NODES // 2 + i)\n  179      assert len(db.kv) == 0\n  ...\n  186      t2 = pruning_trie.Trie(db)\n  187      db.ttl = NODES * 2\n  188:     for i in range(NODES):\n  189          t1.update(to_string(i), to_string(i))\n  190          db.commit_refcount_changes(i)\n  191          db.cleanup(i)\n  192:     for i in range(NODES):\n  193          t2.update(to_string(i), to_string(i))\n  194          db.commit_refcount_changes(NODES + i)\n  195          db.cleanup(NODES + i)\n  196:     for i in range(NODES * 2 - 1, NODES - 1, -1):\n  197          db.revert_refcount_changes(i)\n  198:     for i in range(NODES):\n  199          t1.delete(to_string(i))\n  200          db.commit_refcount_changes(NODES + i)\n  201          db.cleanup(NODES + i)\n  202:     for i in range(NODES * 2):\n  203          db.cleanup(NODES * 2 + i)\n  204      assert len(db.kv) == 0\n  ...\n  210      t1 = pruning_trie.Trie(db)\n  211      db.ttl = NODES * 2\n  212:     for i in range(NODES):\n  213          t1.update(to_string(i), to_string(i))\n  214          db.commit_refcount_changes(i)\n  215          db.cleanup(i)\n  216      x = t1.root_hash\n  217:     for i in range(NODES):\n  218          t1.delete(to_string(i))\n  219          db.commit_refcount_changes(NODES + i)\n  220          db.cleanup(NODES + i)\n  221:     for i in range(NODES * 2 - 1, NODES - 1, -1):\n  222          db.revert_refcount_changes(i)\n  223:     for i in range(NODES * 2):\n  224          db.cleanup(NODES + i)\n  225          db.revert_refcount_changes(i)\n  226      t1.root_hash = x\n  227:     assert t1.to_dict() == {to_string(i): to_string(i) for i in range(NODES)}\n  228  \n  229  \n  ...\n  233      t1 = pruning_trie.Trie(db)\n  234      db.ttl = NODES * 2\n  235:     for i in range(NODES):\n  236          t1.update(to_string(i), to_string(i))\n  237          db.commit_refcount_changes(i)\n  ...\n  239      t2 = pruning_trie.Trie(db)\n  240      t2.root_hash = t1.root_hash\n  241:     assert t2.to_dict() == {to_string(i): to_string(i) for i in range(NODES)}\n  242:     for i in range(NODES):\n  243          t2.delete(to_string(i))\n  244          db.commit_refcount_changes(NODES + i)\n  245          db.cleanup(NODES + i)\n  246:     for i in range(NODES * 2):\n  247          db.cleanup(2 * NODES + i)\n  248      assert len(db.kv) == 0\n  ...\n  278      db.ttl = NODES * 2\n  279      c = 0\n  280:     for k, v in pre.items():\n  281          triekey = utils.sha3(utils.zpad(utils.decode_hex(k[2:]), 32))\n  282          t1.update(triekey, rlp.encode(utils.decode_hex(v[2:])))\n  ...\n  286          c += 1\n  287      print(utils.encode_hex(t1.root_hash))\n  288:     for k, v in toadd:\n  289          sys.stderr.write('kv: %s %s\\n' % (k, v))\n  290          triekey = utils.sha3(utils.zpad(utils.decode_hex(k[2:]), 32))\n  ...\n  298      t1.clear_all()\n  299      db.commit_refcount_changes(c)\n  300:     for i in range(db.ttl + 1):\n  301          db.cleanup(c)\n  302          c += 1\n  ...\n  355      db.ttl = NODES * 2\n  356      c = 0\n  357:     for k, v in pre.items():\n  358          triekey = utils.sha3(utils.zpad(k[2:].decode('hex'), 32))\n  359          t1.update(triekey, rlp.encode(v[2:].decode('hex')))\n  ...\n  365      print(utils.encode_hex(t1.root_hash))\n  366      print(t1.to_dict())\n  367:     for k, v in toadd:\n  368          sys.stderr.write('kv: %s %s\\n' % (k, v))\n  369          triekey = utils.sha3(utils.zpad(utils.decode_hex(k[2:]), 32))\n  ...\n  377      t1.clear_all()\n  378      db.commit_refcount_changes(c)\n  379:     for i in range(db.ttl + 1):\n  380          db.cleanup(c)\n  381          c += 1\n  ...\n  411          return x\n  412  \n  413:     pairs['in'] = [(_dec(k), _dec(v)) for k, v in pairs['in']]\n  414:     deletes = [(k, v) for k, v in pairs['in'] if v is None]\n  415  \n  416      N_PERMUTATIONS = 100\n  417:     for i, permut in enumerate(itertools.permutations(pairs['in'])):\n  418          if i > N_PERMUTATIONS:\n  419              break\n  ...\n  421          db.ttl = 0\n  422          t = pruning_trie.Trie(db)\n  423:         for k, v in permut:\n  424              # logger.debug('updating with (%s, %s)' %(k, v))\n  425              if v is not None:\n  ...\n  430          db.cleanup(0)\n  431          # make sure we have deletes at the end\n  432:         for k, v in deletes:\n  433              t.delete(k)\n  434          t.clear_all()\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_remoteblocks.py:\n   17  if __name__ == \"__main__\":\n   18      if len(sys.argv) < 3:\n   19:         print(\"usage:%s <raw_blocks_fn> <db_path> <skip?> <formt?>\"\n   20                % sys.argv[0])\n   21          sys.exit(1)\n   ..\n   23      test_db_path = sys.argv[2]\n   24      skip = int(sys.argv[3]) if len(sys.argv) > 3 else 0\n   25:     formt = sys.argv[4] if len(sys.argv) > 4 else 'lines'\n   26      import_chain_data(raw_blocks_fn, test_db_path, skip)\n   27  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_solidity.py:\n  219      assert {\n  220          defn['name']\n  221:         for defn\n  222          in contract_info['contract_add']['info']['abiDefinition']\n  223      } == {'add7', 'add42'}\n  224      assert {\n  225          defn['name']\n  226:         for defn\n  227          in contract_info['contract_sub']['info']['abiDefinition']\n  228      } == {'subtract7', 'subtract42'}\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_vm.py:\n   29          except:\n   30              fixtures = {'stdin': json.loads(sys.argv[1])}\n   31:     for filename, tests in list(fixtures.items()):\n   32:         for testname, testdata in list(tests.items()):\n   33              if len(sys.argv) < 3 or testname == sys.argv[2]:\n   34                  print(\"Testing: %s %s\" % (filename, testname))\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\test_vm_failing.py:\n   25      'vmSystemOperationsTest.json_ABAcalls0'\n   26  ]\n   27: failing = [x.split('_', 1)[-1] for x in failing]  # testnames\n   28  \n   29  \n   ..\n   36  \n   37  collected = []\n   38: for filename, tests in list(fixtures.items()):\n   39:     for testname, testdata in list(tests.items()):\n   40          func_name = 'test_%s_%s' % (filename, testname)\n   41          if testname not in failing:\n   ..\n   44  \n   45  collected.sort()\n   46: for func_name, filename, testname, testdata in collected:\n   47      globals()[func_name] = mk_test_func(filename, testname, testdata)\n   48  \n   ..\n   51      func_name, filename, testname, testdata = collected[1]\n   52      testutils.check_vm_test(testutils.fixture_to_bytes(testdata))\n   53:     for address_data in testdata['post'].values():\n   54          storage = address_data['storage']\n   55          if \"0x23\" not in storage:\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\todo_tests\\tst_frontier.py:\n   90      snapshot2 = c.state.to_snapshot()\n   91      if snapshot != snapshot2:  # FIXME\n   92:         for i, ss in enumerate([snapshot, snapshot2]):\n   93:             fn = '/tmp/{}_{}'.format(STATE_STORE_FN, i)\n   94              open(fn, 'w').write(json.dumps(snapshot))\n   95:         raise Exception(\"snapshot difference, see {}*\".format(fn[:-1]))\n   96  \n   97  \n   ..\n  105      # store checkpoint\n  106      if num_blocks % SNAPSHOT_INTERVAL == 0:\n  107:         fn = STATE_SNAPSHOT_FN.format(num_blocks / 1000)\n  108      elif num_blocks in MANUAL_SNAPSHOTS:\n  109:         fn = STATE_SNAPSHOT_FN.format(num_blocks)\n  110      else:\n  111          fn = STATE_STORE_FN\n  ...\n  130  num_txs = 0\n  131  gas_used = 0\n  132: for i, block in list(enumerate(block_rlps))[1:250000]:\n  133      # print 'prevh:', s.prev_headers\n  134      block = rlp.decode(block, Block)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tools\\_solidity.py:\n   25      \"\"\" Return the path to the solc compiler.\n   26  \n   27:     This funtion will search for the solc binary in the $PATH and return the\n   28      path of the first executable occurence.\n   29      \"\"\"\n   ..\n   33          return given_binary\n   34  \n   35:     for path in os.getenv('PATH', '').split(os.pathsep):\n   36          path = path.strip('\"')\n   37          executable_path = os.path.join(path, BINARY)\n   ..\n   69      if libraries is not None and len(libraries):\n   70          addresses = [\n   71:             '{name}:{address}'.format(name=name, address=address.decode('utf8'))\n   72:             for name, address in libraries.items()\n   73          ]\n   74          args.extend([\n   ..\n   89  \n   90      if 'bin' in tuple(result.values())[0]:\n   91:         for value in result.values():\n   92              value['bin_hex'] = value['bin']\n   93  \n   ..\n   98                  pass\n   99  \n  100:     for json_data in ('abi', 'devdoc', 'userdoc'):\n  101          # the values in the output can be configured through the\n  102          # --combined-json flag, check that it's present in the first value and\n  ...\n  105              continue\n  106  \n  107:         for value in result.values():\n  108              value[json_data] = yaml.safe_load(value[json_data])\n  109  \n  ...\n  131      #  - multiline comments\n  132      #  - the contract and library keywords could not be at the start of the line\n  133:     for pos, char in enumerate(code):\n  134          if in_string:\n  135              if not backslash and in_string == char:\n  ...\n  184      hold_piece = '_' * (36 - length)\n  185  \n  186:     return '__{library}{hold}__'.format(\n  187          library=library_piece,\n  188          hold=hold_piece,\n  ...\n  219      symbol_address = {\n  220          solidity_library_symbol(library_name): address\n  221:         for library_name, address in libraries.items()\n  222      }\n  223  \n  224:     for unresolved in solidity_unresolved_symbols(hex_code):\n  225          address = symbol_address[unresolved]\n  226          hex_code = solidity_resolve_address(hex_code, unresolved, address)\n  ...\n  248          filepath (str): The path to the contract source code.\n  249          libraries (dict): A dictionary mapping library name to it's address.\n  250:         combined (str): The argument for solc's --combined-json.\n  251          optimize (bool): Enable/disables compiler optimization.\n  252  \n  ...\n  282  def solidity_get_contract_key(all_contracts, filepath, contract_name):\n  283      \"\"\" A backwards compatible method of getting the key to the all_contracts\n  284:     dictionary for a particular contract\"\"\"\n  285      if contract_name in all_contracts:\n  286          return contract_name\n  ...\n  311      all_contract_names = [\n  312          name\n  313:         for _, name in all_names\n  314      ]\n  315  \n  ...\n  365          all_contract_names = [\n  366              name\n  367:             for _, name in all_names\n  368          ]\n  369          last_contract = all_contract_names[-1]\n  ...\n  412  \n  413          sorted_contracts = []\n  414:         for name in solidity_names(code):\n  415              sorted_contracts.append(\n  416                  (\n  ...\n  423      @classmethod\n  424      def compile_rich(cls, code, path=None, extra_args=None):\n  425:         \"\"\"full format as returned by jsonrpc\"\"\"\n  426  \n  427          return {\n  ...\n  438                  },\n  439              }\n  440:             for contract_name, contract\n  441              in cls.combined(code, path=path, extra_args=extra_args)\n  442          }\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tools\\new_statetest_utils.py:\n   48  def mk_state_diff(prev, post):\n   49      o = {}\n   50:     for k in prev.keys():\n   51          if k not in post:\n   52              o[k] = [\"-\", prev[k]]\n   53:     for k in post.keys():\n   54          if k not in prev:\n   55              o[k] = [\"+\", post[k]]\n   56          elif prev[k] != post[k]:\n   57              ok = {}\n   58:             for key in ('nonce', 'balance', 'code'):\n   59                  if prev[k][key] != post[k][key]:\n   60                      ok[key] = [prev[k][key], \"->\", post[k][key]]\n   61              if prev[k][\"storage\"] != post[k][\"storage\"]:\n   62                  ok[\"storage\"] = {}\n   63:                 for sk in prev[k][\"storage\"].keys():\n   64                      if sk not in post[k][\"storage\"]:\n   65                          ok[\"storage\"][sk] = [\"-\", prev[k][\"storage\"][sk]]\n   66:                 for sk in post[k][\"storage\"].keys():\n   67                      if sk not in prev[k][\"storage\"]:\n   68                          ok[\"storage\"][sk] = [\"+\", post[k][\"storage\"][sk]]\n   ..\n  109  \n  110  \n  111: # Initialize the state for state tests\n  112  def init_state(env, pre):\n  113      # Setup env\n  ...\n  115          env=Env(config=konfig),\n  116          block_prevhash=decode_hex(remove_0x_head(env['previousHash'])),\n  117:         prev_headers=[mk_fake_header(i) for i in range(parse_int_or_hex(env['currentNumber']) -1,\n  118                                                         max(-1, parse_int_or_hex(env['currentNumber']) -257), -1)],\n  119          block_number=parse_int_or_hex(env['currentNumber']),\n  ...\n  124  \n  125      # Fill up pre\n  126:     for address, h in list(pre.items()):\n  127          assert len(address) in (40, 42)\n  128          address = decode_hex(remove_0x_head(address))\n  ...\n  131          state.set_balance(address, parse_int_or_hex(h['balance']))\n  132          state.set_code(address, decode_hex(remove_0x_head(h['code'])))\n  133:         for k, v in h['storage'].items():\n  134              state.set_storage_data(address,\n  135                                     big_endian_to_int(decode_hex(k[2:])),\n  ...\n  149          raise EnvNotFoundException(\"Env not found\")\n  150      _state = init_state(test[\"env\"], test[\"pre\"])\n  151:     for config_name, results in test[\"post\"].items():\n  152          # Old protocol versions may not be supported\n  153          if config_name not in configs:\n  154              continue\n  155:         print(\"Testing for %s\" % config_name)\n  156:         for result in results:\n  157              data = test[\"transaction\"]['data'][result[\"indexes\"][\"data\"]]\n  158              if len(data) > 2000:\n  159                  data = \"data<%d>\" % (len(data) // 2 - 1)\n  160:             print(\"Checking for values: g %d v %d d %s (indexes g %d v %d d %d)\" % (\n  161                    parse_int_or_hex(test[\"transaction\"]['gasLimit'][result[\"indexes\"][\"gas\"]]),\n  162                    parse_int_or_hex(test[\"transaction\"]['value'][result[\"indexes\"][\"value\"]]),\n  ...\n  167              computed = compute_state_test_unit(_state, test[\"transaction\"], result[\"indexes\"], configs[config_name])\n  168              if computed[\"hash\"][-64:] != result[\"hash\"][-64:]:\n  169:                 for k in computed[\"diff\"]:\n  170                      print(k, computed[\"diff\"][k])\n  171                  raise Exception(\"Hash mismatch, computed: %s, supplied: %s\" % (computed[\"hash\"], result[\"hash\"]))\n  172              else:\n  173:                 # for k in computed[\"diff\"]:\n  174                  #     print(k, computed[\"diff\"][k])\n  175                  print(\"Hash matched!: %s\" % computed[\"hash\"])\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tools\\tester.py:\n   15  keys = []\n   16  \n   17: for account_number in range(10):\n   18      keys.append(sha3(to_string(account_number)))\n   19      accounts.append(privtoaddr(keys[-1]))\n   ..\n   24  base_alloc = {}\n   25  minimal_alloc = {}\n   26: for a in accounts:\n   27      base_alloc[a] = {'balance': 10**24}\n   28: for i in range(1, 9):\n   29      base_alloc[int_to_addr(i)] = {'balance': 1}\n   30      minimal_alloc[int_to_addr(i)] = {'balance': 1}\n   ..\n   77          self.translator = abi_translator\n   78  \n   79:         for function_name in self.translator.function_data:\n   80              if self.translator.function_data[function_name]['is_constant']:\n   81                  function = self.method_factory(_tester.call, function_name)\n   ..\n   87      @staticmethod\n   88      def method_factory(tx_or_call, function_name):\n   89:         \"\"\" Return a proxy for calling a contract method with automatic encoding of\n   90          argument and decoding of results.\n   91          \"\"\"\n   ..\n  208          assert self.chain.add_block(self.block)\n  209          b = self.block\n  210:         for i in range(1, number_of_blocks):\n  211              b, _ = make_head_candidate(self.chain, parent=b, timestamp=self.chain.state.timestamp + 14, coinbase=coinbase)\n  212              b = Miner(b).mine(rounds=100, start_nonce=0)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\ethereum\\tools\\testutils.py:\n   15  \n   16  def bytesify(li):\n   17:     return [str_to_bytes(x) if isinstance(x, str) else x for x in li]\n   18  \n   19  def run_abi_test(params, mode):\n   ..\n   46      base_dir = os.path.dirname(os.path.dirname(__file__))\n   47      params = []\n   48:     for filename, tests in fixtures.items():\n   49          if isinstance(tests, dict):\n   50              filename = os.path.relpath(filename, base_dir)\n   51:             for testname, testdata in tests.items():\n   52                  if exclude_func and exclude_func(filename, testname, testdata):\n   53                      continue\n   ..\n   77      else:\n   78          o = {}\n   79:         for f in os.listdir(dname):\n   80              fullpath = os.path.join(dname, f)\n   81:             for k, v in list(get_tests_from_file_or_dir(fullpath, True).items()):\n   82                  o[k] = v\n   83          return o\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\tools\\fixture_to_example.py:\n    4  def fixture_to_tables(fixture):\n    5      \"\"\" convert fixture into *behave* examples\n    6:     :param fixture: a dictionary in the following form::\n    7  \n    8          {\n    .\n   26  \n   27      tables = []\n   28:     for (title, content) in fixture.iteritems():\n   29          rows = []\n   30  \n   ..\n   36          # item(value) row\n   37          row1 = []\n   38:         for col in rows[0]:\n   39              row1.append(content[col])\n   40          rows.append(tuple(row1))\n   ..\n   44  \n   45  \n   46: def format_item(item, py=True):\n   47      \"\"\"\n   48:     :param py: python format or not\n   49      \"\"\"\n   50:     # for non python format, just output itself.\n   51      # so the result is `something` instead of `\"something\"`\n   52      if not py:\n   ..\n   57          if item.startswith('#'):\n   58              return unicode(long(item[1:]))\n   59:         return u'\"{0}\"'.format(item)\n   60  \n   61      return unicode(item)\n   62  \n   63  \n   64: def format_to_example(table, tabspace=2, indent=2):\n   65:     \"\"\" format table to *behave* example\n   66      :param table: `(caption, rows)`, each item in `rows` is `(col1, col2,...)`\n   67      :return\n   ..\n   73  \n   74      # output caption line\n   75:     output.write(u'{0}Examples: {1}\\n'.format(' ' * indent * tabspace,\n   76                                                caption))\n   77  \n   78:     # calculate max length for each column, for aligning\n   79      cols = zip(*rows)\n   80      col_lengths = []\n   81:     for col in cols:\n   82:         max_length = max([len(format_item(row)) for row in col])\n   83          col_lengths.append(max_length)\n   84  \n   85      # output each row\n   86:     for r, row in enumerate(rows):\n   87          output.write(u' ' * (indent + 1) * tabspace)\n   88          output.write(u'|')\n   89:         for c in range(len(col_lengths)):\n   90              output.write(u' ')\n   91:             output.write(format_item(row[c], r))\n   92:             output.write(u' ' * (col_lengths[c] - len(format_item(row[c], r))))\n   93              output.write(u' |')\n   94          output.write(u'\\n')\n   ..\n  109      fixture = json.load(file(f))\n  110      tables = fixture_to_tables(fixture)\n  111:     for table in tables:\n  112:         print(format_to_example(table))\n  113  \n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\tools\\mk_ecadd_tests.py:\n   59  \n   60  tests = []\n   61: for g in gaslimits:\n   62      tests.append((zero, zero, g, 128))\n   63      tests.append((zero, zero, g, 64))\n   ..\n   82  testout_filler = {}\n   83  \n   84: for test in tests:\n   85      o1, o2 = mk_test(*test)\n   86      n1, n2 = py_pairing.normalize(test[0]), py_pairing.normalize(test[1])\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\tools\\mk_ecmul_tests.py:\n   57  \n   58  tests = []\n   59: for g in gaslimits:\n   60:     for m in mults:\n   61:         for pt in pts:\n   62              tests.append((pt, m, g, 96))\n   63              tests.append((pt, m, g, 128))\n   ..\n   73  testout_filler = {}\n   74  \n   75: for test in tests:\n   76      o1, o2 = mk_test(*test)\n   77      n = py_pairing.normalize(test[0])\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\tools\\mk_ecpairing_tests.py:\n   28  G1_zero = (py_pairing.FQ.one(), py_pairing.FQ.one(), py_pairing.FQ.zero())\n   29  G2_zero = (FQ2_one, FQ2_one, py_pairing.FQ2.zero())\n   30: for i in range(200):\n   31      x = py_pairing.FQ2([8, i])\n   32      ysquared = x ** 3 + py_pairing.b2\n   ..\n   40  def mk_ecpairing_data(pts):\n   41      o = b''\n   42:     for p, q in pts:\n   43          np, nq = py_pairing.normalize(p), py_pairing.normalize(q)\n   44          o += encode_int32(np[0].n) + encode_int32(np[1].n) + \\\n   ..\n  113  testout_filler = {}\n  114  \n  115: for encoded, execgas, expect, desc in tests:\n  116      print('testing', encoded, execgas, expect, desc)\n  117      o1, o2 = mk_test(encoded, execgas, expect)\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\tools\\mk_modexp_tests.py:\n   51  \n   52  tests = []\n   53: for g in gaslimits:\n   54      tests.append((3, 5, 100, g))\n   55: for g in gaslimits:\n   56      tests.append((3, 2**254, 2**256, g))\n   57: for g in gaslimits:\n   58      tests.append((0, 3, 100, g))\n   59: for g in gaslimits:\n   60      tests.append((0, 0, 0, g))\n   61: for g in gaslimits:\n   62      tests.append((0, 1, 0, g))\n   63: for g in gaslimits:\n   64      tests.append((1, 0, 0, g))\n   65: for g in gaslimits:\n   66      tests.append((1, 0, 1, g))\n   67: for g in gaslimits:\n   68      tests.append((2**256, 1, 3**160, g))\n   69: for g in gaslimits:\n   70      tests.append((9, 2**1024 - 105, 2**1024 - 105, g))\n   71: for g in gaslimits:\n   72      tests.append((2**1024 - 96, 2**1024 - 105, 2**1024 - 105, g))\n   73: for g in gaslimits:\n   74      tests.append((2**1024 - 96, 2**1024 - 105, 97, g))\n   75: for g in gaslimits:\n   76      tests.append((2**1024 - 96, 2**1024 - 105, 1, g))\n   77: for g in gaslimits:\n   78      tests.append((2**1024 - 96, 2**1024 - 105, 0, g))\n   79: for g in gaslimits:\n   80      tests.append((1, 1, 1, g))\n   81: for g in gaslimits:\n   82      tests.append((49, 2401, 2401, g))\n   83: for g in gaslimits:\n   84      tests.append((3**160 - 11, 3**160 - 11, 2**160 - 11, g))\n   85  \n   ..\n   87  testout_filler = {}\n   88  \n   89: for test in tests:\n   90      o1, o2 = mk_test(*test)\n   91      testout[\"modexp_%d_%d_%d_%d\" % test] = o1\n\nD:\\MyCode\\Code\\ChainBlock\\pyethereum-develop\\tools\\random_vm_test_generator.py:\n   23  def gen_random_code(rnd):\n   24      o = []\n   25:     for i in range(4):\n   26          o.extend([96, rnd(256)])\n   27:         o.extend([99] + [rnd(256) for i in range(4)])\n   28      ops = pyethereum.opcodes.opcodes.keys()\n   29:     o += [ops[rnd(len(ops))] for i in range(64)]\n   30      return ''.join(map(ascii_chr, o))\n   31  \n\n976 matches across 74 files\n",
			"settings":
			{
				"buffer_size": 204636,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "ethereum/slogging.py",
			"settings":
			{
				"buffer_size": 10699,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/User/Default (Windows).sublime-keymap",
			"settings":
			{
				"buffer_size": 35255,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "ethereum/pow/chain.py",
			"settings":
			{
				"buffer_size": 21310,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/full_casper/casper_utils.py",
			"settings":
			{
				"buffer_size": 12490,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ethereum/state.py",
			"settings":
			{
				"buffer_size": 18964,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Advanced Install Package"
			],
			[
				"Packa",
				"Preferences: Browse Packages"
			],
			[
				"",
				"Build With: Python"
			],
			[
				"set sy",
				"Set Syntax: Python"
			],
			[
				"pci",
				"Package Control: Install Package→安装插件"
			],
			[
				"in",
				"Package Control: Install Package→安装插件"
			],
			[
				"i",
				"Package Control: Install Package→安装插件"
			]
		],
		"width": 386.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/MyCode/Code/ChainBlock/pyethereum-develop",
		"/D/MyCode/Code/ChainBlock/pyethereum-develop/ethereum",
		"/D/MyCode/Code/ChainBlock/pyethereum-develop/ethereum/todo_tests",
		"/D/MyCode/Code/ChainBlock/pyethereum-develop/fixtures"
	],
	"file_history":
	[
		"/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/User/Preferences.sublime-settings",
		"/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/Default/Preferences.sublime-settings",
		"/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/CTags/CTags.sublime-settings",
		"/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/User/CTags.sublime-settings",
		"/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/Package Control/Package Control.sublime-settings",
		"/D/MyCode/Code/ChainBlock/pyethereum-develop/ethereum/tests/test_trie_next_prev.py"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 92.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"getLogger",
			"log_file",
			"for",
			"setter",
			"sha3_256",
			"create_contract",
			"InvalidNonce",
			"config_fork_specific_validation",
			":\n",
			"config_fork_specific_validation",
			"validate_transaction",
			"True",
			"validate_transaction"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 13,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ethereum/opcodes.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4365,
						"regions":
						{
						},
						"selection":
						[
							[
								2479,
								2486
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ethereum/messages.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15124,
						"regions":
						{
						},
						"selection":
						[
							[
								13096,
								13126
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5578.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ethereum/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13663,
						"regions":
						{
						},
						"selection":
						[
							[
								749,
								749
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ethereum/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1594,
						"regions":
						{
						},
						"selection":
						[
							[
								442,
								442
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ethereum/new_state.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17458,
						"regions":
						{
						},
						"selection":
						[
							[
								2311,
								2319
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ethereum/snapshot.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6420,
						"regions":
						{
						},
						"selection":
						[
							[
								676,
								676
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2764,
						"regions":
						{
						},
						"selection":
						[
							[
								1211,
								1211
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 952.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "setup.cfg",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 157,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "setup.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1605,
						"regions":
						{
						},
						"selection":
						[
							[
								418,
								419
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "ethereum/todo_tests/test_pos.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8747,
						"regions":
						{
						},
						"selection":
						[
							[
								1435,
								1435
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 410.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 204636,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										137,
										140
									],
									[
										147,
										150
									],
									[
										312,
										315
									],
									[
										412,
										415
									],
									[
										885,
										888
									],
									[
										1395,
										1398
									],
									[
										1928,
										1931
									],
									[
										2431,
										2434
									],
									[
										2541,
										2544
									],
									[
										2994,
										2997
									],
									[
										3130,
										3133
									],
									[
										3621,
										3624
									],
									[
										4100,
										4103
									],
									[
										4161,
										4164
									],
									[
										4227,
										4230
									],
									[
										4329,
										4332
									],
									[
										4938,
										4941
									],
									[
										5403,
										5406
									],
									[
										5773,
										5776
									],
									[
										5821,
										5824
									],
									[
										5862,
										5865
									],
									[
										5910,
										5913
									],
									[
										5990,
										5993
									],
									[
										6044,
										6047
									],
									[
										6105,
										6108
									],
									[
										6160,
										6163
									],
									[
										6736,
										6739
									],
									[
										6839,
										6842
									],
									[
										7386,
										7389
									],
									[
										7494,
										7497
									],
									[
										7596,
										7599
									],
									[
										7694,
										7697
									],
									[
										7808,
										7811
									],
									[
										7918,
										7921
									],
									[
										8034,
										8037
									],
									[
										8146,
										8149
									],
									[
										8258,
										8261
									],
									[
										8366,
										8369
									],
									[
										8492,
										8495
									],
									[
										8614,
										8617
									],
									[
										9139,
										9142
									],
									[
										9699,
										9702
									],
									[
										10147,
										10150
									],
									[
										10766,
										10769
									],
									[
										11145,
										11148
									],
									[
										11189,
										11192
									],
									[
										11222,
										11225
									],
									[
										11265,
										11268
									],
									[
										11298,
										11301
									],
									[
										11338,
										11341
									],
									[
										11796,
										11799
									],
									[
										11853,
										11856
									],
									[
										11980,
										11983
									],
									[
										12046,
										12049
									],
									[
										12471,
										12474
									],
									[
										12565,
										12568
									],
									[
										13006,
										13009
									],
									[
										13057,
										13060
									],
									[
										13522,
										13525
									],
									[
										13633,
										13636
									],
									[
										14310,
										14313
									],
									[
										14721,
										14724
									],
									[
										14780,
										14783
									],
									[
										15277,
										15280
									],
									[
										15377,
										15380
									],
									[
										15489,
										15492
									],
									[
										15603,
										15606
									],
									[
										15713,
										15716
									],
									[
										15837,
										15840
									],
									[
										16241,
										16244
									],
									[
										16283,
										16286
									],
									[
										16739,
										16742
									],
									[
										16785,
										16788
									],
									[
										17250,
										17253
									],
									[
										17702,
										17705
									],
									[
										17743,
										17746
									],
									[
										18285,
										18288
									],
									[
										18381,
										18384
									],
									[
										18489,
										18492
									],
									[
										18599,
										18602
									],
									[
										18705,
										18708
									],
									[
										18825,
										18828
									],
									[
										19213,
										19216
									],
									[
										19251,
										19254
									],
									[
										19592,
										19595
									],
									[
										19647,
										19650
									],
									[
										20137,
										20140
									],
									[
										20560,
										20563
									],
									[
										20660,
										20663
									],
									[
										21143,
										21146
									],
									[
										21642,
										21645
									],
									[
										21768,
										21771
									],
									[
										22461,
										22464
									],
									[
										22595,
										22598
									],
									[
										23010,
										23013
									],
									[
										23562,
										23565
									],
									[
										24202,
										24205
									],
									[
										24336,
										24339
									],
									[
										24928,
										24931
									],
									[
										25037,
										25040
									],
									[
										25387,
										25390
									],
									[
										25440,
										25443
									],
									[
										26011,
										26014
									],
									[
										26571,
										26574
									],
									[
										26963,
										26966
									],
									[
										27027,
										27030
									],
									[
										27499,
										27502
									],
									[
										27548,
										27551
									],
									[
										27992,
										27995
									],
									[
										28093,
										28096
									],
									[
										28515,
										28518
									],
									[
										28607,
										28610
									],
									[
										29011,
										29014
									],
									[
										29057,
										29060
									],
									[
										29098,
										29101
									],
									[
										29150,
										29153
									],
									[
										29501,
										29504
									],
									[
										29511,
										29514
									],
									[
										29650,
										29653
									],
									[
										29750,
										29753
									],
									[
										29909,
										29912
									],
									[
										30113,
										30116
									],
									[
										30480,
										30483
									],
									[
										30840,
										30843
									],
									[
										31375,
										31378
									],
									[
										31829,
										31832
									],
									[
										31970,
										31973
									],
									[
										32719,
										32722
									],
									[
										33453,
										33456
									],
									[
										33654,
										33657
									],
									[
										33818,
										33821
									],
									[
										34215,
										34218
									],
									[
										34404,
										34407
									],
									[
										34951,
										34954
									],
									[
										35093,
										35096
									],
									[
										35198,
										35201
									],
									[
										35663,
										35666
									],
									[
										35851,
										35854
									],
									[
										36139,
										36142
									],
									[
										36156,
										36159
									],
									[
										36527,
										36530
									],
									[
										36856,
										36859
									],
									[
										36931,
										36934
									],
									[
										37301,
										37304
									],
									[
										37585,
										37588
									],
									[
										37985,
										37988
									],
									[
										38149,
										38152
									],
									[
										38547,
										38550
									],
									[
										38956,
										38959
									],
									[
										39159,
										39162
									],
									[
										39339,
										39342
									],
									[
										39668,
										39671
									],
									[
										39866,
										39869
									],
									[
										40247,
										40250
									],
									[
										40405,
										40408
									],
									[
										40517,
										40520
									],
									[
										40711,
										40714
									],
									[
										40866,
										40869
									],
									[
										41193,
										41196
									],
									[
										41210,
										41213
									],
									[
										41531,
										41534
									],
									[
										41738,
										41741
									],
									[
										41820,
										41823
									],
									[
										42020,
										42023
									],
									[
										42248,
										42251
									],
									[
										42346,
										42349
									],
									[
										42628,
										42631
									],
									[
										42909,
										42912
									],
									[
										43155,
										43158
									],
									[
										43364,
										43367
									],
									[
										43586,
										43589
									],
									[
										43702,
										43705
									],
									[
										43943,
										43946
									],
									[
										44128,
										44131
									],
									[
										44238,
										44241
									],
									[
										44429,
										44432
									],
									[
										44690,
										44693
									],
									[
										44901,
										44904
									],
									[
										45081,
										45084
									],
									[
										45289,
										45292
									],
									[
										45521,
										45524
									],
									[
										45765,
										45768
									],
									[
										45900,
										45903
									],
									[
										46099,
										46102
									],
									[
										46239,
										46242
									],
									[
										46499,
										46502
									],
									[
										46703,
										46706
									],
									[
										46897,
										46900
									],
									[
										47090,
										47093
									],
									[
										47255,
										47258
									],
									[
										47461,
										47464
									],
									[
										47689,
										47692
									],
									[
										48010,
										48013
									],
									[
										48162,
										48165
									],
									[
										48329,
										48332
									],
									[
										48705,
										48708
									],
									[
										49004,
										49007
									],
									[
										49295,
										49298
									],
									[
										49362,
										49365
									],
									[
										49650,
										49653
									],
									[
										49839,
										49842
									],
									[
										50087,
										50090
									],
									[
										50355,
										50358
									],
									[
										50548,
										50551
									],
									[
										50600,
										50603
									],
									[
										50633,
										50636
									],
									[
										50828,
										50831
									],
									[
										51112,
										51115
									],
									[
										51269,
										51272
									],
									[
										51528,
										51531
									],
									[
										51617,
										51620
									],
									[
										51786,
										51789
									],
									[
										52062,
										52065
									],
									[
										52304,
										52307
									],
									[
										52341,
										52344
									],
									[
										52427,
										52430
									],
									[
										52689,
										52692
									],
									[
										52907,
										52910
									],
									[
										53184,
										53187
									],
									[
										53319,
										53322
									],
									[
										53453,
										53456
									],
									[
										53516,
										53519
									],
									[
										53599,
										53602
									],
									[
										53801,
										53804
									],
									[
										54048,
										54051
									],
									[
										54342,
										54345
									],
									[
										54594,
										54597
									],
									[
										54870,
										54873
									],
									[
										55061,
										55064
									],
									[
										55242,
										55245
									],
									[
										55602,
										55605
									],
									[
										55804,
										55807
									],
									[
										56113,
										56116
									],
									[
										56259,
										56262
									],
									[
										56386,
										56389
									],
									[
										56558,
										56561
									],
									[
										56840,
										56843
									],
									[
										56984,
										56987
									],
									[
										57214,
										57217
									],
									[
										57474,
										57477
									],
									[
										57698,
										57701
									],
									[
										57998,
										58001
									],
									[
										58303,
										58306
									],
									[
										58422,
										58425
									],
									[
										58664,
										58667
									],
									[
										59016,
										59019
									],
									[
										59251,
										59254
									],
									[
										59610,
										59613
									],
									[
										59777,
										59780
									],
									[
										59878,
										59881
									],
									[
										60139,
										60142
									],
									[
										60337,
										60340
									],
									[
										60613,
										60616
									],
									[
										60863,
										60866
									],
									[
										61021,
										61024
									],
									[
										61191,
										61194
									],
									[
										61439,
										61442
									],
									[
										61670,
										61673
									],
									[
										61989,
										61992
									],
									[
										61997,
										62000
									],
									[
										62022,
										62025
									],
									[
										62238,
										62241
									],
									[
										62512,
										62515
									],
									[
										62804,
										62807
									],
									[
										63118,
										63121
									],
									[
										63426,
										63429
									],
									[
										63757,
										63760
									],
									[
										64075,
										64078
									],
									[
										64362,
										64365
									],
									[
										64652,
										64655
									],
									[
										65024,
										65027
									],
									[
										65041,
										65044
									],
									[
										65174,
										65177
									],
									[
										65191,
										65194
									],
									[
										65489,
										65492
									],
									[
										65807,
										65810
									],
									[
										66079,
										66082
									],
									[
										66432,
										66435
									],
									[
										66574,
										66577
									],
									[
										66725,
										66728
									],
									[
										66853,
										66856
									],
									[
										67229,
										67232
									],
									[
										67588,
										67591
									],
									[
										67909,
										67912
									],
									[
										68198,
										68201
									],
									[
										68375,
										68378
									],
									[
										68643,
										68646
									],
									[
										68902,
										68905
									],
									[
										69167,
										69170
									],
									[
										69509,
										69512
									],
									[
										69691,
										69694
									],
									[
										69940,
										69943
									],
									[
										70245,
										70248
									],
									[
										70466,
										70469
									],
									[
										70612,
										70615
									],
									[
										70813,
										70816
									],
									[
										71021,
										71024
									],
									[
										71294,
										71297
									],
									[
										71546,
										71549
									],
									[
										71732,
										71735
									],
									[
										71785,
										71788
									],
									[
										72101,
										72104
									],
									[
										72177,
										72180
									],
									[
										72252,
										72255
									],
									[
										72325,
										72328
									],
									[
										72405,
										72408
									],
									[
										72673,
										72676
									],
									[
										72953,
										72956
									],
									[
										73246,
										73249
									],
									[
										73516,
										73519
									],
									[
										73765,
										73768
									],
									[
										74036,
										74039
									],
									[
										74368,
										74371
									],
									[
										74609,
										74612
									],
									[
										74740,
										74743
									],
									[
										74993,
										74996
									],
									[
										75380,
										75383
									],
									[
										75572,
										75575
									],
									[
										75770,
										75773
									],
									[
										76016,
										76019
									],
									[
										76188,
										76191
									],
									[
										76365,
										76368
									],
									[
										76406,
										76409
									],
									[
										76613,
										76616
									],
									[
										76654,
										76657
									],
									[
										76864,
										76867
									],
									[
										76905,
										76908
									],
									[
										77115,
										77118
									],
									[
										77156,
										77159
									],
									[
										77369,
										77372
									],
									[
										77410,
										77413
									],
									[
										77625,
										77628
									],
									[
										77666,
										77669
									],
									[
										77905,
										77908
									],
									[
										78075,
										78078
									],
									[
										78223,
										78226
									],
									[
										78414,
										78417
									],
									[
										78719,
										78722
									],
									[
										79039,
										79042
									],
									[
										79220,
										79223
									],
									[
										79238,
										79241
									],
									[
										79415,
										79418
									],
									[
										79715,
										79718
									],
									[
										80027,
										80030
									],
									[
										80347,
										80350
									],
									[
										80551,
										80554
									],
									[
										80672,
										80675
									],
									[
										80949,
										80952
									],
									[
										81154,
										81157
									],
									[
										81372,
										81375
									],
									[
										81468,
										81471
									],
									[
										81661,
										81664
									],
									[
										81908,
										81911
									],
									[
										82084,
										82087
									],
									[
										82358,
										82361
									],
									[
										82574,
										82577
									],
									[
										82753,
										82756
									],
									[
										82980,
										82983
									],
									[
										83167,
										83170
									],
									[
										83476,
										83479
									],
									[
										83657,
										83660
									],
									[
										83796,
										83799
									],
									[
										83809,
										83812
									],
									[
										84031,
										84034
									],
									[
										84328,
										84331
									],
									[
										84540,
										84543
									],
									[
										84841,
										84844
									],
									[
										85053,
										85056
									],
									[
										85176,
										85179
									],
									[
										85281,
										85284
									],
									[
										85412,
										85415
									],
									[
										85438,
										85441
									],
									[
										85482,
										85485
									],
									[
										85620,
										85623
									],
									[
										85725,
										85728
									],
									[
										85755,
										85758
									],
									[
										85779,
										85782
									],
									[
										85828,
										85831
									],
									[
										85933,
										85936
									],
									[
										85975,
										85978
									],
									[
										86241,
										86244
									],
									[
										86405,
										86408
									],
									[
										86753,
										86756
									],
									[
										86833,
										86836
									],
									[
										87077,
										87080
									],
									[
										87350,
										87353
									],
									[
										87522,
										87525
									],
									[
										87578,
										87581
									],
									[
										87782,
										87785
									],
									[
										87961,
										87964
									],
									[
										88192,
										88195
									],
									[
										88417,
										88420
									],
									[
										88593,
										88596
									],
									[
										88855,
										88858
									],
									[
										89041,
										89044
									],
									[
										89243,
										89246
									],
									[
										89431,
										89434
									],
									[
										89745,
										89748
									],
									[
										89932,
										89935
									],
									[
										90174,
										90177
									],
									[
										90313,
										90316
									],
									[
										90547,
										90550
									],
									[
										90691,
										90694
									],
									[
										90913,
										90916
									],
									[
										91128,
										91131
									],
									[
										91312,
										91315
									],
									[
										91544,
										91547
									],
									[
										91675,
										91678
									],
									[
										91928,
										91931
									],
									[
										92315,
										92318
									],
									[
										92519,
										92522
									],
									[
										92717,
										92720
									],
									[
										92963,
										92966
									],
									[
										93135,
										93138
									],
									[
										93423,
										93426
									],
									[
										93464,
										93467
									],
									[
										93671,
										93674
									],
									[
										93712,
										93715
									],
									[
										93922,
										93925
									],
									[
										93963,
										93966
									],
									[
										94173,
										94176
									],
									[
										94214,
										94217
									],
									[
										94427,
										94430
									],
									[
										94468,
										94471
									],
									[
										94683,
										94686
									],
									[
										94724,
										94727
									],
									[
										94963,
										94966
									],
									[
										95149,
										95152
									],
									[
										95297,
										95300
									],
									[
										95488,
										95491
									],
									[
										95793,
										95796
									],
									[
										96113,
										96116
									],
									[
										96294,
										96297
									],
									[
										96312,
										96315
									],
									[
										96489,
										96492
									],
									[
										96789,
										96792
									],
									[
										97101,
										97104
									],
									[
										97421,
										97424
									],
									[
										97625,
										97628
									],
									[
										97746,
										97749
									],
									[
										98023,
										98026
									],
									[
										98228,
										98231
									],
									[
										98537,
										98540
									],
									[
										98590,
										98593
									],
									[
										98844,
										98847
									],
									[
										99082,
										99085
									],
									[
										99125,
										99128
									],
									[
										99352,
										99355
									],
									[
										99492,
										99495
									],
									[
										99717,
										99720
									],
									[
										99883,
										99886
									],
									[
										99937,
										99940
									],
									[
										99991,
										99994
									],
									[
										100115,
										100118
									],
									[
										100169,
										100172
									],
									[
										100252,
										100255
									],
									[
										100465,
										100468
									],
									[
										100633,
										100636
									],
									[
										100921,
										100924
									],
									[
										101165,
										101168
									],
									[
										101416,
										101419
									],
									[
										101649,
										101652
									],
									[
										101950,
										101953
									],
									[
										102023,
										102026
									],
									[
										102188,
										102191
									],
									[
										102298,
										102301
									],
									[
										102434,
										102437
									],
									[
										102640,
										102643
									],
									[
										102862,
										102865
									],
									[
										103097,
										103100
									],
									[
										103329,
										103332
									],
									[
										103579,
										103582
									],
									[
										103753,
										103756
									],
									[
										103958,
										103961
									],
									[
										104185,
										104188
									],
									[
										104385,
										104388
									],
									[
										104623,
										104626
									],
									[
										105008,
										105011
									],
									[
										105112,
										105115
									],
									[
										105341,
										105344
									],
									[
										105566,
										105569
									],
									[
										105866,
										105869
									],
									[
										106090,
										106093
									],
									[
										106282,
										106285
									],
									[
										106549,
										106552
									],
									[
										106812,
										106815
									],
									[
										106978,
										106981
									],
									[
										107234,
										107237
									],
									[
										107420,
										107423
									],
									[
										107613,
										107616
									],
									[
										107907,
										107910
									],
									[
										108151,
										108154
									],
									[
										108426,
										108429
									],
									[
										108526,
										108529
									],
									[
										108807,
										108810
									],
									[
										109068,
										109071
									],
									[
										109302,
										109305
									],
									[
										109428,
										109431
									],
									[
										109672,
										109675
									],
									[
										109801,
										109804
									],
									[
										109972,
										109975
									],
									[
										110080,
										110083
									],
									[
										110361,
										110364
									],
									[
										110638,
										110641
									],
									[
										110904,
										110907
									],
									[
										111034,
										111037
									],
									[
										111315,
										111318
									],
									[
										111420,
										111423
									],
									[
										111656,
										111659
									],
									[
										111832,
										111835
									],
									[
										112000,
										112003
									],
									[
										112125,
										112128
									],
									[
										112281,
										112284
									],
									[
										112409,
										112412
									],
									[
										112550,
										112553
									],
									[
										112721,
										112724
									],
									[
										112933,
										112936
									],
									[
										113084,
										113087
									],
									[
										113261,
										113264
									],
									[
										113407,
										113410
									],
									[
										113627,
										113630
									],
									[
										113743,
										113746
									],
									[
										113876,
										113879
									],
									[
										114098,
										114101
									],
									[
										114379,
										114382
									],
									[
										114508,
										114511
									],
									[
										114633,
										114636
									],
									[
										114782,
										114785
									],
									[
										114932,
										114935
									],
									[
										115256,
										115259
									],
									[
										115506,
										115509
									],
									[
										115641,
										115644
									],
									[
										115787,
										115790
									],
									[
										115993,
										115996
									],
									[
										116144,
										116147
									],
									[
										116389,
										116392
									],
									[
										116620,
										116623
									],
									[
										116936,
										116939
									],
									[
										116944,
										116947
									],
									[
										116969,
										116972
									],
									[
										117174,
										117177
									],
									[
										117455,
										117458
									],
									[
										117747,
										117750
									],
									[
										118061,
										118064
									],
									[
										118361,
										118364
									],
									[
										118692,
										118695
									],
									[
										119010,
										119013
									],
									[
										119291,
										119294
									],
									[
										119581,
										119584
									],
									[
										119950,
										119953
									],
									[
										119967,
										119970
									],
									[
										120182,
										120185
									],
									[
										120199,
										120202
									],
									[
										120497,
										120500
									],
									[
										120815,
										120818
									],
									[
										121087,
										121090
									],
									[
										121470,
										121473
									],
									[
										121760,
										121763
									],
									[
										121923,
										121926
									],
									[
										122299,
										122302
									],
									[
										122597,
										122600
									],
									[
										122913,
										122916
									],
									[
										123194,
										123197
									],
									[
										123483,
										123486
									],
									[
										123667,
										123670
									],
									[
										123942,
										123945
									],
									[
										124198,
										124201
									],
									[
										124350,
										124353
									],
									[
										124493,
										124496
									],
									[
										124682,
										124685
									],
									[
										124862,
										124865
									],
									[
										125060,
										125063
									],
									[
										125165,
										125168
									],
									[
										125397,
										125400
									],
									[
										125627,
										125630
									],
									[
										125915,
										125918
									],
									[
										126230,
										126233
									],
									[
										126531,
										126534
									],
									[
										126818,
										126821
									],
									[
										127065,
										127068
									],
									[
										127386,
										127389
									],
									[
										127705,
										127708
									],
									[
										127983,
										127986
									],
									[
										128235,
										128238
									],
									[
										128426,
										128429
									],
									[
										128673,
										128676
									],
									[
										128839,
										128842
									],
									[
										128949,
										128952
									],
									[
										129085,
										129088
									],
									[
										129349,
										129352
									],
									[
										129514,
										129517
									],
									[
										129736,
										129739
									],
									[
										129982,
										129985
									],
									[
										130153,
										130156
									],
									[
										130397,
										130400
									],
									[
										130679,
										130682
									],
									[
										130925,
										130928
									],
									[
										131099,
										131102
									],
									[
										131304,
										131307
									],
									[
										131531,
										131534
									],
									[
										131793,
										131796
									],
									[
										132025,
										132028
									],
									[
										132296,
										132299
									],
									[
										132591,
										132594
									],
									[
										132854,
										132857
									],
									[
										133021,
										133024
									],
									[
										133277,
										133280
									],
									[
										133463,
										133466
									],
									[
										133625,
										133628
									],
									[
										133868,
										133871
									],
									[
										134100,
										134103
									],
									[
										134344,
										134347
									],
									[
										134539,
										134542
									],
									[
										134647,
										134650
									],
									[
										134928,
										134931
									],
									[
										135205,
										135208
									],
									[
										135471,
										135474
									],
									[
										135601,
										135604
									],
									[
										135882,
										135885
									],
									[
										135987,
										135990
									],
									[
										136141,
										136144
									],
									[
										136270,
										136273
									],
									[
										136521,
										136524
									],
									[
										136621,
										136624
									],
									[
										136902,
										136905
									],
									[
										137163,
										137166
									],
									[
										137397,
										137400
									],
									[
										137523,
										137526
									],
									[
										137763,
										137766
									],
									[
										138050,
										138053
									],
									[
										138268,
										138271
									],
									[
										138606,
										138609
									],
									[
										138888,
										138891
									],
									[
										139271,
										139274
									],
									[
										139572,
										139575
									],
									[
										139818,
										139821
									],
									[
										140019,
										140022
									],
									[
										140302,
										140305
									],
									[
										140548,
										140551
									],
									[
										140826,
										140829
									],
									[
										141059,
										141062
									],
									[
										141113,
										141116
									],
									[
										141166,
										141169
									],
									[
										141392,
										141395
									],
									[
										141721,
										141724
									],
									[
										142100,
										142103
									],
									[
										142195,
										142198
									],
									[
										142442,
										142445
									],
									[
										142737,
										142740
									],
									[
										143126,
										143129
									],
									[
										143365,
										143368
									],
									[
										143399,
										143402
									],
									[
										143591,
										143594
									],
									[
										143930,
										143933
									],
									[
										144143,
										144146
									],
									[
										144445,
										144448
									],
									[
										144599,
										144602
									],
									[
										144838,
										144841
									],
									[
										145031,
										145034
									],
									[
										145296,
										145299
									],
									[
										145541,
										145544
									],
									[
										145778,
										145781
									],
									[
										146070,
										146073
									],
									[
										146384,
										146387
									],
									[
										146729,
										146732
									],
									[
										146816,
										146819
									],
									[
										147009,
										147012
									],
									[
										147300,
										147303
									],
									[
										147672,
										147675
									],
									[
										147825,
										147828
									],
									[
										148118,
										148121
									],
									[
										148524,
										148527
									],
									[
										148848,
										148851
									],
									[
										149003,
										149006
									],
									[
										149374,
										149377
									],
									[
										149721,
										149724
									],
									[
										150100,
										150103
									],
									[
										150442,
										150445
									],
									[
										150573,
										150576
									],
									[
										150838,
										150841
									],
									[
										151062,
										151065
									],
									[
										151341,
										151344
									],
									[
										151375,
										151378
									],
									[
										151569,
										151572
									],
									[
										151806,
										151809
									],
									[
										151868,
										151871
									],
									[
										151937,
										151940
									],
									[
										152093,
										152096
									],
									[
										152271,
										152274
									],
									[
										152585,
										152588
									],
									[
										152808,
										152811
									],
									[
										153108,
										153111
									],
									[
										153320,
										153323
									],
									[
										153356,
										153359
									],
									[
										153539,
										153542
									],
									[
										153603,
										153606
									],
									[
										153643,
										153646
									],
									[
										153847,
										153850
									],
									[
										154157,
										154160
									],
									[
										154485,
										154488
									],
									[
										154567,
										154570
									],
									[
										154612,
										154615
									],
									[
										154814,
										154817
									],
									[
										155053,
										155056
									],
									[
										155305,
										155308
									],
									[
										155386,
										155389
									],
									[
										155531,
										155534
									],
									[
										155697,
										155700
									],
									[
										156000,
										156003
									],
									[
										156110,
										156113
									],
									[
										156202,
										156205
									],
									[
										156302,
										156305
									],
									[
										156482,
										156485
									],
									[
										156637,
										156640
									],
									[
										156765,
										156768
									],
									[
										156831,
										156834
									],
									[
										157108,
										157111
									],
									[
										157304,
										157307
									],
									[
										157673,
										157676
									],
									[
										157887,
										157890
									],
									[
										158145,
										158148
									],
									[
										158257,
										158260
									],
									[
										158491,
										158494
									],
									[
										158557,
										158560
									],
									[
										158855,
										158858
									],
									[
										158921,
										158924
									],
									[
										159427,
										159430
									],
									[
										159506,
										159509
									],
									[
										159724,
										159727
									],
									[
										159793,
										159796
									],
									[
										160094,
										160097
									],
									[
										160296,
										160299
									],
									[
										160469,
										160472
									],
									[
										160632,
										160635
									],
									[
										160935,
										160938
									],
									[
										161201,
										161204
									],
									[
										161497,
										161500
									],
									[
										161719,
										161722
									],
									[
										161981,
										161984
									],
									[
										162169,
										162172
									],
									[
										162418,
										162421
									],
									[
										162659,
										162662
									],
									[
										162694,
										162697
									],
									[
										162962,
										162965
									],
									[
										163121,
										163124
									],
									[
										163324,
										163327
									],
									[
										163380,
										163383
									],
									[
										163739,
										163742
									],
									[
										163950,
										163953
									],
									[
										164188,
										164191
									],
									[
										164458,
										164461
									],
									[
										164598,
										164601
									],
									[
										164678,
										164681
									],
									[
										164908,
										164911
									],
									[
										164997,
										165000
									],
									[
										165273,
										165276
									],
									[
										165348,
										165351
									],
									[
										165522,
										165525
									],
									[
										165658,
										165661
									],
									[
										165740,
										165743
									],
									[
										165794,
										165797
									],
									[
										165970,
										165973
									],
									[
										166237,
										166240
									],
									[
										166351,
										166354
									],
									[
										166460,
										166463
									],
									[
										166559,
										166562
									],
									[
										166702,
										166705
									],
									[
										166857,
										166860
									],
									[
										167019,
										167022
									],
									[
										167346,
										167349
									],
									[
										167408,
										167411
									],
									[
										167871,
										167874
									],
									[
										168101,
										168104
									],
									[
										168390,
										168393
									],
									[
										168774,
										168777
									],
									[
										169172,
										169175
									],
									[
										169234,
										169237
									],
									[
										169646,
										169649
									],
									[
										169945,
										169948
									],
									[
										170201,
										170204
									],
									[
										170501,
										170504
									],
									[
										170563,
										170566
									],
									[
										170919,
										170922
									],
									[
										171103,
										171106
									],
									[
										171289,
										171292
									],
									[
										171343,
										171346
									],
									[
										171433,
										171436
									],
									[
										171619,
										171622
									],
									[
										171864,
										171867
									],
									[
										172053,
										172056
									],
									[
										172155,
										172158
									],
									[
										172415,
										172418
									],
									[
										172572,
										172575
									],
									[
										172953,
										172956
									],
									[
										173238,
										173241
									],
									[
										173429,
										173432
									],
									[
										173675,
										173678
									],
									[
										173922,
										173925
									],
									[
										174187,
										174190
									],
									[
										174242,
										174245
									],
									[
										174312,
										174315
									],
									[
										174383,
										174386
									],
									[
										174455,
										174458
									],
									[
										174534,
										174537
									],
									[
										174583,
										174586
									],
									[
										174928,
										174931
									],
									[
										175047,
										175050
									],
									[
										175280,
										175283
									],
									[
										175512,
										175515
									],
									[
										175805,
										175808
									],
									[
										176035,
										176038
									],
									[
										176091,
										176094
									],
									[
										176334,
										176337
									],
									[
										176676,
										176679
									],
									[
										176882,
										176885
									],
									[
										177222,
										177225
									],
									[
										177253,
										177256
									],
									[
										177424,
										177427
									],
									[
										177658,
										177661
									],
									[
										177861,
										177864
									],
									[
										178069,
										178072
									],
									[
										178260,
										178263
									],
									[
										178420,
										178423
									],
									[
										178601,
										178604
									],
									[
										178771,
										178774
									],
									[
										178956,
										178959
									],
									[
										179161,
										179164
									],
									[
										179372,
										179375
									],
									[
										179533,
										179536
									],
									[
										179702,
										179705
									],
									[
										179927,
										179930
									],
									[
										180139,
										180142
									],
									[
										180343,
										180346
									],
									[
										180624,
										180627
									],
									[
										180663,
										180666
									],
									[
										180873,
										180876
									],
									[
										181106,
										181109
									],
									[
										181145,
										181148
									],
									[
										181313,
										181316
									],
									[
										181510,
										181513
									],
									[
										181671,
										181674
									],
									[
										181848,
										181851
									],
									[
										181950,
										181953
									],
									[
										182113,
										182116
									],
									[
										182300,
										182303
									],
									[
										182489,
										182492
									],
									[
										182652,
										182655
									],
									[
										182754,
										182757
									],
									[
										182953,
										182956
									],
									[
										183077,
										183080
									],
									[
										183343,
										183346
									],
									[
										183377,
										183380
									],
									[
										183540,
										183543
									],
									[
										183706,
										183709
									],
									[
										183967,
										183970
									],
									[
										184203,
										184206
									],
									[
										184346,
										184349
									],
									[
										184608,
										184611
									],
									[
										184844,
										184847
									],
									[
										185006,
										185009
									],
									[
										185060,
										185063
									],
									[
										185149,
										185152
									],
									[
										185365,
										185368
									],
									[
										185594,
										185597
									],
									[
										185896,
										185899
									],
									[
										186086,
										186089
									],
									[
										186359,
										186362
									],
									[
										186538,
										186541
									],
									[
										186841,
										186844
									],
									[
										186903,
										186906
									],
									[
										187272,
										187275
									],
									[
										187362,
										187365
									],
									[
										187420,
										187423
									],
									[
										187618,
										187621
									],
									[
										187917,
										187920
									],
									[
										188243,
										188246
									],
									[
										188327,
										188330
									],
									[
										188476,
										188479
									],
									[
										188634,
										188637
									],
									[
										188746,
										188749
									],
									[
										188869,
										188872
									],
									[
										189184,
										189187
									],
									[
										189358,
										189361
									],
									[
										189638,
										189641
									],
									[
										189707,
										189710
									],
									[
										189871,
										189874
									],
									[
										190013,
										190016
									],
									[
										190275,
										190278
									],
									[
										190524,
										190527
									],
									[
										190744,
										190747
									],
									[
										190935,
										190938
									],
									[
										191014,
										191017
									],
									[
										191408,
										191411
									],
									[
										191706,
										191709
									],
									[
										191892,
										191895
									],
									[
										192025,
										192028
									],
									[
										192187,
										192190
									],
									[
										192411,
										192414
									],
									[
										192548,
										192551
									],
									[
										192820,
										192823
									],
									[
										192927,
										192930
									],
									[
										193109,
										193112
									],
									[
										193407,
										193410
									],
									[
										193608,
										193611
									],
									[
										193838,
										193841
									],
									[
										194081,
										194084
									],
									[
										194379,
										194382
									],
									[
										194697,
										194700
									],
									[
										194995,
										194998
									],
									[
										195209,
										195212
									],
									[
										195247,
										195250
									],
									[
										195490,
										195493
									],
									[
										195973,
										195976
									],
									[
										196228,
										196231
									],
									[
										196487,
										196490
									],
									[
										196687,
										196690
									],
									[
										196760,
										196763
									],
									[
										196972,
										196975
									],
									[
										197313,
										197316
									],
									[
										197544,
										197547
									],
									[
										197947,
										197950
									],
									[
										198112,
										198115
									],
									[
										198281,
										198284
									],
									[
										198505,
										198508
									],
									[
										198605,
										198608
									],
									[
										198956,
										198959
									],
									[
										199036,
										199039
									],
									[
										199193,
										199196
									],
									[
										199331,
										199334
									],
									[
										199403,
										199406
									],
									[
										199445,
										199448
									],
									[
										199460,
										199463
									],
									[
										199704,
										199707
									],
									[
										199784,
										199787
									],
									[
										199847,
										199850
									],
									[
										200078,
										200081
									],
									[
										200215,
										200218
									],
									[
										200232,
										200235
									],
									[
										200313,
										200316
									],
									[
										200367,
										200370
									],
									[
										200385,
										200388
									],
									[
										200496,
										200499
									],
									[
										200636,
										200639
									],
									[
										200740,
										200743
									],
									[
										200825,
										200828
									],
									[
										201029,
										201032
									],
									[
										201071,
										201074
									],
									[
										201209,
										201212
									],
									[
										201368,
										201371
									],
									[
										201607,
										201610
									],
									[
										201638,
										201641
									],
									[
										201669,
										201672
									],
									[
										201829,
										201832
									],
									[
										202151,
										202154
									],
									[
										202326,
										202329
									],
									[
										202534,
										202537
									],
									[
										202798,
										202801
									],
									[
										202865,
										202868
									],
									[
										202940,
										202943
									],
									[
										203007,
										203010
									],
									[
										203072,
										203075
									],
									[
										203137,
										203140
									],
									[
										203202,
										203205
									],
									[
										203267,
										203270
									],
									[
										203342,
										203345
									],
									[
										203431,
										203434
									],
									[
										203531,
										203534
									],
									[
										203620,
										203623
									],
									[
										203708,
										203711
									],
									[
										203796,
										203799
									],
									[
										203861,
										203864
									],
									[
										203933,
										203936
									],
									[
										204077,
										204080
									],
									[
										204327,
										204330
									],
									[
										204427,
										204430
									],
									[
										204534,
										204537
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								6453,
								6453
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1181.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "ethereum/slogging.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10699,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								8390,
								8381
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4330.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/D/MyCode/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/User/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35255,
						"regions":
						{
						},
						"selection":
						[
							[
								11374,
								11357
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 5953.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "ethereum/pow/chain.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21310,
						"regions":
						{
						},
						"selection":
						[
							[
								787,
								787
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "ethereum/full_casper/casper_utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12490,
						"regions":
						{
						},
						"selection":
						[
							[
								1066,
								1066
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 155.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "ethereum/state.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18964,
						"regions":
						{
						},
						"selection":
						[
							[
								8542,
								8542
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 3912.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 114.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "pyethereum-develop.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 76.0,
		"last_filter": "debug",
		"selected_items":
		[
			[
				"debug",
				"debug"
			]
		],
		"width": 434.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
