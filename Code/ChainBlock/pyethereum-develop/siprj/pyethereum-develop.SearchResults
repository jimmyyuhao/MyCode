---- root_hash Matches (85 in 17 files) ----
Chain.py (ethereum\pow):        state.trie.root_hash = block.header.state_root
Common.py (ethereum):    block.header.state_root = state.trie.root_hash
Common.py (ethereum):    if block.header.state_root != state.trie.root_hash:
Common.py (ethereum):                         (encode_hex(block.header.state_root), encode_hex(state.trie.root_hash)))
Common.py (ethereum):    return t.root_hash
Fast_rlp.py (ethereum):        return x.root_hash
Genesis_helpers.py (ethereum):    block.header.state_root = state.trie.root_hash
Genesis_helpers.py (ethereum):    db.put(b'state:' + genesis.header.hash, state.trie.root_hash)
Messages.py (ethereum):    return Receipt(state.trie.root_hash, state.gas_used, logs)
New_state.py (ethereum):        self.storage_trie.root_hash = self.storage
New_state.py (ethereum):        self.storage = self.storage_trie.root_hash
New_state.py (ethereum):        return (self.trie.root_hash, len(self.journal), {k: copy.copy(getattr(self, k)) for k in STATE_DEFAULTS})
New_state.py (ethereum):        if h != self.trie.root_hash:
New_state.py (ethereum):            self.trie.root_hash = h
New_state.py (ethereum):        pre_root = acct.storage_trie.root_hash
New_state.py (ethereum):        self.journal.append(lambda: setattr(acct.storage_trie, 'root_hash', pre_root))
New_state.py (ethereum):        acct.storage_trie.root_hash = BLANK_ROOT
New_state.py (ethereum):            snapshot["state_root"] = '0x'+encode_hex(self.trie.root_hash)
New_state.py (ethereum):            state.trie.root_hash = parse_as_bin(snapshot_data["state_root"])
New_statetest_utils.py (ethereum\tools):        "hash": '0x' + encode_hex(state.trie.root_hash),
Pruning_trie.py (ethereum\experimental):    def __init__(self, db, root_hash=BLANK_ROOT, transient=False):
Pruning_trie.py (ethereum\experimental):        self.set_root_hash(root_hash)
Pruning_trie.py (ethereum\experimental):    # def __init__(self, dbfile, root_hash=BLANK_ROOT):
Pruning_trie.py (ethereum\experimental):    #     self.set_root_hash(root_hash)
Pruning_trie.py (ethereum\experimental):    def root_hash(self):
Pruning_trie.py (ethereum\experimental):        # sys.stderr.write('nrh: %s\n' % encode_hex(self.root_hash))
Pruning_trie.py (ethereum\experimental):    @root_hash.setter
Pruning_trie.py (ethereum\experimental):    def root_hash(self, value):
Pruning_trie.py (ethereum\experimental):    def set_root_hash(self, root_hash):
Pruning_trie.py (ethereum\experimental):        assert is_string(root_hash)
Pruning_trie.py (ethereum\experimental):        assert len(root_hash) in [0, 32]
Pruning_trie.py (ethereum\experimental):            self.transient_root_hash = root_hash
Pruning_trie.py (ethereum\experimental):        if root_hash == BLANK_ROOT:
Pruning_trie.py (ethereum\experimental):        # print(repr(root_hash))
Pruning_trie.py (ethereum\experimental):        self.root_node = self._decode_to_node(root_hash)
Pruning_trie.py (ethereum\experimental):        if self.root_hash == BLANK_ROOT:
Pruning_trie.py (ethereum\experimental):        return self.root_hash in self.db
Pruning_trie.py (ethereum\experimental):        t.root_hash = root
Pruning_trie.py (ethereum\experimental):            print(encode_node(t.root_hash))
Securetrie.py (ethereum):    def root_hash(self):
Securetrie.py (ethereum):        return self.trie.root_hash
Securetrie.py (ethereum):    @root_hash.setter
Securetrie.py (ethereum):    def root_hash(self, value):
Securetrie.py (ethereum):        self.trie.root_hash = value
Snapshot.py (ethereum):    assert trie.root_hash == base_header.state_root
Snapshot.py (ethereum):            acct.storage = t.root_hash
State.py (ethereum):        self.storage_trie.root_hash = self.storage
State.py (ethereum):        self.storage = self.storage_trie.root_hash
State.py (ethereum):        return (self.trie.root_hash, len(self.journal), {k: copy.copy(getattr(self, k)) for k in STATE_DEFAULTS})
State.py (ethereum):        if h != self.trie.root_hash:
State.py (ethereum):            self.trie.root_hash = h
State.py (ethereum):        pre_root = acct.storage_trie.root_hash
State.py (ethereum):        self.journal.append(lambda: setattr(acct.storage_trie, 'root_hash', pre_root))
State.py (ethereum):        acct.storage_trie.root_hash = BLANK_ROOT
State.py (ethereum):            snapshot["state_root"] = '0x'+encode_hex(self.trie.root_hash)
State.py (ethereum):            state.trie.root_hash = parse_as_bin(snapshot_data["state_root"])
Tester.py (ethereum\tools):    postStateHash = '0x' + encode_hex(c.head_state.trie.root_hash)
Test_blocks.py (ethereum\tests):    assert c.state.trie.root_hash == safe_decode(params["genesisBlockHeader"]["stateRoot"])
Test_pruning_trie.py (ethereum\todo_tests):    x = t1.root_hash
Test_pruning_trie.py (ethereum\todo_tests):    t1.root_hash = x
Test_pruning_trie.py (ethereum\todo_tests):    t2.root_hash = t1.root_hash
Test_pruning_trie.py (ethereum\todo_tests):    print(utils.encode_hex(t1.root_hash))
Test_pruning_trie.py (ethereum\todo_tests):    t3.root_hash = t2.root_hash
Test_pruning_trie.py (ethereum\todo_tests):    print(utils.encode_hex(t1.root_hash))
Test_pruning_trie.py (ethereum\todo_tests):    t3.root_hash = t2.root_hash
Test_pruning_trie.py (ethereum\todo_tests):        assert pairs['root'] == b'0x' + utils.encode_hex(t.root_hash), (i, list(permut) + deletes)
Test_trie.py (ethereum\tests):        if pairs['root'] != '0x' + encode_hex(t.root_hash):
Test_trie.py (ethereum\tests):                name, pairs['root'], '0x' + encode_hex(t.root_hash), (i, list(permut) + deletes)))
Trie.py (ethereum):    def __init__(self, db, root_hash=BLANK_ROOT):
Trie.py (ethereum):        self.set_root_hash(root_hash)
Trie.py (ethereum):    # def __init__(self, dbfile, root_hash=BLANK_ROOT):
Trie.py (ethereum):    #     self.set_root_hash(root_hash)
Trie.py (ethereum):    def root_hash(self):
Trie.py (ethereum):    @root_hash.setter
Trie.py (ethereum):    def root_hash(self, value):
Trie.py (ethereum):    def set_root_hash(self, root_hash):
Trie.py (ethereum):        assert is_string(root_hash)
Trie.py (ethereum):        assert len(root_hash) in [0, 32]
Trie.py (ethereum):        if root_hash == BLANK_ROOT:
Trie.py (ethereum):        self.root_node = self._decode_to_node(root_hash)
Trie.py (ethereum):        self._root_hash = root_hash
Trie.py (ethereum):        if self.root_hash == BLANK_ROOT:
Trie.py (ethereum):        return self.root_hash in self.db
Trie.py (ethereum):            print(encode_node(t.root_hash))
Tst_frontier.py (ethereum\todo_tests):    assert c.state.trie.root_hash.encode('hex') == \
