DistributionNotFound	ethereum\__init__.py	/^    DistributionNotFound = Exception$/;"	v
DistributionNotFound	ethereum\__init__.py	/^    from pkg_resources import get_distribution, DistributionNotFound$/;"	i
GIT_DESCRIBE_RE	ethereum\__init__.py	/^GIT_DESCRIBE_RE = re.compile('^(?P<version>v\\d+\\.\\d+\\.\\d+)-(?P<git>\\d+-g[a-fA-F0-9]+(?:-dirty)?)$')$/;"	v
__version__	ethereum\__init__.py	/^            __version__ = "{}+git-{}".format(match.group("version"), match.group("git"))$/;"	v
__version__	ethereum\__init__.py	/^    __version__ = 'undefined'$/;"	v
__version__	ethereum\__init__.py	/^    __version__ = _dist.version$/;"	v
__version__	ethereum\__init__.py	/^__version__ = None$/;"	v
_dist	ethereum\__init__.py	/^    _dist = get_distribution('pyethapp')$/;"	v
dist_loc	ethereum\__init__.py	/^    dist_loc = os.path.normcase(_dist.location)$/;"	v
get_distribution	ethereum\__init__.py	/^    from pkg_resources import get_distribution, DistributionNotFound$/;"	i
here	ethereum\__init__.py	/^    here = os.path.normcase(__file__)$/;"	v
match	ethereum\__init__.py	/^        match = GIT_DESCRIBE_RE.match(rev)$/;"	v
noqa	ethereum\__init__.py	/^from . import slogging  # noqa$/;"	i
os	ethereum\__init__.py	/^import os.path$/;"	i
path	ethereum\__init__.py	/^import os.path$/;"	i
re	ethereum\__init__.py	/^import re$/;"	i
rev	ethereum\__init__.py	/^        rev = subprocess.check_output(['git', 'describe', '--tags', '--dirty'],$/;"	v
slogging	ethereum\__init__.py	/^from . import slogging  # noqa$/;"	i
stderr	ethereum\__init__.py	/^                                      stderr=subprocess.STDOUT)$/;"	v
subprocess	ethereum\__init__.py	/^import subprocess$/;"	i
ContractTranslator	ethereum\abi.py	/^class ContractTranslator(object):$/;"	c
EncodingError	ethereum\abi.py	/^class EncodingError(Exception):$/;"	c
INT256	ethereum\abi.py	/^INT256 = 'uint', '256', []$/;"	v
TT255	ethereum\abi.py	/^from ethereum.utils import TT256, TT255$/;"	i
TT256	ethereum\abi.py	/^from ethereum.utils import TT256, TT255$/;"	i
ValueOutOfBounds	ethereum\abi.py	/^class ValueOutOfBounds(EncodingError):$/;"	c
__init__	ethereum\abi.py	/^    def __init__(self, contract_interface):$/;"	m	class:ContractTranslator
_canonical_type	ethereum\abi.py	/^def _canonical_type(name):  # pylint: disable=too-many-return-statements$/;"	f
ascii	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
ast	ethereum\abi.py	/^import ast$/;"	i
data	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
dec	ethereum\abi.py	/^def dec(typ, arg):$/;"	f
decint	ethereum\abi.py	/^def decint(n, signed=False):  # pylint: disable=invalid-name,too-many-branches$/;"	f
decode	ethereum\abi.py	/^    def decode(self, function_name, data):$/;"	m	class:ContractTranslator
decode_abi	ethereum\abi.py	/^def decode_abi(types, data):$/;"	f
decode_event	ethereum\abi.py	/^    def decode_event(self, log_topics, log_data):$/;"	m	class:ContractTranslator
decode_function_result	ethereum\abi.py	/^    def decode_function_result(self, function_name, data):$/;"	m	class:ContractTranslator
decode_hex	ethereum\abi.py	/^from rlp.utils import decode_hex$/;"	i
decode_single	ethereum\abi.py	/^def decode_single(typ, data):$/;"	f
enc	ethereum\abi.py	/^def enc(typ, arg):$/;"	f
encode	ethereum\abi.py	/^    def encode(self, function_name, args):$/;"	m	class:ContractTranslator
encode_abi	ethereum\abi.py	/^def encode_abi(types, args):$/;"	f
encode_constructor_arguments	ethereum\abi.py	/^    def encode_constructor_arguments(self, args):$/;"	m	class:ContractTranslator
encode_function_call	ethereum\abi.py	/^    def encode_function_call(self, function_name, args):$/;"	m	class:ContractTranslator
encode_hex	ethereum\abi.py	/^from ethereum.utils import encode_hex$/;"	i
encode_single	ethereum\abi.py	/^def encode_single(typ, arg):  # pylint: disable=too-many-return-statements,too-many-branches,too-many-statements,too-many-locals$/;"	f
event_id	ethereum\abi.py	/^def event_id(name, encode_types):$/;"	f
get	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
get_size	ethereum\abi.py	/^def get_size(typ):$/;"	f
instead	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
json	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
json_decode	ethereum\abi.py	/^def json_decode(data):$/;"	f
lentyp	ethereum\abi.py	/^lentyp = INT256  # pylint: disable=invalid-name$/;"	v
listen	ethereum\abi.py	/^    def listen(self, log, noprint=True):$/;"	m	class:ContractTranslator
method_id	ethereum\abi.py	/^def method_id(name, encode_types):$/;"	f
non	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
normalize_name	ethereum\abi.py	/^def normalize_name(name):$/;"	f
of	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
only	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
print_function	ethereum\abi.py	/^from __future__ import print_function$/;"	i
process_type	ethereum\abi.py	/^def process_type(typ):$/;"	f
re	ethereum\abi.py	/^import re$/;"	i
split32	ethereum\abi.py	/^def split32(data):$/;"	f
to	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
unicode	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
use	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
utils	ethereum\abi.py	/^from ethereum import utils$/;"	i
warnings	ethereum\abi.py	/^import warnings$/;"	i
with	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
works	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
yaml	ethereum\abi.py	/^import yaml  # use yaml instead of json to get non unicode (works with ascii only data)$/;"	i
BLANK_UNCLES_HASH	ethereum\block.py	/^BLANK_UNCLES_HASH = sha3(rlp.encode([]))$/;"	v
BaseDB	ethereum\block.py	/^from ethereum.db import BaseDB$/;"	i
Binary	ethereum\block.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
Block	ethereum\block.py	/^class Block(rlp.Serializable):$/;"	c
BlockHeader	ethereum\block.py	/^class BlockHeader(rlp.Serializable):$/;"	c
CountableList	ethereum\block.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
FakeHeader	ethereum\block.py	/^class FakeHeader():$/;"	c
SecureTrie	ethereum\block.py	/^from ethereum.securetrie import SecureTrie$/;"	i
Transaction	ethereum\block.py	/^from ethereum.transactions import Transaction$/;"	i
Trie	ethereum\block.py	/^from ethereum.trie import Trie$/;"	i
__eq__	ethereum\block.py	/^    def __eq__(self, other):$/;"	m	class:BlockHeader	file:
__getattribute__	ethereum\block.py	/^    def __getattribute__(self, name):$/;"	m	class:Block	file:
__hash__	ethereum\block.py	/^    def __hash__(self):$/;"	m	class:BlockHeader	file:
__init__	ethereum\block.py	/^    def __init__(self, hash='\\x00' * 32, number=0, timestamp=0, difficulty=1, gas_limit=3141592, gas_used=0, uncles_hash=BLANK_UNCLES_HASH):$/;"	m	class:FakeHeader
__init__	ethereum\block.py	/^    def __init__(self, header, transactions=None, uncles=None, db=None):$/;"	m	class:Block
__init__	ethereum\block.py	/^    def __init__(self,$/;"	m	class:BlockHeader
__ne__	ethereum\block.py	/^    def __ne__(self, other):$/;"	m	class:BlockHeader	file:
__repr__	ethereum\block.py	/^    def __repr__(self):$/;"	m	class:BlockHeader	file:
address	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
big_endian_int	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
big_endian_int	ethereum\block.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
binary	ethereum\block.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
decode_hex	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
default_config	ethereum\block.py	/^from ethereum.config import default_config$/;"	i
encode_hex	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
encode_int	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
fields	ethereum\block.py	/^    fields = [$/;"	v	class:Block
fields	ethereum\block.py	/^    fields = [$/;"	v	class:BlockHeader
hash	ethereum\block.py	/^    def hash(self):$/;"	m	class:BlockHeader
hash32	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
hex_hash	ethereum\block.py	/^    def hex_hash(self):$/;"	m	class:BlockHeader
int256	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
lru_cache	ethereum\block.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\block.py	/^    from repoze.lru import lru_cache$/;"	i
mining_hash	ethereum\block.py	/^    def mining_hash(self):$/;"	m	class:BlockHeader
normalize_address	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
rlp	ethereum\block.py	/^import rlp$/;"	i
sha3	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
signing_hash	ethereum\block.py	/^    def signing_hash(self):$/;"	m	class:BlockHeader
sys	ethereum\block.py	/^import sys$/;"	i
to_dict	ethereum\block.py	/^    def to_dict(self):$/;"	m	class:BlockHeader
transaction_count	ethereum\block.py	/^    def transaction_count(self):$/;"	m	class:Block
trie	ethereum\block.py	/^from ethereum import trie$/;"	i
trie_root	ethereum\block.py	/^    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3$/;"	i
utils	ethereum\block.py	/^from ethereum import utils$/;"	i
BUCKETS_PER_VAL	ethereum\bloom.py	/^BUCKETS_PER_VAL = 3$/;"	v
b64	ethereum\bloom.py	/^def b64(int_bloom):$/;"	f
bits_in_number	ethereum\bloom.py	/^def bits_in_number(val):$/;"	f
bloom	ethereum\bloom.py	/^def bloom(val):$/;"	f
bloom_bits	ethereum\bloom.py	/^def bloom_bits(val):$/;"	f
bloom_combine	ethereum\bloom.py	/^def bloom_combine(*args):$/;"	f
bloom_from_list	ethereum\bloom.py	/^def bloom_from_list(args):$/;"	f
bloom_insert	ethereum\bloom.py	/^def bloom_insert(bloom, val):$/;"	f
bloom_query	ethereum\bloom.py	/^def bloom_query(bloom, val):$/;"	f
is_numeric	ethereum\bloom.py	/^from ethereum.abi import is_numeric$/;"	i
safe_ord	ethereum\bloom.py	/^from ethereum.utils import safe_ord$/;"	i
utils	ethereum\bloom.py	/^from ethereum import utils$/;"	i
L	ethereum\child_dao_list.py	/^L = []$/;"	v
encode_hex	ethereum\child_dao_list.py	/^from ethereum.utils import mk_contract_address, encode_hex$/;"	i
mk_contract_address	ethereum\child_dao_list.py	/^from ethereum.utils import mk_contract_address, encode_hex$/;"	i
source	ethereum\child_dao_list.py	/^source = '0x4a574510c7014e4ae985403536074abe582adfc8'$/;"	v
Block	ethereum\common.py	/^from ethereum.block import Block, BlockHeader$/;"	i
BlockGasLimitReached	ethereum\common.py	/^    InsufficientStartGas, InvalidNonce, UnsignedTransaction$/;"	i
BlockHeader	ethereum\common.py	/^from ethereum.block import Block, BlockHeader$/;"	i
EphemDB	ethereum\common.py	/^from ethereum.db import EphemDB$/;"	i
InsufficientBalance	ethereum\common.py	/^    InsufficientStartGas, InvalidNonce, UnsignedTransaction$/;"	i
InsufficientStartGas	ethereum\common.py	/^    InsufficientStartGas, InvalidNonce, UnsignedTransaction$/;"	i
InvalidNonce	ethereum\common.py	/^    InsufficientStartGas, InvalidNonce, UnsignedTransaction$/;"	i
SKIP_RECEIPT_ROOT_VALIDATION	ethereum\common.py	/^SKIP_RECEIPT_ROOT_VALIDATION = False$/;"	v
UnsignedTransaction	ethereum\common.py	/^    InsufficientStartGas, InvalidNonce, UnsignedTransaction$/;"	i
add_transactions	ethereum\common.py	/^def add_transactions(state, block, txqueue, min_gasprice=0):$/;"	f
apply_transaction	ethereum\common.py	/^from ethereum.messages import apply_transaction$/;"	i
calc_difficulty	ethereum\common.py	/^def calc_difficulty(parent, timestamp, config=default_config):$/;"	f
calc_gaslimit	ethereum\common.py	/^def calc_gaslimit(parent, config=default_config):$/;"	f
check_gaslimit	ethereum\common.py	/^def check_gaslimit(parent, gas_limit, config=default_config):$/;"	f
default_config	ethereum\common.py	/^from ethereum.config import default_config$/;"	i
encode_hex	ethereum\common.py	/^from ethereum.utils import sha3, encode_hex$/;"	i
get_logger	ethereum\common.py	/^from ethereum.slogging import get_logger$/;"	i
log	ethereum\common.py	/^log = get_logger('eth.block')$/;"	v
mk_block_from_prevstate	ethereum\common.py	/^def mk_block_from_prevstate(chain, state=None, timestamp=None, coinbase=b'\\x35'*20, extra_data='moo ha ha says the laughing cow.'):$/;"	f
mk_receipt_sha	ethereum\common.py	/^def mk_receipt_sha(receipts):$/;"	f
mk_transaction_sha	ethereum\common.py	/^mk_transaction_sha = mk_receipt_sha$/;"	v
post_finalize	ethereum\common.py	/^def post_finalize(state, block):$/;"	f
rlp	ethereum\common.py	/^import rlp$/;"	i
set_execution_results	ethereum\common.py	/^def set_execution_results(state, block):$/;"	f
sha3	ethereum\common.py	/^from ethereum.utils import sha3, encode_hex$/;"	i
trie	ethereum\common.py	/^from ethereum import trie$/;"	i
update_block_env_variables	ethereum\common.py	/^def update_block_env_variables(state, block):$/;"	f
validate_header	ethereum\common.py	/^def validate_header(state, header):$/;"	f
validate_transaction_tree	ethereum\common.py	/^def validate_transaction_tree(state, block):$/;"	f
verify_execution_results	ethereum\common.py	/^def verify_execution_results(state, block):$/;"	f
NULLSHA3	ethereum\compress.py	/^NULLSHA3 = decode_hex('c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470')$/;"	v
ascii_chr	ethereum\compress.py	/^from rlp.utils import decode_hex, ascii_chr$/;"	i
compress	ethereum\compress.py	/^def compress(data):$/;"	f
decode_hex	ethereum\compress.py	/^from rlp.utils import decode_hex, ascii_chr$/;"	i
decompress	ethereum\compress.py	/^def decompress(data):$/;"	f
int_to_bytes	ethereum\compress.py	/^from ethereum.utils import safe_ord, int_to_bytes$/;"	i
safe_ord	ethereum\compress.py	/^from ethereum.utils import safe_ord, int_to_bytes$/;"	i
ACCOUNT_INITIAL_NONCE	ethereum\config.py	/^    ACCOUNT_INITIAL_NONCE=0,$/;"	v
ANTI_DOS_FORK_BLKNUM	ethereum\config.py	/^    ANTI_DOS_FORK_BLKNUM = 2463000,$/;"	v
BLKLIM_FACTOR_DEN	ethereum\config.py	/^    BLKLIM_FACTOR_DEN=2,$/;"	v
BLKLIM_FACTOR_NOM	ethereum\config.py	/^    BLKLIM_FACTOR_NOM=3,$/;"	v
BLOCK_DIFF_FACTOR	ethereum\config.py	/^    BLOCK_DIFF_FACTOR=2048,$/;"	v
BLOCK_GAS_LIMIT	ethereum\config.py	/^    BLOCK_GAS_LIMIT=4712388,$/;"	v
BLOCK_REWARD	ethereum\config.py	/^    BLOCK_REWARD=5000 * utils.denoms.finney,$/;"	v
BaseDB	ethereum\config.py	/^from ethereum.db import BaseDB, EphemDB$/;"	i
CHILD_DAO_LIST	ethereum\config.py	/^    CHILD_DAO_LIST=list(map(utils.normalize_address, child_dao_list)),$/;"	v
CONSENSUS_STRATEGY	ethereum\config.py	/^    CONSENSUS_STRATEGY = 'ethash',$/;"	v
CONTRACT_CODE_SIZE_LIMIT	ethereum\config.py	/^    CONTRACT_CODE_SIZE_LIMIT = 0x6000,$/;"	v
CUSTOM_SPECIALS	ethereum\config.py	/^    CUSTOM_SPECIALS = {},$/;"	v
DAO_FORK_BLKEXTRA	ethereum\config.py	/^    DAO_FORK_BLKEXTRA=decode_hex('64616f2d686172642d666f726b'),$/;"	v
DAO_FORK_BLKHASH	ethereum\config.py	/^    DAO_FORK_BLKHASH=decode_hex('4985f5ca3d2afbec36529aa96f74de3cc10a2a4a6c44f2157a57d2c6059a11bb'),$/;"	v
DAO_FORK_BLKNUM	ethereum\config.py	/^    DAO_FORK_BLKNUM=1920000,$/;"	v
DAO_WITHDRAWER	ethereum\config.py	/^    DAO_WITHDRAWER=utils.normalize_address('0xbf4ed7b27f1d666546e30d74d50d173d20bca754'),$/;"	v
DIFF_ADJUSTMENT_CUTOFF	ethereum\config.py	/^    DIFF_ADJUSTMENT_CUTOFF=13,$/;"	v
EXPDIFF_FREE_PERIODS	ethereum\config.py	/^    EXPDIFF_FREE_PERIODS=2,$/;"	v
EXPDIFF_PERIOD	ethereum\config.py	/^    EXPDIFF_PERIOD=100000,$/;"	v
Env	ethereum\config.py	/^class Env(object):$/;"	c
EphemDB	ethereum\config.py	/^from ethereum.db import BaseDB, EphemDB$/;"	i
GASLIMIT_ADJMAX_FACTOR	ethereum\config.py	/^    GASLIMIT_ADJMAX_FACTOR=1024,$/;"	v
GASLIMIT_EMA_FACTOR	ethereum\config.py	/^    GASLIMIT_EMA_FACTOR=1024,$/;"	v
GENESIS_COINBASE	ethereum\config.py	/^    GENESIS_COINBASE=b'\\x00' * 20,$/;"	v
GENESIS_DIFFICULTY	ethereum\config.py	/^    GENESIS_DIFFICULTY=131072,$/;"	v
GENESIS_EXTRA_DATA	ethereum\config.py	/^    GENESIS_EXTRA_DATA=b'',$/;"	v
GENESIS_GAS_LIMIT	ethereum\config.py	/^    GENESIS_GAS_LIMIT=3141592,$/;"	v
GENESIS_INITIAL_ALLOC	ethereum\config.py	/^    GENESIS_INITIAL_ALLOC={},$/;"	v
GENESIS_MIXHASH	ethereum\config.py	/^    GENESIS_MIXHASH=b'\\x00' * 32,$/;"	v
GENESIS_NONCE	ethereum\config.py	/^    GENESIS_NONCE=utils.zpad(utils.encode_int(42), 8),$/;"	v
GENESIS_PREVHASH	ethereum\config.py	/^    GENESIS_PREVHASH=b'\\x00' * 32,$/;"	v
GENESIS_TIMESTAMP	ethereum\config.py	/^    GENESIS_TIMESTAMP=0,$/;"	v
HOMESTEAD_DIFF_ADJUSTMENT_CUTOFF	ethereum\config.py	/^    HOMESTEAD_DIFF_ADJUSTMENT_CUTOFF=10,$/;"	v
HOMESTEAD_FORK_BLKNUM	ethereum\config.py	/^    HOMESTEAD_FORK_BLKNUM=1150000,$/;"	v
MAX_EXTRADATA_LENGTH	ethereum\config.py	/^    MAX_EXTRADATA_LENGTH=32,$/;"	v
MAX_GAS_LIMIT	ethereum\config.py	/^    MAX_GAS_LIMIT=2 ** 63 - 1,$/;"	v
MAX_UNCLES	ethereum\config.py	/^    MAX_UNCLES=2,$/;"	v
MAX_UNCLE_DEPTH	ethereum\config.py	/^    MAX_UNCLE_DEPTH=6,  # max (block.number - uncle.number)$/;"	v
METROPOLIS_BLOCKHASH_STORE	ethereum\config.py	/^    METROPOLIS_BLOCKHASH_STORE=0x20,$/;"	v
METROPOLIS_DIFF_ADJUSTMENT_CUTOFF	ethereum\config.py	/^    METROPOLIS_DIFF_ADJUSTMENT_CUTOFF=9,$/;"	v
METROPOLIS_ENTRY_POINT	ethereum\config.py	/^    METROPOLIS_ENTRY_POINT=2 ** 160 - 1,$/;"	v
METROPOLIS_FORK_BLKNUM	ethereum\config.py	/^    METROPOLIS_FORK_BLKNUM=2 ** 100,$/;"	v
METROPOLIS_GETTER_CODE	ethereum\config.py	/^    METROPOLIS_GETTER_CODE=decode_hex('6000355460205260206020f3'),$/;"	v
METROPOLIS_STATEROOT_STORE	ethereum\config.py	/^    METROPOLIS_STATEROOT_STORE=0x10,$/;"	v
METROPOLIS_WRAPAROUND	ethereum\config.py	/^    METROPOLIS_WRAPAROUND=65536,$/;"	v
MIN_DIFF	ethereum\config.py	/^    MIN_DIFF=131072,$/;"	v
MIN_GAS_LIMIT	ethereum\config.py	/^    MIN_GAS_LIMIT=5000,$/;"	v
NEPHEW_REWARD	ethereum\config.py	/^    NEPHEW_REWARD=5000 * utils.denoms.finney \/\/ 32,  # BLOCK_REWARD \/ 32$/;"	v
NETWORK_ID	ethereum\config.py	/^    NETWORK_ID=1,$/;"	v
POW_EPOCH_LENGTH	ethereum\config.py	/^    POW_EPOCH_LENGTH=30000,$/;"	v
PREV_HEADER_DEPTH	ethereum\config.py	/^    PREV_HEADER_DEPTH = 256,$/;"	v
SERENITY_FORK_BLKNUM	ethereum\config.py	/^    SERENITY_FORK_BLKNUM = 2**99,$/;"	v
SERENITY_GETTER_CODE	ethereum\config.py	/^    SERENITY_GETTER_CODE = decode_hex('60ff331436604014161560155760203560003555005b6000355460205260206020f3'),$/;"	v
SERENITY_HEADER_POST_FINALIZER	ethereum\config.py	/^    SERENITY_HEADER_POST_FINALIZER = utils.int_to_addr(254),$/;"	v
SERENITY_HEADER_VERIFIER	ethereum\config.py	/^    SERENITY_HEADER_VERIFIER = utils.int_to_addr(255),$/;"	v
SPURIOUS_DRAGON_FORK_BLKNUM	ethereum\config.py	/^    SPURIOUS_DRAGON_FORK_BLKNUM = 2675000,$/;"	v
SYSTEM_ENTRY_POINT	ethereum\config.py	/^    SYSTEM_ENTRY_POINT = utils.int_to_addr(2**160 - 2),$/;"	v
UNCLE_DEPTH_PENALTY_FACTOR	ethereum\config.py	/^    UNCLE_DEPTH_PENALTY_FACTOR=8,$/;"	v
__init__	ethereum\config.py	/^    def __init__(self, db=None, config=None, global_config=None):$/;"	m	class:Env
child_dao_list	ethereum\config.py	/^from ethereum.child_dao_list import L as child_dao_list$/;"	i
config_frontier	ethereum\config.py	/^config_frontier = copy.copy(default_config)$/;"	v
config_homestead	ethereum\config.py	/^config_homestead = copy.copy(default_config)$/;"	v
config_metropolis	ethereum\config.py	/^config_metropolis = copy.copy(default_config)$/;"	v
config_spurious	ethereum\config.py	/^config_spurious = copy.copy(default_config)$/;"	v
config_tangerine	ethereum\config.py	/^config_tangerine = copy.copy(default_config)$/;"	v
copy	ethereum\config.py	/^import copy$/;"	i
decode_hex	ethereum\config.py	/^from rlp.utils import decode_hex$/;"	i
default_config	ethereum\config.py	/^default_config = dict($/;"	v
utils	ethereum\config.py	/^from ethereum import utils$/;"	i
ConsensusStrategy	ethereum\consensus_strategy.py	/^class ConsensusStrategy(object):$/;"	c
__init__	ethereum\consensus_strategy.py	/^    def __init__(self, **kwargs):$/;"	m	class:ConsensusStrategy
check_pow	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncle_candidates$/;"	i
check_pow	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncles$/;"	i
finalize	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncle_candidates$/;"	i
finalize	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncles$/;"	i
get_consensus_strategy	ethereum\consensus_strategy.py	/^def get_consensus_strategy(config):$/;"	f
get_uncle_candidates	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncle_candidates$/;"	i
get_uncles	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncles$/;"	i
initialize	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncle_candidates$/;"	i
initialize	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncles$/;"	i
validate_uncles	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncle_candidates$/;"	i
validate_uncles	ethereum\consensus_strategy.py	/^            initialize, finalize, get_uncles$/;"	i
BaseDB	ethereum\db.py	/^class BaseDB(object):$/;"	c
ListeningDB	ethereum\db.py	/^class ListeningDB(BaseDB):$/;"	c
OverlayDB	ethereum\db.py	/^class OverlayDB(BaseDB):$/;"	c
RefcountDB	ethereum\db.py	/^class RefcountDB(BaseDB):$/;"	c
_EphemDB	ethereum\db.py	/^class _EphemDB(BaseDB):$/;"	c
__contains__	ethereum\db.py	/^    def __contains__(self, key):$/;"	m	class:ListeningDB	file:
__contains__	ethereum\db.py	/^    def __contains__(self, key):$/;"	m	class:OverlayDB	file:
__contains__	ethereum\db.py	/^    def __contains__(self, key):$/;"	m	class:RefcountDB	file:
__contains__	ethereum\db.py	/^    def __contains__(self, key):$/;"	m	class:_EphemDB	file:
__eq__	ethereum\db.py	/^    def __eq__(self, other):$/;"	m	class:ListeningDB	file:
__eq__	ethereum\db.py	/^    def __eq__(self, other):$/;"	m	class:OverlayDB	file:
__eq__	ethereum\db.py	/^    def __eq__(self, other):$/;"	m	class:RefcountDB	file:
__eq__	ethereum\db.py	/^    def __eq__(self, other):$/;"	m	class:_EphemDB	file:
__hash__	ethereum\db.py	/^    def __hash__(self):$/;"	m	class:ListeningDB	file:
__hash__	ethereum\db.py	/^    def __hash__(self):$/;"	m	class:OverlayDB	file:
__hash__	ethereum\db.py	/^    def __hash__(self):$/;"	m	class:RefcountDB	file:
__hash__	ethereum\db.py	/^    def __hash__(self):$/;"	m	class:_EphemDB	file:
__init__	ethereum\db.py	/^    def __init__(self):$/;"	m	class:_EphemDB
__init__	ethereum\db.py	/^    def __init__(self, db):$/;"	m	class:ListeningDB
__init__	ethereum\db.py	/^    def __init__(self, db):$/;"	m	class:OverlayDB
__init__	ethereum\db.py	/^    def __init__(self, db):$/;"	m	class:RefcountDB
_has_key	ethereum\db.py	/^    def _has_key(self, key):$/;"	m	class:ListeningDB
_has_key	ethereum\db.py	/^    def _has_key(self, key):$/;"	m	class:OverlayDB
_has_key	ethereum\db.py	/^    def _has_key(self, key):$/;"	m	class:RefcountDB
_has_key	ethereum\db.py	/^    def _has_key(self, key):$/;"	m	class:_EphemDB
add1	ethereum\db.py	/^def add1(b):$/;"	f
commit	ethereum\db.py	/^    def commit(self):$/;"	m	class:ListeningDB
commit	ethereum\db.py	/^    def commit(self):$/;"	m	class:OverlayDB
commit	ethereum\db.py	/^    def commit(self):$/;"	m	class:RefcountDB
commit	ethereum\db.py	/^    def commit(self):$/;"	m	class:_EphemDB
databases	ethereum\db.py	/^databases = {}$/;"	v
delete	ethereum\db.py	/^    def delete(self, key):$/;"	m	class:ListeningDB
delete	ethereum\db.py	/^    def delete(self, key):$/;"	m	class:OverlayDB
delete	ethereum\db.py	/^    def delete(self, key):$/;"	m	class:RefcountDB
delete	ethereum\db.py	/^    def delete(self, key):$/;"	m	class:_EphemDB
get	ethereum\db.py	/^    def get(self, key):$/;"	m	class:ListeningDB
get	ethereum\db.py	/^    def get(self, key):$/;"	m	class:OverlayDB
get	ethereum\db.py	/^    def get(self, key):$/;"	m	class:RefcountDB
get	ethereum\db.py	/^    def get(self, key):$/;"	m	class:_EphemDB
get_logger	ethereum\db.py	/^from ethereum.slogging import get_logger$/;"	i
get_refcount	ethereum\db.py	/^    def get_refcount(self, key):$/;"	m	class:RefcountDB
log	ethereum\db.py	/^log = get_logger('db')$/;"	v
lru_cache	ethereum\db.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\db.py	/^    from repoze.lru import lru_cache$/;"	i
put	ethereum\db.py	/^    def put(self, key, value):$/;"	m	class:ListeningDB
put	ethereum\db.py	/^    def put(self, key, value):$/;"	m	class:OverlayDB
put	ethereum\db.py	/^    def put(self, key, value):$/;"	m	class:RefcountDB
put	ethereum\db.py	/^    def put(self, key, value):$/;"	m	class:_EphemDB
str_to_bytes	ethereum\db.py	/^from rlp.utils import str_to_bytes$/;"	i
sub1	ethereum\db.py	/^def sub1(b):$/;"	f
sys	ethereum\db.py	/^import sys$/;"	i
utils	ethereum\db.py	/^from ethereum import utils$/;"	i
BlockGasLimitReached	ethereum\exceptions.py	/^class BlockGasLimitReached(InvalidTransaction):$/;"	c
GasPriceTooLow	ethereum\exceptions.py	/^class GasPriceTooLow(InvalidTransaction):$/;"	c
InsufficientBalance	ethereum\exceptions.py	/^class InsufficientBalance(InvalidTransaction):$/;"	c
InsufficientStartGas	ethereum\exceptions.py	/^class InsufficientStartGas(InvalidTransaction):$/;"	c
InvalidNonce	ethereum\exceptions.py	/^class InvalidNonce(InvalidTransaction):$/;"	c
InvalidTransaction	ethereum\exceptions.py	/^class InvalidTransaction(Exception):$/;"	c
UnknownParentException	ethereum\exceptions.py	/^class UnknownParentException(Exception):$/;"	c
UnsignedTransaction	ethereum\exceptions.py	/^class UnsignedTransaction(InvalidTransaction):$/;"	c
VerificationFailed	ethereum\exceptions.py	/^class VerificationFailed(Exception):$/;"	c
pruning_trie	ethereum\experimental\__init__.py	/^from ethereum.experimental import pruning_trie, refcount_db$/;"	i
refcount_db	ethereum\experimental\__init__.py	/^from ethereum.experimental import pruning_trie, refcount_db$/;"	i
CallData	ethereum\experimental\fastvm.py	/^class CallData(object):$/;"	c
Compustate	ethereum\experimental\fastvm.py	/^class Compustate():$/;"	c
INVALID	ethereum\experimental\fastvm.py	/^INVALID = -1$/;"	v
Message	ethereum\experimental\fastvm.py	/^class Message(object):$/;"	c
TT255	ethereum\experimental\fastvm.py	/^TT255 = 2 ** 255$/;"	v
TT256	ethereum\experimental\fastvm.py	/^TT256 = 2 ** 256$/;"	v
TT256M1	ethereum\experimental\fastvm.py	/^TT256M1 = 2 ** 256 - 1$/;"	v
__init__	ethereum\experimental\fastvm.py	/^    def __init__(self, **kwargs):$/;"	m	class:Compustate
__init__	ethereum\experimental\fastvm.py	/^    def __init__(self, parent_memory, offset=0, size=None):$/;"	m	class:CallData
__init__	ethereum\experimental\fastvm.py	/^    def __init__(self, sender, to, value, gas, data,$/;"	m	class:Message
__repr__	ethereum\experimental\fastvm.py	/^    def __repr__(self):$/;"	m	class:Message	file:
ascii_chr	ethereum\experimental\fastvm.py	/^from rlp.utils import ascii_chr$/;"	i
copy	ethereum\experimental\fastvm.py	/^import copy$/;"	i
data_copy	ethereum\experimental\fastvm.py	/^def data_copy(compustate, size):$/;"	f
encode_hex	ethereum\experimental\fastvm.py	/^from ethereum.utils import encode_hex$/;"	i
end_breakpoints	ethereum\experimental\fastvm.py	/^end_breakpoints = [$/;"	v
ethereum	ethereum\experimental\fastvm.py	/^import ethereum.opcodes as opcodes$/;"	i
extract32	ethereum\experimental\fastvm.py	/^    def extract32(self, i):$/;"	m	class:CallData
extract_all	ethereum\experimental\fastvm.py	/^    def extract_all(self):$/;"	m	class:CallData
extract_copy	ethereum\experimental\fastvm.py	/^    def extract_copy(self, mem, memstart, datastart, size):$/;"	m	class:CallData
get_logger	ethereum\experimental\fastvm.py	/^from ethereum.slogging import get_logger$/;"	i
log_log	ethereum\experimental\fastvm.py	/^log_log = get_logger('eth.vm.log')$/;"	v
log_vm_exit	ethereum\experimental\fastvm.py	/^log_vm_exit = get_logger('eth.vm.exit')$/;"	v
log_vm_op	ethereum\experimental\fastvm.py	/^log_vm_op = get_logger('eth.vm.op')$/;"	v
log_vm_op_memory	ethereum\experimental\fastvm.py	/^log_vm_op_memory = get_logger('eth.vm.op.memory')$/;"	v
log_vm_op_stack	ethereum\experimental\fastvm.py	/^log_vm_op_stack = get_logger('eth.vm.op.stack')$/;"	v
log_vm_op_storage	ethereum\experimental\fastvm.py	/^log_vm_op_storage = get_logger('eth.vm.op.storage')$/;"	v
lru_cache	ethereum\experimental\fastvm.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\experimental\fastvm.py	/^    from repoze.lru import lru_cache$/;"	i
mem_extend	ethereum\experimental\fastvm.py	/^def mem_extend(mem, compustate, op, start, sz):$/;"	f
opcodes	ethereum\experimental\fastvm.py	/^from ethereum import opcodes$/;"	i
opcodes	ethereum\experimental\fastvm.py	/^import ethereum.opcodes as opcodes$/;"	i
peaceful_exit	ethereum\experimental\fastvm.py	/^def peaceful_exit(cause, gas, data, **kargs):$/;"	f
preprocess_code	ethereum\experimental\fastvm.py	/^def preprocess_code(code):$/;"	f
start_breakpoints	ethereum\experimental\fastvm.py	/^start_breakpoints = [$/;"	v
sys	ethereum\experimental\fastvm.py	/^import sys$/;"	i
time	ethereum\experimental\fastvm.py	/^import time$/;"	i
to_string	ethereum\experimental\fastvm.py	/^from ethereum.utils import to_string$/;"	i
utils	ethereum\experimental\fastvm.py	/^from ethereum import utils$/;"	i
verify_stack_after_op	ethereum\experimental\fastvm.py	/^verify_stack_after_op = False$/;"	v
vm_exception	ethereum\experimental\fastvm.py	/^def vm_exception(error, **kargs):$/;"	f
vm_execute	ethereum\experimental\fastvm.py	/^def vm_execute(ext, msg, code):$/;"	f
BLANK_NODE	ethereum\experimental\pruning_trie.py	/^BLANK_NODE = b''$/;"	v
BLANK_ROOT	ethereum\experimental\pruning_trie.py	/^BLANK_ROOT = utils.sha3rlp(b'')$/;"	v
DEATH_ROW_OFFSET	ethereum\experimental\pruning_trie.py	/^DEATH_ROW_OFFSET = 2**62$/;"	v
InvalidSPVProof	ethereum\experimental\pruning_trie.py	/^class InvalidSPVProof(Exception):$/;"	c
NIBBLE_TERMINATOR	ethereum\experimental\pruning_trie.py	/^NIBBLE_TERMINATOR = 16$/;"	v
NONE	ethereum\experimental\pruning_trie.py	/^NONE = 0$/;"	v
ProofConstructor	ethereum\experimental\pruning_trie.py	/^class ProofConstructor():$/;"	c
RECORDING	ethereum\experimental\pruning_trie.py	/^RECORDING = 1$/;"	v
Trie	ethereum\experimental\pruning_trie.py	/^class Trie(object):$/;"	c
VERIFYING	ethereum\experimental\pruning_trie.py	/^VERIFYING = -1$/;"	v
ZERO_ENCODED	ethereum\experimental\pruning_trie.py	/^ZERO_ENCODED = utils.encode_int(0)$/;"	v
__contains__	ethereum\experimental\pruning_trie.py	/^    def __contains__(self, key):$/;"	m	class:Trie	file:
__delitem__	ethereum\experimental\pruning_trie.py	/^    def __delitem__(self, key):$/;"	m	class:Trie	file:
__getitem__	ethereum\experimental\pruning_trie.py	/^    def __getitem__(self, key):$/;"	m	class:Trie	file:
__init__	ethereum\experimental\pruning_trie.py	/^    def __init__(self):$/;"	m	class:ProofConstructor
__init__	ethereum\experimental\pruning_trie.py	/^    def __init__(self, db, root_hash=BLANK_ROOT, transient=False):$/;"	m	class:Trie
__iter__	ethereum\experimental\pruning_trie.py	/^    def __iter__(self):$/;"	m	class:Trie	file:
__len__	ethereum\experimental\pruning_trie.py	/^    def __len__(self):$/;"	m	class:Trie	file:
__setitem__	ethereum\experimental\pruning_trie.py	/^    def __setitem__(self, key, value):$/;"	m	class:Trie	file:
_db	ethereum\experimental\pruning_trie.py	/^    _db = db.DB(sys.argv[2])$/;"	v
_decode_to_node	ethereum\experimental\pruning_trie.py	/^    def _decode_to_node(self, encoded):$/;"	m	class:Trie
_delete	ethereum\experimental\pruning_trie.py	/^    def _delete(self, node, key):$/;"	m	class:Trie
_delete_and_delete_storage	ethereum\experimental\pruning_trie.py	/^    def _delete_and_delete_storage(self, node, key):$/;"	m	class:Trie
_delete_branch_node	ethereum\experimental\pruning_trie.py	/^    def _delete_branch_node(self, node, key):$/;"	m	class:Trie
_delete_child_storage	ethereum\experimental\pruning_trie.py	/^    def _delete_child_storage(self, node):$/;"	m	class:Trie
_delete_kv_node	ethereum\experimental\pruning_trie.py	/^    def _delete_kv_node(self, node, key):$/;"	m	class:Trie
_delete_node_storage	ethereum\experimental\pruning_trie.py	/^    def _delete_node_storage(self, node, is_root=False):$/;"	m	class:Trie
_encode_node	ethereum\experimental\pruning_trie.py	/^    def _encode_node(self, node, is_root=False):$/;"	m	class:Trie
_get	ethereum\experimental\pruning_trie.py	/^    def _get(self, node, key):$/;"	m	class:Trie
_get_node_type	ethereum\experimental\pruning_trie.py	/^    def _get_node_type(self, node):$/;"	m	class:Trie
_get_size	ethereum\experimental\pruning_trie.py	/^    def _get_size(self, node):$/;"	m	class:Trie
_getany	ethereum\experimental\pruning_trie.py	/^    def _getany(self, node, reverse=False, path=[]):$/;"	m	class:Trie
_iter	ethereum\experimental\pruning_trie.py	/^    def _iter(self, node, key, reverse=False, path=[]):$/;"	m	class:Trie
_iter_branch	ethereum\experimental\pruning_trie.py	/^    def _iter_branch(self, node):$/;"	m	class:Trie
_normalize_branch_node	ethereum\experimental\pruning_trie.py	/^    def _normalize_branch_node(self, node):$/;"	m	class:Trie
_to_dict	ethereum\experimental\pruning_trie.py	/^    def _to_dict(self, node):$/;"	m	class:Trie
_update	ethereum\experimental\pruning_trie.py	/^    def _update(self, node, key, value):$/;"	m	class:Trie
_update_and_delete_storage	ethereum\experimental\pruning_trie.py	/^    def _update_and_delete_storage(self, node, key, value):$/;"	m	class:Trie
_update_kv_node	ethereum\experimental\pruning_trie.py	/^    def _update_kv_node(self, node, key, value):$/;"	m	class:Trie
adapt_terminator	ethereum\experimental\pruning_trie.py	/^def adapt_terminator(nibbles, has_terminator):$/;"	f
add_exempt	ethereum\experimental\pruning_trie.py	/^    def add_exempt(self, node):$/;"	m	class:ProofConstructor
add_node	ethereum\experimental\pruning_trie.py	/^    def add_node(self, node):$/;"	m	class:ProofConstructor
all_nodes	ethereum\experimental\pruning_trie.py	/^    def all_nodes(self, node=None):$/;"	m	class:Trie
ascii_chr	ethereum\experimental\pruning_trie.py	/^from rlp.utils import decode_hex, ascii_chr, str_to_bytes$/;"	i
bin_to_nibbles	ethereum\experimental\pruning_trie.py	/^def bin_to_nibbles(s):$/;"	f
bin_to_nibbles_cache	ethereum\experimental\pruning_trie.py	/^bin_to_nibbles_cache = {}$/;"	v
clear	ethereum\experimental\pruning_trie.py	/^    def clear(self):$/;"	m	class:Trie
clear_all	ethereum\experimental\pruning_trie.py	/^    def clear_all(self, node=None):$/;"	m	class:Trie
copy	ethereum\experimental\pruning_trie.py	/^import copy$/;"	i
db	ethereum\experimental\pruning_trie.py	/^    from . import db$/;"	i
decode_hex	ethereum\experimental\pruning_trie.py	/^from rlp.utils import decode_hex, ascii_chr, str_to_bytes$/;"	i
delete	ethereum\experimental\pruning_trie.py	/^    def delete(self, key):$/;"	m	class:Trie
encode_hex	ethereum\experimental\pruning_trie.py	/^from ethereum.utils import encode_hex$/;"	i
encode_node	ethereum\experimental\pruning_trie.py	/^    def encode_node(nd):$/;"	f
encode_optimized	ethereum\experimental\pruning_trie.py	/^from ethereum.fast_rlp import encode_optimized$/;"	i
get	ethereum\experimental\pruning_trie.py	/^    def get(self, key):$/;"	m	class:Trie
get_mode	ethereum\experimental\pruning_trie.py	/^    def get_mode(self):$/;"	m	class:ProofConstructor
get_nodelist	ethereum\experimental\pruning_trie.py	/^    def get_nodelist(self):$/;"	m	class:ProofConstructor
get_nodes	ethereum\experimental\pruning_trie.py	/^    def get_nodes(self):$/;"	m	class:ProofConstructor
get_root_hash	ethereum\experimental\pruning_trie.py	/^    def get_root_hash(self):$/;"	m	class:Trie
hti	ethereum\experimental\pruning_trie.py	/^hti = {}$/;"	v
is_key_value_type	ethereum\experimental\pruning_trie.py	/^def is_key_value_type(node_type):$/;"	f
is_string	ethereum\experimental\pruning_trie.py	/^from ethereum.utils import is_string$/;"	i
iter_branch	ethereum\experimental\pruning_trie.py	/^    def iter_branch(self):$/;"	m	class:Trie
next	ethereum\experimental\pruning_trie.py	/^    def next(self, key):$/;"	m	class:Trie
nibbles_to_bin	ethereum\experimental\pruning_trie.py	/^def nibbles_to_bin(nibbles):$/;"	f
os	ethereum\experimental\pruning_trie.py	/^import os$/;"	i
pack_nibbles	ethereum\experimental\pruning_trie.py	/^def pack_nibbles(nibbles):$/;"	f
pop	ethereum\experimental\pruning_trie.py	/^    def pop(self):$/;"	m	class:ProofConstructor
prev	ethereum\experimental\pruning_trie.py	/^    def prev(self, key):$/;"	m	class:Trie
produce_spv_proof	ethereum\experimental\pruning_trie.py	/^    def produce_spv_proof(self, key):$/;"	m	class:Trie
proof	ethereum\experimental\pruning_trie.py	/^proof = ProofConstructor()$/;"	v
proving	ethereum\experimental\pruning_trie.py	/^proving = False$/;"	v
push	ethereum\experimental\pruning_trie.py	/^    def push(self, mode, nodes=[]):$/;"	m	class:ProofConstructor
replace_root_hash	ethereum\experimental\pruning_trie.py	/^    def replace_root_hash(self, old_node, new_node):$/;"	m	class:Trie
rlp	ethereum\experimental\pruning_trie.py	/^import rlp$/;"	i
rlp_encode	ethereum\experimental\pruning_trie.py	/^rlp_encode = encode_optimized$/;"	v
root_hash	ethereum\experimental\pruning_trie.py	/^    def root_hash(self):$/;"	m	class:Trie
root_hash	ethereum\experimental\pruning_trie.py	/^    def root_hash(self, value):$/;"	m	class:Trie
root_hash_valid	ethereum\experimental\pruning_trie.py	/^    def root_hash_valid(self):$/;"	m	class:Trie
set_root_hash	ethereum\experimental\pruning_trie.py	/^    def set_root_hash(self, root_hash):$/;"	m	class:Trie
spv_grabbing	ethereum\experimental\pruning_trie.py	/^    def spv_grabbing(self, node):$/;"	m	class:Trie
spv_storing	ethereum\experimental\pruning_trie.py	/^    def spv_storing(self, node):$/;"	m	class:Trie
starts_with	ethereum\experimental\pruning_trie.py	/^def starts_with(full, part):$/;"	f
str_to_bytes	ethereum\experimental\pruning_trie.py	/^from rlp.utils import decode_hex, ascii_chr, str_to_bytes$/;"	i
sys	ethereum\experimental\pruning_trie.py	/^import sys$/;"	i
to_dict	ethereum\experimental\pruning_trie.py	/^    def to_dict(self):$/;"	m	class:Trie
to_string	ethereum\experimental\pruning_trie.py	/^from ethereum.utils import to_string$/;"	i
transient_trie_exception	ethereum\experimental\pruning_trie.py	/^def transient_trie_exception(*args):$/;"	f
unpack_to_nibbles	ethereum\experimental\pruning_trie.py	/^def unpack_to_nibbles(bindata):$/;"	f
update	ethereum\experimental\pruning_trie.py	/^    def update(self, key, value):$/;"	m	class:Trie
utils	ethereum\experimental\pruning_trie.py	/^from ethereum import utils$/;"	i
verify_spv_proof	ethereum\experimental\pruning_trie.py	/^def verify_spv_proof(root, key, proof):$/;"	f
with_terminator	ethereum\experimental\pruning_trie.py	/^def with_terminator(nibbles):$/;"	f
without_terminator	ethereum\experimental\pruning_trie.py	/^def without_terminator(nibbles):$/;"	f
BaseDB	ethereum\experimental\refcount_db.py	/^from ethereum.db import BaseDB$/;"	i
DEATH_ROW_OFFSET	ethereum\experimental\refcount_db.py	/^DEATH_ROW_OFFSET = 2**62$/;"	v
ONE_ENCODED	ethereum\experimental\refcount_db.py	/^ONE_ENCODED = utils.encode_int(1)$/;"	v
RefcountDB	ethereum\experimental\refcount_db.py	/^class RefcountDB(BaseDB):$/;"	c
ZERO_ENCODED	ethereum\experimental\refcount_db.py	/^ZERO_ENCODED = utils.encode_int(0)$/;"	v
__contains__	ethereum\experimental\refcount_db.py	/^    def __contains__(self, key):$/;"	m	class:RefcountDB	file:
__init__	ethereum\experimental\refcount_db.py	/^    def __init__(self, db):$/;"	m	class:RefcountDB
_has_key	ethereum\experimental\refcount_db.py	/^    def _has_key(self, key):$/;"	m	class:RefcountDB
cleanup	ethereum\experimental\refcount_db.py	/^    def cleanup(self, epoch):$/;"	m	class:RefcountDB
commit	ethereum\experimental\refcount_db.py	/^    def commit(self):$/;"	m	class:RefcountDB
commit_refcount_changes	ethereum\experimental\refcount_db.py	/^    def commit_refcount_changes(self, epoch):$/;"	m	class:RefcountDB
dec_refcount	ethereum\experimental\refcount_db.py	/^    def dec_refcount(self, k):$/;"	m	class:RefcountDB
delete	ethereum\experimental\refcount_db.py	/^    delete = dec_refcount$/;"	v	class:RefcountDB
ethereum	ethereum\experimental\refcount_db.py	/^import ethereum.utils as utils$/;"	i
get	ethereum\experimental\refcount_db.py	/^    def get(self, k):$/;"	m	class:RefcountDB
get_refcount	ethereum\experimental\refcount_db.py	/^    def get_refcount(self, k):$/;"	m	class:RefcountDB
inc_refcount	ethereum\experimental\refcount_db.py	/^    def inc_refcount(self, k, v):$/;"	m	class:RefcountDB
put	ethereum\experimental\refcount_db.py	/^    put = inc_refcount$/;"	v	class:RefcountDB
put_temporarily	ethereum\experimental\refcount_db.py	/^    def put_temporarily(self, key, value):$/;"	m	class:RefcountDB
revert_refcount_changes	ethereum\experimental\refcount_db.py	/^    def revert_refcount_changes(self, epoch):$/;"	m	class:RefcountDB
rlp	ethereum\experimental\refcount_db.py	/^import rlp$/;"	i
sys	ethereum\experimental\refcount_db.py	/^import sys$/;"	i
utils	ethereum\experimental\refcount_db.py	/^import ethereum.utils as utils$/;"	i
blocks	ethereum\experimental\spv.py	/^from ethereum import blocks$/;"	i
mk_independent_transaction_spv_proof	ethereum\experimental\spv.py	/^def mk_independent_transaction_spv_proof(block, index):$/;"	f
mk_transaction_spv_proof	ethereum\experimental\spv.py	/^def mk_transaction_spv_proof(block, tx):$/;"	f
processblock	ethereum\experimental\spv.py	/^from ethereum import processblock$/;"	i
rlp	ethereum\experimental\spv.py	/^import rlp$/;"	i
transactions	ethereum\experimental\spv.py	/^from ethereum import transactions$/;"	i
trie	ethereum\experimental\spv.py	/^from ethereum import trie$/;"	i
utils	ethereum\experimental\spv.py	/^from ethereum import utils$/;"	i
verify_independent_transaction_spv_proof	ethereum\experimental\spv.py	/^def verify_independent_transaction_spv_proof(db, proof):$/;"	f
verify_transaction_spv_proof	ethereum\experimental\spv.py	/^def verify_transaction_spv_proof(block, tx, proof):$/;"	f
_decode_optimized	ethereum\fast_rlp.py	/^def _decode_optimized(rlp):$/;"	f
_encode_optimized	ethereum\fast_rlp.py	/^def _encode_optimized(item):$/;"	f
big_endian_to_int	ethereum\fast_rlp.py	/^from .utils import int_to_big_endian, big_endian_to_int, safe_ord$/;"	i
consume_length_prefix	ethereum\fast_rlp.py	/^def consume_length_prefix(rlp, start):$/;"	f
db	ethereum\fast_rlp.py	/^from . import db$/;"	i
decode_optimized	ethereum\fast_rlp.py	/^    decode_optimized = _decode_optimized$/;"	v
encode_optimized	ethereum\fast_rlp.py	/^    encode_optimized = rlp.codec.encode_raw$/;"	v
int_to_big_endian	ethereum\fast_rlp.py	/^from .utils import int_to_big_endian, big_endian_to_int, safe_ord$/;"	i
length_prefix	ethereum\fast_rlp.py	/^def length_prefix(length, offset):$/;"	f
main	ethereum\fast_rlp.py	/^def main():$/;"	f
optimized_decode_list	ethereum\fast_rlp.py	/^def optimized_decode_list(rlp):$/;"	f
optimized_decode_single	ethereum\fast_rlp.py	/^def optimized_decode_single(x, pos):$/;"	f
rlp	ethereum\fast_rlp.py	/^import rlp$/;"	i
run	ethereum\fast_rlp.py	/^    def run():$/;"	f	function:main
safe_ord	ethereum\fast_rlp.py	/^from .utils import int_to_big_endian, big_endian_to_int, safe_ord$/;"	i
sys	ethereum\fast_rlp.py	/^import sys$/;"	i
time	ethereum\fast_rlp.py	/^    import time$/;"	i
trie	ethereum\fast_rlp.py	/^    import trie$/;"	i
CallData	ethereum\fastvm.py	/^class CallData(object):$/;"	c
Compustate	ethereum\fastvm.py	/^class Compustate():$/;"	c
JUMPDEST	ethereum\fastvm.py	/^JUMPDEST = 0x5b # Hardcoded, change if needed$/;"	v
MAX_DEPTH	ethereum\fastvm.py	/^MAX_DEPTH = 1024$/;"	v
Message	ethereum\fastvm.py	/^class Message(object):$/;"	c
TT255	ethereum\fastvm.py	/^TT255 = 2 ** 255$/;"	v
TT256	ethereum\fastvm.py	/^TT256 = 2 ** 256$/;"	v
TT256M1	ethereum\fastvm.py	/^TT256M1 = 2 ** 256 - 1$/;"	v
VmExtBase	ethereum\fastvm.py	/^class VmExtBase():$/;"	c
__init__	ethereum\fastvm.py	/^    def __init__(self):$/;"	m	class:VmExtBase
__init__	ethereum\fastvm.py	/^    def __init__(self, **kwargs):$/;"	m	class:Compustate
__init__	ethereum\fastvm.py	/^    def __init__(self, parent_memory, offset=0, size=None):$/;"	m	class:CallData
__init__	ethereum\fastvm.py	/^    def __init__(self, sender, to, value=0, gas=1000000, data='', depth=0,$/;"	m	class:Message
__repr__	ethereum\fastvm.py	/^    def __repr__(self):$/;"	m	class:Message	file:
all_but_1n	ethereum\fastvm.py	/^def all_but_1n(x, n):$/;"	f
ascii_chr	ethereum\fastvm.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
break_list	ethereum\fastvm.py	/^break_list = ('JUMP', 'GAS', 'JUMPI', 'CALL', 'CREATE', 'CALLCODE', 'DELEGATECALL', 'STATICCALL',$/;"	v
bytearray_to_bytestr	ethereum\fastvm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr$/;"	i
code_cache	ethereum\fastvm.py	/^code_cache = {}$/;"	v
copy	ethereum\fastvm.py	/^import copy$/;"	i
data_copy	ethereum\fastvm.py	/^def data_copy(compustate, size):$/;"	f
eat_gas	ethereum\fastvm.py	/^def eat_gas(compustate, amount):$/;"	f
encode_hex	ethereum\fastvm.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
encode_int	ethereum\fastvm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr$/;"	i
extract32	ethereum\fastvm.py	/^    def extract32(self, i):$/;"	m	class:CallData
extract_all	ethereum\fastvm.py	/^    def extract_all(self):$/;"	m	class:CallData
extract_copy	ethereum\fastvm.py	/^    def extract_copy(self, mem, memstart, datastart, size):$/;"	m	class:CallData
get_logger	ethereum\fastvm.py	/^from ethereum.slogging import get_logger$/;"	i
is_numeric	ethereum\fastvm.py	/^from ethereum.abi import is_numeric$/;"	i
log_log	ethereum\fastvm.py	/^log_log = get_logger('eth.vm.log')$/;"	v
log_msg	ethereum\fastvm.py	/^log_msg = get_logger('eth.pb.msg')$/;"	v
log_vm_exit	ethereum\fastvm.py	/^log_vm_exit = get_logger('eth.vm.exit')$/;"	v
log_vm_op	ethereum\fastvm.py	/^log_vm_op = get_logger('eth.vm.op')$/;"	v
log_vm_op_memory	ethereum\fastvm.py	/^log_vm_op_memory = get_logger('eth.vm.op.memory')$/;"	v
log_vm_op_stack	ethereum\fastvm.py	/^log_vm_op_stack = get_logger('eth.vm.op.stack')$/;"	v
log_vm_op_storage	ethereum\fastvm.py	/^log_vm_op_storage = get_logger('eth.vm.op.storage')$/;"	v
mem_extend	ethereum\fastvm.py	/^def mem_extend(mem, compustate, op, start, sz):$/;"	f
opcodes	ethereum\fastvm.py	/^from ethereum import opcodes$/;"	i
peaceful_exit	ethereum\fastvm.py	/^def peaceful_exit(cause, gas, data, **kargs):$/;"	f
preprocess_code	ethereum\fastvm.py	/^def preprocess_code(code):$/;"	f
revert	ethereum\fastvm.py	/^def revert(gas, data, **kargs):$/;"	f
sys	ethereum\fastvm.py	/^import sys$/;"	i
time	ethereum\fastvm.py	/^import time$/;"	i
to_string	ethereum\fastvm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr$/;"	i
utils	ethereum\fastvm.py	/^from ethereum import utils$/;"	i
verify_stack_after_op	ethereum\fastvm.py	/^verify_stack_after_op = False$/;"	v
vm_exception	ethereum\fastvm.py	/^def vm_exception(error, **kargs):$/;"	f
vm_execute	ethereum\fastvm.py	/^def vm_execute(ext, msg, code):$/;"	f
zpad	ethereum\fastvm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr$/;"	i
Block	ethereum\full_casper\casper_utils.py	/^from ethereum.block import Block, BlockHeader$/;"	i
BlockHeader	ethereum\full_casper\casper_utils.py	/^from ethereum.block import Block, BlockHeader$/;"	i
Env	ethereum\full_casper\casper_utils.py	/^from ethereum.config import Env, default_config$/;"	i
RANDAO_SAVE_INTERVAL	ethereum\full_casper\casper_utils.py	/^RANDAO_SAVE_INTERVAL = 100$/;"	v
RandaoManager	ethereum\full_casper\casper_utils.py	/^class RandaoManager():$/;"	c
State	ethereum\full_casper\casper_utils.py	/^from ethereum.state import State$/;"	i
Transaction	ethereum\full_casper\casper_utils.py	/^from ethereum.transactions import Transaction$/;"	i
__init__	ethereum\full_casper\casper_utils.py	/^    def __init__(self, seed, rounds=10**4+1):$/;"	m	class:RandaoManager
_casper_code	ethereum\full_casper\casper_utils.py	/^_casper_code = None$/;"	v
_casper_ct	ethereum\full_casper\casper_utils.py	/^_casper_ct = None$/;"	v
_finalizer_code	ethereum\full_casper\casper_utils.py	/^_finalizer_code = None$/;"	v
_hash_without_ed_code	ethereum\full_casper\casper_utils.py	/^_hash_without_ed_code = None$/;"	v
_rlp_decoder_code	ethereum\full_casper\casper_utils.py	/^_rlp_decoder_code = None$/;"	v
abi	ethereum\full_casper\casper_utils.py	/^from ethereum import abi$/;"	i
apply_const_message	ethereum\full_casper\casper_utils.py	/^    apply_message, initialize$/;"	i
apply_message	ethereum\full_casper\casper_utils.py	/^    apply_message, initialize$/;"	i
apply_transaction	ethereum\full_casper\casper_utils.py	/^    apply_message, initialize$/;"	i
call_casper	ethereum\full_casper\casper_utils.py	/^def call_casper(state, fun, args=[], gas=1000000, value=0):$/;"	f
casper_config	ethereum\full_casper\casper_utils.py	/^casper_config = copy.deepcopy(default_config)$/;"	v
casper_contract_bootstrap	ethereum\full_casper\casper_utils.py	/^def casper_contract_bootstrap(state, timestamp=0, epoch_length=100, number=0, gas_limit=4712388, nonce=0):$/;"	f
casper_path	ethereum\full_casper\casper_utils.py	/^casper_path = os.path.join(mydir, 'casper_contract.py')$/;"	v
casper_post_finalize_block	ethereum\full_casper\casper_utils.py	/^def casper_post_finalize_block(state, block):$/;"	f
casper_setup_block	ethereum\full_casper\casper_utils.py	/^def casper_setup_block(chain, state=None, timestamp=None, coinbase='\\x35'*20, extra_data='moo ha ha says the laughing cow.'):$/;"	f
casper_start_epoch	ethereum\full_casper\casper_utils.py	/^def casper_start_epoch(state):$/;"	f
casper_state_initialize	ethereum\full_casper\casper_utils.py	/^def casper_state_initialize(state):$/;"	f
casper_validate_header	ethereum\full_casper\casper_utils.py	/^def casper_validate_header(state, header):$/;"	f
check_skips	ethereum\full_casper\casper_utils.py	/^def check_skips(chain, vchash, skips):$/;"	f
copy	ethereum\full_casper\casper_utils.py	/^import copy$/;"	i
default_config	ethereum\full_casper\casper_utils.py	/^from ethereum.config import Env, default_config$/;"	i
ecsign	ethereum\full_casper\casper_utils.py	/^from ethereum.utils import sha3, ecsign, encode_int32$/;"	i
encode_int32	ethereum\full_casper\casper_utils.py	/^from ethereum.utils import sha3, ecsign, encode_int32$/;"	i
finalizer_path	ethereum\full_casper\casper_utils.py	/^finalizer_path = os.path.join(mydir, 'finalizer_contract.py')$/;"	v
generate_validation_code	ethereum\full_casper\casper_utils.py	/^def generate_validation_code(addr):$/;"	f
get	ethereum\full_casper\casper_utils.py	/^    def get(self, index):$/;"	m	class:RandaoManager
get_casper_code	ethereum\full_casper\casper_utils.py	/^def get_casper_code():$/;"	f
get_casper_ct	ethereum\full_casper\casper_utils.py	/^def get_casper_ct():$/;"	f
get_contract_code	ethereum\full_casper\casper_utils.py	/^def get_contract_code(init_code):$/;"	f
get_dunkle_candidates	ethereum\full_casper\casper_utils.py	/^def get_dunkle_candidates(chain, state, scan_limit=10):$/;"	f
get_finalizer_code	ethereum\full_casper\casper_utils.py	/^def get_finalizer_code():$/;"	f
get_hash_without_ed_code	ethereum\full_casper\casper_utils.py	/^def get_hash_without_ed_code():$/;"	f
get_logger	ethereum\full_casper\casper_utils.py	/^from ethereum.slogging import get_logger$/;"	i
get_parent	ethereum\full_casper\casper_utils.py	/^    def get_parent(self, val):$/;"	m	class:RandaoManager
get_rlp_decoder_code	ethereum\full_casper\casper_utils.py	/^def get_rlp_decoder_code():$/;"	f
get_skips_and_block_making_time	ethereum\full_casper\casper_utils.py	/^def get_skips_and_block_making_time(state, vchash, max_lookup=100):$/;"	f
get_timestamp	ethereum\full_casper\casper_utils.py	/^def get_timestamp(chain, skips):$/;"	f
hash_without_ed_path	ethereum\full_casper\casper_utils.py	/^hash_without_ed_path = os.path.join(mydir, 'hash_without_ed_contract.py')$/;"	v
initialize	ethereum\full_casper\casper_utils.py	/^    apply_message, initialize$/;"	i
log_bc	ethereum\full_casper\casper_utils.py	/^log_bc = get_logger('eth.block_creation')$/;"	v
make_casper_genesis	ethereum\full_casper\casper_utils.py	/^def make_casper_genesis(validators, alloc, timestamp=0, epoch_length=100):$/;"	f
make_withdrawal_signature	ethereum\full_casper\casper_utils.py	/^def make_withdrawal_signature(key):$/;"	f
mk_basic_state	ethereum\full_casper\casper_utils.py	/^from ethereum.parse_genesis_declaration import mk_basic_state$/;"	i
mydir	ethereum\full_casper\casper_utils.py	/^mydir = os.path.split(__file__)[0]$/;"	v
os	ethereum\full_casper\casper_utils.py	/^import os$/;"	i
rlp	ethereum\full_casper\casper_utils.py	/^import rlp$/;"	i
rlp_decoder_path	ethereum\full_casper\casper_utils.py	/^rlp_decoder_path = os.path.join(mydir, 'rlp_decoder_contract.py')$/;"	v
serpent	ethereum\full_casper\casper_utils.py	/^        import serpent$/;"	i
serpent	ethereum\full_casper\casper_utils.py	/^    import serpent$/;"	i
sha3	ethereum\full_casper\casper_utils.py	/^from ethereum.utils import sha3, ecsign, encode_int32$/;"	i
sign_block	ethereum\full_casper\casper_utils.py	/^def sign_block(block, key, randao_parent, vchash, skips):$/;"	f
utils	ethereum\full_casper\casper_utils.py	/^from ethereum import utils$/;"	i
validator_inject	ethereum\full_casper\casper_utils.py	/^def validator_inject(state, vcode, deposit_size, randao_commitment, address, nonce=0, ct=None):$/;"	f
vm	ethereum\full_casper\casper_utils.py	/^from ethereum import vm$/;"	i
BLANK_UNCLES_HASH	ethereum\genesis_helpers.py	/^from ethereum.block import Block, BlockHeader, BLANK_UNCLES_HASH$/;"	i
Block	ethereum\genesis_helpers.py	/^from ethereum.block import Block, BlockHeader, BLANK_UNCLES_HASH$/;"	i
BlockHeader	ethereum\genesis_helpers.py	/^from ethereum.block import Block, BlockHeader, BLANK_UNCLES_HASH$/;"	i
Env	ethereum\genesis_helpers.py	/^from ethereum.config import Env$/;"	i
OverlayDB	ethereum\genesis_helpers.py	/^from ethereum.db import OverlayDB, RefcountDB$/;"	i
RefcountDB	ethereum\genesis_helpers.py	/^from ethereum.db import OverlayDB, RefcountDB$/;"	i
State	ethereum\genesis_helpers.py	/^from ethereum.state import State$/;"	i
big_endian_to_int	ethereum\genesis_helpers.py	/^    parse_as_bin, parse_as_int, normalize_address$/;"	i
block_from_genesis_declaration	ethereum\genesis_helpers.py	/^def block_from_genesis_declaration(genesis_data, env):$/;"	f
decode_hex	ethereum\genesis_helpers.py	/^    parse_as_bin, parse_as_int, normalize_address$/;"	i
encode_hex	ethereum\genesis_helpers.py	/^    parse_as_bin, parse_as_int, normalize_address$/;"	i
get_consensus_strategy	ethereum\genesis_helpers.py	/^from ethereum.consensus_strategy import get_consensus_strategy$/;"	i
initialize_genesis_keys	ethereum\genesis_helpers.py	/^def initialize_genesis_keys(state, genesis):$/;"	f
json	ethereum\genesis_helpers.py	/^import json$/;"	i
mk_basic_state	ethereum\genesis_helpers.py	/^def mk_basic_state(alloc, header=None, env=None, executing_on_head=False):$/;"	f
mk_genesis_block	ethereum\genesis_helpers.py	/^def mk_genesis_block(env, **kwargs):$/;"	f
mk_genesis_data	ethereum\genesis_helpers.py	/^def mk_genesis_data(env, **kwargs):$/;"	f
normalize_address	ethereum\genesis_helpers.py	/^    parse_as_bin, parse_as_int, normalize_address$/;"	i
parse_as_bin	ethereum\genesis_helpers.py	/^    parse_as_bin, parse_as_int, normalize_address$/;"	i
parse_as_int	ethereum\genesis_helpers.py	/^    parse_as_bin, parse_as_int, normalize_address$/;"	i
rlp	ethereum\genesis_helpers.py	/^import rlp$/;"	i
state_from_genesis_declaration	ethereum\genesis_helpers.py	/^def state_from_genesis_declaration(genesis_data, env, block=None, allow_empties=False, executing_on_head=False):$/;"	f
initialize	ethereum\hybrid_casper\consensus.py	/^def initialize(state, block=None):$/;"	f
update_block_env_variables	ethereum\hybrid_casper\consensus.py	/^def update_block_env_variables(state, block):$/;"	f
utils	ethereum\hybrid_casper\consensus.py	/^from ethereum import utils$/;"	i
BaseDB	ethereum\messages.py	/^from ethereum.db import BaseDB, EphemDB$/;"	i
Binary	ethereum\messages.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
BlockGasLimitReached	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
CREATE_CONTRACT_ADDRESS	ethereum\messages.py	/^CREATE_CONTRACT_ADDRESS = b''$/;"	v
CountableList	ethereum\messages.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
Env	ethereum\messages.py	/^from ethereum.config import Env, default_config$/;"	i
EphemDB	ethereum\messages.py	/^from ethereum.db import BaseDB, EphemDB$/;"	i
InsufficientBalance	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
InsufficientStartGas	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
InvalidNonce	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
InvalidTransaction	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
Log	ethereum\messages.py	/^class Log(rlp.Serializable):$/;"	c
Receipt	ethereum\messages.py	/^class Receipt(rlp.Serializable):$/;"	c
SKIP_MEDSTATES	ethereum\messages.py	/^SKIP_MEDSTATES = False$/;"	v
SecureTrie	ethereum\messages.py	/^from ethereum.securetrie import SecureTrie$/;"	i
Transaction	ethereum\messages.py	/^from ethereum.transactions import Transaction$/;"	i
Trie	ethereum\messages.py	/^from ethereum.trie import Trie$/;"	i
UnsignedTransaction	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
VMExt	ethereum\messages.py	/^class VMExt():$/;"	c
VerificationFailed	ethereum\messages.py	/^    BlockGasLimitReached, InsufficientBalance, VerificationFailed, InvalidTransaction$/;"	i
__init__	ethereum\messages.py	/^    def __init__(self, address, topics, data):$/;"	m	class:Log
__init__	ethereum\messages.py	/^    def __init__(self, state, tx):$/;"	m	class:VMExt
__init__	ethereum\messages.py	/^    def __init__(self, state_root, gas_used, logs, bloom=None):$/;"	m	class:Receipt
__repr__	ethereum\messages.py	/^    def __repr__(self):$/;"	m	class:Log	file:
_apply_msg	ethereum\messages.py	/^def _apply_msg(ext, msg, code):$/;"	f
address	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
apply_message	ethereum\messages.py	/^def apply_message(state, msg=None, **kwargs):$/;"	f
apply_msg	ethereum\messages.py	/^def apply_msg(ext, msg):$/;"	f
apply_transaction	ethereum\messages.py	/^def apply_transaction(state, tx):$/;"	f
ascii_chr	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
ascii_chr	ethereum\messages.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr$/;"	i
big_endian_int	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
big_endian_int	ethereum\messages.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
big_endian_to_int	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
binary	ethereum\messages.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
bloom	ethereum\messages.py	/^    def bloom(self):$/;"	m	class:Receipt
bloom	ethereum\messages.py	/^from ethereum import bloom$/;"	i
bloomables	ethereum\messages.py	/^    def bloomables(self):$/;"	m	class:Log
bytearray_to_bytestr	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
config_fork_specific_validation	ethereum\messages.py	/^def config_fork_specific_validation(config, blknum, tx):$/;"	f
create_contract	ethereum\messages.py	/^def create_contract(ext, msg):$/;"	f
decode_hex	ethereum\messages.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr$/;"	i
default_config	ethereum\messages.py	/^from ethereum.config import Env, default_config$/;"	i
default_specials	ethereum\messages.py	/^from ethereum.specials import specials as default_specials$/;"	i
encode_hex	ethereum\messages.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr$/;"	i
encode_int	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
fields	ethereum\messages.py	/^    fields = [$/;"	v	class:Log
fields	ethereum\messages.py	/^    fields = [$/;"	v	class:Receipt
get_consensus_strategy	ethereum\messages.py	/^from ethereum.consensus_strategy import get_consensus_strategy$/;"	i
get_logger	ethereum\messages.py	/^from ethereum.slogging import get_logger$/;"	i
hash32	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
int256	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
int_to_addr	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
log	ethereum\messages.py	/^log = get_logger('eth.block')$/;"	v
log_msg	ethereum\messages.py	/^log_msg = get_logger('eth.pb.msg')$/;"	v
log_state	ethereum\messages.py	/^log_state = get_logger('eth.pb.msg.state')$/;"	v
log_tx	ethereum\messages.py	/^log_tx = get_logger('eth.pb.tx')$/;"	v
lru_cache	ethereum\messages.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\messages.py	/^    from repoze.lru import lru_cache$/;"	i
mk_receipt	ethereum\messages.py	/^def mk_receipt(state, logs):$/;"	f
normalize_address	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
null_address	ethereum\messages.py	/^null_address = b'\\xff' * 20$/;"	v
opcodes	ethereum\messages.py	/^from ethereum import opcodes$/;"	i
os	ethereum\messages.py	/^import os$/;"	i
rlp	ethereum\messages.py	/^import rlp$/;"	i
rp	ethereum\messages.py	/^def rp(tx, what, actual, target):$/;"	f
safe_ord	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
sha3	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
sys	ethereum\messages.py	/^import sys$/;"	i
to_dict	ethereum\messages.py	/^    def to_dict(self):$/;"	m	class:Log
transactions	ethereum\messages.py	/^from ethereum import transactions$/;"	i
trie	ethereum\messages.py	/^from ethereum import trie$/;"	i
trie_root	ethereum\messages.py	/^    ascii_chr, bytearray_to_bytestr$/;"	i
utils	ethereum\messages.py	/^from ethereum import utils$/;"	i
validate_transaction	ethereum\messages.py	/^def validate_transaction(state, tx):$/;"	f
vm	ethereum\messages.py	/^from ethereum import vm$/;"	i
Block	ethereum\meta.py	/^from ethereum.block import Block, BlockHeader$/;"	i
BlockHeader	ethereum\meta.py	/^from ethereum.block import Block, BlockHeader$/;"	i
State	ethereum\meta.py	/^from ethereum.state import State$/;"	i
add_transactions	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
apply_block	ethereum\meta.py	/^def apply_block(state, block):$/;"	f
apply_transaction	ethereum\meta.py	/^from ethereum.messages import apply_transaction$/;"	i
encode_hex	ethereum\meta.py	/^from ethereum.utils import sha3, encode_hex$/;"	i
get_consensus_strategy	ethereum\meta.py	/^from ethereum.consensus_strategy import get_consensus_strategy$/;"	i
get_logger	ethereum\meta.py	/^from ethereum.slogging import get_logger$/;"	i
log	ethereum\meta.py	/^log = get_logger('eth.block_creation')$/;"	v
make_head_candidate	ethereum\meta.py	/^def make_head_candidate(chain, txqueue=None,$/;"	f
mk_block_from_prevstate	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
post_finalize	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
rlp	ethereum\meta.py	/^import rlp$/;"	i
set_execution_results	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
sha3	ethereum\meta.py	/^from ethereum.utils import sha3, encode_hex$/;"	i
validate_header	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
validate_transaction_tree	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
verify_execution_results	ethereum\meta.py	/^    set_execution_results, add_transactions, post_finalize$/;"	i
Account	ethereum\new_state.py	/^class Account(rlp.Serializable):$/;"	c
BLANK_HASH	ethereum\new_state.py	/^BLANK_HASH = utils.sha3(b'')$/;"	v
BLANK_ROOT	ethereum\new_state.py	/^BLANK_ROOT = utils.sha3rlp(b'')$/;"	v
BLANK_UNCLES_HASH	ethereum\new_state.py	/^BLANK_UNCLES_HASH = sha3(rlp.encode([]))$/;"	v
BaseDB	ethereum\new_state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB$/;"	i
Binary	ethereum\new_state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
CountableList	ethereum\new_state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
Env	ethereum\new_state.py	/^from ethereum.config import default_config, Env$/;"	i
EphemDB	ethereum\new_state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB$/;"	i
FakeHeader	ethereum\new_state.py	/^from ethereum.block import FakeHeader$/;"	i
OverlayDB	ethereum\new_state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB$/;"	i
STATE_DEFAULTS	ethereum\new_state.py	/^STATE_DEFAULTS = {$/;"	v
SecureTrie	ethereum\new_state.py	/^from ethereum.securetrie import SecureTrie$/;"	i
State	ethereum\new_state.py	/^class State():$/;"	c
Trie	ethereum\new_state.py	/^from ethereum.trie import Trie$/;"	i
__init__	ethereum\new_state.py	/^    def __init__(self, nonce, balance, storage, code_hash, env):$/;"	m	class:Account
__init__	ethereum\new_state.py	/^    def __init__(self, root=b'', env=Env(), **kwargs):$/;"	m	class:State
account_exists	ethereum\new_state.py	/^    def account_exists(self, address):$/;"	m	class:State
account_to_dict	ethereum\new_state.py	/^    def account_to_dict(self, address):$/;"	m	class:State
add_block_header	ethereum\new_state.py	/^    def add_block_header(self, block_header):$/;"	m	class:State
add_log	ethereum\new_state.py	/^    def add_log(self, log):$/;"	m	class:State
add_receipt	ethereum\new_state.py	/^    def add_receipt(self, receipt):$/;"	m	class:State
add_refund	ethereum\new_state.py	/^    def add_refund(self, value):$/;"	m	class:State
add_suicide	ethereum\new_state.py	/^    def add_suicide(self, address):$/;"	m	class:State
address	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
big_endian_int	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
big_endian_int	ethereum\new_state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
big_endian_to_int	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
binary	ethereum\new_state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
blank_account	ethereum\new_state.py	/^    def blank_account(cls, env, initial_nonce=0):$/;"	m	class:Account
code	ethereum\new_state.py	/^    def code(self):$/;"	m	class:Account
code	ethereum\new_state.py	/^    def code(self, value):$/;"	m	class:Account
commit	ethereum\new_state.py	/^    def commit(self):$/;"	m	class:Account
commit	ethereum\new_state.py	/^    def commit(self, allow_empties=False):$/;"	m	class:State
config	ethereum\new_state.py	/^    def config(self):$/;"	m	class:State
copy	ethereum\new_state.py	/^import copy$/;"	i
db	ethereum\new_state.py	/^    def db(self):$/;"	m	class:State
decode_hex	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
default_config	ethereum\new_state.py	/^from ethereum.config import default_config, Env$/;"	i
default_specials	ethereum\new_state.py	/^from ethereum.specials import specials as default_specials$/;"	i
del_account	ethereum\new_state.py	/^    def del_account(self, address):$/;"	m	class:State
delta_balance	ethereum\new_state.py	/^    def delta_balance(self, address, value):$/;"	m	class:State
dict_to_prev_header	ethereum\new_state.py	/^def dict_to_prev_header(h):$/;"	f
encode_hex	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
encode_int	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
ephemeral_clone	ethereum\new_state.py	/^    def ephemeral_clone(self):$/;"	m	class:State
exists	ethereum\new_state.py	/^    def exists(self):$/;"	m	class:Account
fields	ethereum\new_state.py	/^    fields = [$/;"	v	class:Account
from_snapshot	ethereum\new_state.py	/^    def from_snapshot(cls, snapshot_data, env):$/;"	m	class:State
get_and_cache_account	ethereum\new_state.py	/^    def get_and_cache_account(self, address):$/;"	m	class:State
get_balance	ethereum\new_state.py	/^    def get_balance(self, address):$/;"	m	class:State
get_block_hash	ethereum\new_state.py	/^    def get_block_hash(self, n):$/;"	m	class:State
get_code	ethereum\new_state.py	/^    def get_code(self, address):$/;"	m	class:State
get_nonce	ethereum\new_state.py	/^    def get_nonce(self, address):$/;"	m	class:State
get_storage_data	ethereum\new_state.py	/^    def get_storage_data(self, address, key):$/;"	m	class:State
get_storage_data	ethereum\new_state.py	/^    def get_storage_data(self, key):$/;"	m	class:Account
hash32	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
increment_nonce	ethereum\new_state.py	/^    def increment_nonce(self, address):$/;"	m	class:State
int256	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
int_to_addr	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
is_ANTI_DOS	ethereum\new_state.py	/^    def is_ANTI_DOS(self, at_fork_height=False):$/;"	m	class:State
is_DAO	ethereum\new_state.py	/^    def is_DAO(self, at_fork_height=False):$/;"	m	class:State
is_HOMESTEAD	ethereum\new_state.py	/^    def is_HOMESTEAD(self, at_fork_height=False):$/;"	m	class:State
is_METROPOLIS	ethereum\new_state.py	/^    def is_METROPOLIS(self, at_fork_height=False):$/;"	m	class:State
is_SERENITY	ethereum\new_state.py	/^    def is_SERENITY(self, at_fork_height=False):$/;"	m	class:State
is_SPURIOUS_DRAGON	ethereum\new_state.py	/^    def is_SPURIOUS_DRAGON(self, at_fork_height=False):$/;"	m	class:State
is_blank	ethereum\new_state.py	/^    def is_blank(self):$/;"	m	class:Account
is_numeric	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
is_string	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
lru_cache	ethereum\new_state.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\new_state.py	/^    from repoze.lru import lru_cache$/;"	i
normalize_address	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
parse_as_bin	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
parse_as_int	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
prev_header_to_dict	ethereum\new_state.py	/^def prev_header_to_dict(h):$/;"	f
reset_storage	ethereum\new_state.py	/^    def reset_storage(self, address):$/;"	m	class:State
revert	ethereum\new_state.py	/^    def revert(self, snapshot):$/;"	m	class:State
rlp	ethereum\new_state.py	/^import rlp$/;"	i
set_and_journal	ethereum\new_state.py	/^    def set_and_journal(self, acct, param, val):$/;"	m	class:State
set_balance	ethereum\new_state.py	/^    def set_balance(self, address, value):$/;"	m	class:State
set_code	ethereum\new_state.py	/^    def set_code(self, address, value):$/;"	m	class:State
set_nonce	ethereum\new_state.py	/^    def set_nonce(self, address, value):$/;"	m	class:State
set_param	ethereum\new_state.py	/^    def set_param(self, k, v):$/;"	m	class:State
set_storage_data	ethereum\new_state.py	/^    def set_storage_data(self, address, key, value):$/;"	m	class:State
set_storage_data	ethereum\new_state.py	/^    def set_storage_data(self, key, value):$/;"	m	class:Account
sha3	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
snapshot	ethereum\new_state.py	/^    def snapshot(self):$/;"	m	class:State
snapshot_form	ethereum\new_state.py	/^def snapshot_form(val):$/;"	f
sys	ethereum\new_state.py	/^import sys$/;"	i
to_dict	ethereum\new_state.py	/^    def to_dict(self):$/;"	m	class:Account
to_dict	ethereum\new_state.py	/^    def to_dict(self):$/;"	m	class:State
to_snapshot	ethereum\new_state.py	/^    def to_snapshot(self, root_only=False, no_prevblocks=False):$/;"	m	class:State
transfer_value	ethereum\new_state.py	/^    def transfer_value(self, from_addr, to_addr, value):$/;"	m	class:State
trie	ethereum\new_state.py	/^from ethereum import trie$/;"	i
trie_root	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
utils	ethereum\new_state.py	/^from ethereum import utils$/;"	i
zpad	ethereum\new_state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
BALANCE_SUPPLEMENTAL_GAS	ethereum\opcodes.py	/^BALANCE_SUPPLEMENTAL_GAS = 380$/;"	v
CALL_CHILD_LIMIT_DENOM	ethereum\opcodes.py	/^CALL_CHILD_LIMIT_DENOM = 64$/;"	v
CALL_CHILD_LIMIT_NUM	ethereum\opcodes.py	/^CALL_CHILD_LIMIT_NUM = 63$/;"	v
CALL_SUPPLEMENTAL_GAS	ethereum\opcodes.py	/^CALL_SUPPLEMENTAL_GAS = 660$/;"	v
EXP_SUPPLEMENTAL_GAS	ethereum\opcodes.py	/^EXP_SUPPLEMENTAL_GAS = 40$/;"	v
EXTCODELOAD_SUPPLEMENTAL_GAS	ethereum\opcodes.py	/^EXTCODELOAD_SUPPLEMENTAL_GAS = 680$/;"	v
GCALLNEWACCOUNT	ethereum\opcodes.py	/^GCALLNEWACCOUNT = 25000$/;"	v
GCALLVALUETRANSFER	ethereum\opcodes.py	/^GCALLVALUETRANSFER = 9000   # non-zero-valued call$/;"	v
GCONTRACTBYTE	ethereum\opcodes.py	/^GCONTRACTBYTE = 200   # one byte of code in contract creation$/;"	v
GCOPY	ethereum\opcodes.py	/^GCOPY = 3             # cost to copy one 32 byte word$/;"	v
GDEFAULT	ethereum\opcodes.py	/^GDEFAULT = 1$/;"	v
GECADD	ethereum\opcodes.py	/^GECADD = 500$/;"	v
GECMUL	ethereum\opcodes.py	/^GECMUL = 2000$/;"	v
GECRECOVER	ethereum\opcodes.py	/^GECRECOVER = 3000     # Cost of ecrecover op$/;"	v
GEXPONENTBYTE	ethereum\opcodes.py	/^GEXPONENTBYTE = 10    # cost of EXP exponent per byte$/;"	v
GIDENTITYBASE	ethereum\opcodes.py	/^GIDENTITYBASE = 15    # Base cost of indentity$/;"	v
GIDENTITYWORD	ethereum\opcodes.py	/^GIDENTITYWORD = 3     # Cost of identity per word$/;"	v
GLOGBYTE	ethereum\opcodes.py	/^GLOGBYTE = 8          # cost of a byte of logdata$/;"	v
GMEMORY	ethereum\opcodes.py	/^GMEMORY = 3$/;"	v
GMODEXPQUADDIVISOR	ethereum\opcodes.py	/^GMODEXPQUADDIVISOR = 100$/;"	v
GPAIRINGBASE	ethereum\opcodes.py	/^GPAIRINGBASE = 100000$/;"	v
GPAIRINGPERPOINT	ethereum\opcodes.py	/^GPAIRINGPERPOINT = 80000$/;"	v
GQUADRATICMEMDENOM	ethereum\opcodes.py	/^GQUADRATICMEMDENOM = 512  # 1 gas per 512 quadwords$/;"	v
GRIPEMD160BASE	ethereum\opcodes.py	/^GRIPEMD160BASE = 600  # Base cost of RIPEMD160$/;"	v
GRIPEMD160WORD	ethereum\opcodes.py	/^GRIPEMD160WORD = 120  # Cost of RIPEMD160 per word$/;"	v
GSHA256BASE	ethereum\opcodes.py	/^GSHA256BASE = 60      # Base c of SHA256$/;"	v
GSHA256WORD	ethereum\opcodes.py	/^GSHA256WORD = 12      # Cost of SHA256 per word$/;"	v
GSHA3WORD	ethereum\opcodes.py	/^GSHA3WORD = 6         # Cost of SHA3 per word$/;"	v
GSLOADBYTES	ethereum\opcodes.py	/^GSLOADBYTES = 50$/;"	v
GSSIZE	ethereum\opcodes.py	/^GSSIZE = 50$/;"	v
GSTIPEND	ethereum\opcodes.py	/^GSTIPEND = 2300$/;"	v
GSTORAGEADD	ethereum\opcodes.py	/^GSTORAGEADD = 20000$/;"	v
GSTORAGEBASE	ethereum\opcodes.py	/^GSTORAGEBASE = 2500$/;"	v
GSTORAGEBYTECHANGE	ethereum\opcodes.py	/^GSTORAGEBYTECHANGE = 40$/;"	v
GSTORAGEBYTESTORAGE	ethereum\opcodes.py	/^GSTORAGEBYTESTORAGE = 250$/;"	v
GSTORAGEKILL	ethereum\opcodes.py	/^GSTORAGEKILL = 5000$/;"	v
GSTORAGEMIN	ethereum\opcodes.py	/^GSTORAGEMIN = 2500$/;"	v
GSTORAGEMOD	ethereum\opcodes.py	/^GSTORAGEMOD = 5000$/;"	v
GSTORAGEREFUND	ethereum\opcodes.py	/^GSTORAGEREFUND = 15000$/;"	v
GSUICIDEREFUND	ethereum\opcodes.py	/^GSUICIDEREFUND = 24000$/;"	v
GTXCOST	ethereum\opcodes.py	/^GTXCOST = 21000       # TX BASE GAS COST$/;"	v
GTXDATANONZERO	ethereum\opcodes.py	/^GTXDATANONZERO = 68   # TX DATA NON ZERO BYTE GAS COST$/;"	v
GTXDATAZERO	ethereum\opcodes.py	/^GTXDATAZERO = 4       # TX DATA ZERO BYTE GAS COST$/;"	v
SLOAD_SUPPLEMENTAL_GAS	ethereum\opcodes.py	/^SLOAD_SUPPLEMENTAL_GAS = 150$/;"	v
SUICIDE_SUPPLEMENTAL_GAS	ethereum\opcodes.py	/^SUICIDE_SUPPLEMENTAL_GAS = 5000$/;"	v
opcodes	ethereum\opcodes.py	/^opcodes = {$/;"	v
reverse_opcodes	ethereum\opcodes.py	/^reverse_opcodes = {}$/;"	v
chain	ethereum\pow\__init__.py	/^from ethereum.pow import chain, consensus, ethash, ethash_utils, ethpow$/;"	i
consensus	ethereum\pow\__init__.py	/^from ethereum.pow import chain, consensus, ethash, ethash_utils, ethpow$/;"	i
ethash	ethereum\pow\__init__.py	/^from ethereum.pow import chain, consensus, ethash, ethash_utils, ethpow$/;"	i
ethash_utils	ethereum\pow\__init__.py	/^from ethereum.pow import chain, consensus, ethash, ethash_utils, ethpow$/;"	i
ethpow	ethereum\pow\__init__.py	/^from ethereum.pow import chain, consensus, ethash, ethash_utils, ethpow$/;"	i
BLANK_UNCLES_HASH	ethereum\pow\chain.py	/^from ethereum.block import Block, BlockHeader, BLANK_UNCLES_HASH$/;"	i
Block	ethereum\pow\chain.py	/^from ethereum.block import Block, BlockHeader, BLANK_UNCLES_HASH$/;"	i
BlockGasLimitReached	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
BlockHeader	ethereum\pow\chain.py	/^from ethereum.block import Block, BlockHeader, BLANK_UNCLES_HASH$/;"	i
Chain	ethereum\pow\chain.py	/^class Chain(object):$/;"	c
Env	ethereum\pow\chain.py	/^from ethereum.config import Env$/;"	i
InsufficientBalance	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
InsufficientStartGas	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
InvalidNonce	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
InvalidTransaction	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
RefcountDB	ethereum\pow\chain.py	/^from ethereum.db import RefcountDB$/;"	i
State	ethereum\pow\chain.py	/^from ethereum.state import State, dict_to_prev_header$/;"	i
UnsignedTransaction	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
VerificationFailed	ethereum\pow\chain.py	/^    BlockGasLimitReached, InsufficientBalance, InvalidTransaction, VerificationFailed$/;"	i
__contains__	ethereum\pow\chain.py	/^    def __contains__(self, blk):$/;"	m	class:Chain	file:
__init__	ethereum\pow\chain.py	/^                 new_head_cb=None, reset_genesis=False, localtime=None, max_history=1000, **kwargs):$/;"	m	class:Chain
add_block	ethereum\pow\chain.py	/^    def add_block(self, block):$/;"	m	class:Chain
add_child	ethereum\pow\chain.py	/^    def add_child(self, child):$/;"	m	class:Chain
apply_block	ethereum\pow\chain.py	/^from ethereum.meta import apply_block$/;"	i
apply_transaction	ethereum\pow\chain.py	/^from ethereum.messages import apply_transaction$/;"	i
big_endian_to_int	ethereum\pow\chain.py	/^from ethereum.utils import parse_as_bin, big_endian_to_int$/;"	i
config	ethereum\pow\chain.py	/^    def config(self):$/;"	m	class:Chain
config_string	ethereum\pow\chain.py	/^config_string = ':info'  #,eth.chain:debug'$/;"	v
configure_logging	ethereum\pow\chain.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
db	ethereum\pow\chain.py	/^    def db(self):$/;"	m	class:Chain
dict_to_prev_header	ethereum\pow\chain.py	/^from ethereum.state import State, dict_to_prev_header$/;"	i
encode_hex	ethereum\pow\chain.py	/^from rlp.utils import encode_hex$/;"	i
get_block	ethereum\pow\chain.py	/^    def get_block(self, blockhash):$/;"	m	class:Chain
get_block_by_number	ethereum\pow\chain.py	/^    def get_block_by_number(self, number):$/;"	m	class:Chain
get_blockhash_by_number	ethereum\pow\chain.py	/^    def get_blockhash_by_number(self, number):$/;"	m	class:Chain
get_blockhashes_from_hash	ethereum\pow\chain.py	/^    def get_blockhashes_from_hash(self, hash, max):$/;"	m	class:Chain
get_chain	ethereum\pow\chain.py	/^    def get_chain(self, frm=None, to=2**63 - 1):$/;"	m	class:Chain
get_child_hashes	ethereum\pow\chain.py	/^    def get_child_hashes(self, blockhash):$/;"	m	class:Chain
get_children	ethereum\pow\chain.py	/^    def get_children(self, block):$/;"	m	class:Chain
get_descendants	ethereum\pow\chain.py	/^    def get_descendants(self, block):$/;"	m	class:Chain
get_logger	ethereum\pow\chain.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
get_parent	ethereum\pow\chain.py	/^    def get_parent(self, block):$/;"	m	class:Chain
get_score	ethereum\pow\chain.py	/^    def get_score(self, block):$/;"	m	class:Chain
get_transaction	ethereum\pow\chain.py	/^    def get_transaction(self, tx):$/;"	m	class:Chain
get_tx_position	ethereum\pow\chain.py	/^    def get_tx_position(self, tx):$/;"	m	class:Chain
has_block	ethereum\pow\chain.py	/^    def has_block(self, block):$/;"	m	class:Chain
has_blockhash	ethereum\pow\chain.py	/^    def has_blockhash(self, blockhash):$/;"	m	class:Chain
head	ethereum\pow\chain.py	/^    def head(self):$/;"	m	class:Chain
initialize	ethereum\pow\chain.py	/^from ethereum.pow.consensus import initialize$/;"	i
initialize_genesis_keys	ethereum\pow\chain.py	/^        initialize_genesis_keys$/;"	i
itertools	ethereum\pow\chain.py	/^import itertools$/;"	i
json	ethereum\pow\chain.py	/^import json$/;"	i
log	ethereum\pow\chain.py	/^log = get_logger('eth.chain')$/;"	v
mk_basic_state	ethereum\pow\chain.py	/^        initialize_genesis_keys$/;"	i
mk_poststate_of_blockhash	ethereum\pow\chain.py	/^    def mk_poststate_of_blockhash(self, blockhash):$/;"	m	class:Chain
parse_as_bin	ethereum\pow\chain.py	/^from ethereum.utils import parse_as_bin, big_endian_to_int$/;"	i
process_time_queue	ethereum\pow\chain.py	/^    def process_time_queue(self, new_time=None):$/;"	m	class:Chain
random	ethereum\pow\chain.py	/^import random$/;"	i
rlp	ethereum\pow\chain.py	/^import rlp$/;"	i
state_from_genesis_declaration	ethereum\pow\chain.py	/^        initialize_genesis_keys$/;"	i
time	ethereum\pow\chain.py	/^import time$/;"	i
update_block_env_variables	ethereum\pow\chain.py	/^from ethereum.common import update_block_env_variables$/;"	i
utils	ethereum\pow\chain.py	/^from ethereum import utils$/;"	i
VerificationFailed	ethereum\pow\consensus.py	/^from ethereum.exceptions import VerificationFailed$/;"	i
calc_difficulty	ethereum\pow\consensus.py	/^from ethereum.common import update_block_env_variables, calc_difficulty$/;"	i
check_pow	ethereum\pow\consensus.py	/^def check_pow(state, header):$/;"	f
ethash	ethereum\pow\consensus.py	/^from ethereum.pow import ethash, ethash_utils, ethpow$/;"	i
ethash_utils	ethereum\pow\consensus.py	/^from ethereum.pow import ethash, ethash_utils, ethpow$/;"	i
ethpow	ethereum\pow\consensus.py	/^from ethereum.pow import ethash, ethash_utils, ethpow$/;"	i
finalize	ethereum\pow\consensus.py	/^def finalize(state, block):$/;"	f
get_uncle_candidates	ethereum\pow\consensus.py	/^def get_uncle_candidates(chain, state):$/;"	f
initialize	ethereum\pow\consensus.py	/^def initialize(state, block=None):$/;"	f
rlp	ethereum\pow\consensus.py	/^import rlp$/;"	i
update_block_env_variables	ethereum\pow\consensus.py	/^from ethereum.common import update_block_env_variables, calc_difficulty$/;"	i
utils	ethereum\pow\consensus.py	/^from ethereum import utils$/;"	i
validate_uncles	ethereum\pow\consensus.py	/^def validate_uncles(state, block):$/;"	f
_get_cache	ethereum\pow\ethash.py	/^def _get_cache(seed, n):$/;"	f
cache_seeds	ethereum\pow\ethash.py	/^cache_seeds = [b'\\x00' * 32]$/;"	v
calc_dataset	ethereum\pow\ethash.py	/^def calc_dataset(full_size, cache):$/;"	f
calc_dataset_item	ethereum\pow\ethash.py	/^def calc_dataset_item(cache, i):$/;"	f
copy	ethereum\pow\ethash.py	/^import copy$/;"	i
hashimoto	ethereum\pow\ethash.py	/^def hashimoto(header, nonce, full_size, dataset_lookup):$/;"	f
hashimoto_full	ethereum\pow\ethash.py	/^def hashimoto_full(dataset, header, nonce):$/;"	f
hashimoto_light	ethereum\pow\ethash.py	/^def hashimoto_light(block_number, cache, header, nonce):$/;"	f
lru_cache	ethereum\pow\ethash.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\pow\ethash.py	/^    from repoze.lru import lru_cache$/;"	i
mine	ethereum\pow\ethash.py	/^def mine(full_size, dataset, header, difficulty):$/;"	f
mkcache	ethereum\pow\ethash.py	/^def mkcache(block_number):$/;"	f
randint	ethereum\pow\ethash.py	/^    from random import randint$/;"	i
sys	ethereum\pow\ethash.py	/^import sys$/;"	i
ACCESSES	ethereum\pow\ethash_utils.py	/^ACCESSES = 64                     # number of accesses in hashimoto loop$/;"	v
CACHE_BYTES_GROWTH	ethereum\pow\ethash_utils.py	/^CACHE_BYTES_GROWTH = 2**17        # Size of the dataset relative to the cache$/;"	v
CACHE_BYTES_INIT	ethereum\pow\ethash_utils.py	/^CACHE_BYTES_INIT = 2**24          # Size of the dataset relative to the cache$/;"	v
CACHE_ROUNDS	ethereum\pow\ethash_utils.py	/^CACHE_ROUNDS = 3                  # number of rounds in cache production$/;"	v
DATASET_BYTES_GROWTH	ethereum\pow\ethash_utils.py	/^DATASET_BYTES_GROWTH = 2**23      # growth per epoch (~7 GB per year)$/;"	v
DATASET_BYTES_INIT	ethereum\pow\ethash_utils.py	/^DATASET_BYTES_INIT = 2**30        # bytes in dataset at genesis$/;"	v
DATASET_PARENTS	ethereum\pow\ethash_utils.py	/^DATASET_PARENTS = 256             # number of parents of each dataset element$/;"	v
EPOCH_LENGTH	ethereum\pow\ethash_utils.py	/^EPOCH_LENGTH = 30000              # blocks per epoch$/;"	v
FNV_PRIME	ethereum\pow\ethash_utils.py	/^FNV_PRIME = 0x01000193$/;"	v
HASH_BYTES	ethereum\pow\ethash_utils.py	/^HASH_BYTES = 64                   # hash length in bytes$/;"	v
ListWrapper	ethereum\pow\ethash_utils.py	/^class ListWrapper(list):$/;"	c
MIX_BYTES	ethereum\pow\ethash_utils.py	/^MIX_BYTES = 128                   # width of mix$/;"	v
WORD_BYTES	ethereum\pow\ethash_utils.py	/^WORD_BYTES = 4                    # bytes in word$/;"	v
__getitem__	ethereum\pow\ethash_utils.py	/^    def __getitem__(self, i):$/;"	m	class:ListWrapper	file:
__init__	ethereum\pow\ethash_utils.py	/^    def __init__(self, data):$/;"	m	class:ListWrapper
__iter__	ethereum\pow\ethash_utils.py	/^    def __iter__(self):$/;"	m	class:ListWrapper	file:
__len__	ethereum\pow\ethash_utils.py	/^    def __len__(self):$/;"	m	class:ListWrapper	file:
__repr__	ethereum\pow\ethash_utils.py	/^    def __repr__(self):$/;"	m	class:ListWrapper	file:
_sha3	ethereum\pow\ethash_utils.py	/^    import sha3 as _sha3$/;"	i
decode_hex	ethereum\pow\ethash_utils.py	/^from rlp.utils import decode_hex$/;"	i
decode_int	ethereum\pow\ethash_utils.py	/^def decode_int(s):$/;"	f
deserialize_cache	ethereum\pow\ethash_utils.py	/^def deserialize_cache(ds):$/;"	f
deserialize_dataset	ethereum\pow\ethash_utils.py	/^deserialize_dataset = deserialize_cache$/;"	v
deserialize_hash	ethereum\pow\ethash_utils.py	/^def deserialize_hash(h):$/;"	f
encode_hex	ethereum\pow\ethash_utils.py	/^from ethereum.utils import encode_hex$/;"	i
encode_int	ethereum\pow\ethash_utils.py	/^def encode_int(s):$/;"	f
fnv	ethereum\pow\ethash_utils.py	/^def fnv(v1, v2):$/;"	f
get_cache_size	ethereum\pow\ethash_utils.py	/^def get_cache_size(block_number):$/;"	f
get_full_size	ethereum\pow\ethash_utils.py	/^def get_full_size(block_number):$/;"	f
hash_words	ethereum\pow\ethash_utils.py	/^def hash_words(h, sz, x):$/;"	f
isprime	ethereum\pow\ethash_utils.py	/^def isprime(x):$/;"	f
keccak	ethereum\pow\ethash_utils.py	/^    from Crypto.Hash import keccak$/;"	i
serialize_cache	ethereum\pow\ethash_utils.py	/^def serialize_cache(ds):$/;"	f
serialize_dataset	ethereum\pow\ethash_utils.py	/^serialize_dataset = serialize_cache$/;"	v
serialize_hash	ethereum\pow\ethash_utils.py	/^def serialize_hash(h):$/;"	f
sha3_256	ethereum\pow\ethash_utils.py	/^    sha3_256 = lambda x: _sha3.sha3_256(x).digest()$/;"	v
sha3_256	ethereum\pow\ethash_utils.py	/^    sha3_256 = lambda x: keccak.new(digest_bits=256, data=x).digest()$/;"	v
sha3_256	ethereum\pow\ethash_utils.py	/^def sha3_256(x):$/;"	f
sha3_512	ethereum\pow\ethash_utils.py	/^    sha3_512 = lambda x: _sha3.sha3_512(x).digest()$/;"	v
sha3_512	ethereum\pow\ethash_utils.py	/^    sha3_512 = lambda x: keccak.new(digest_bits=512, data=x)$/;"	v
sha3_512	ethereum\pow\ethash_utils.py	/^def sha3_512(x):$/;"	f
sys	ethereum\pow\ethash_utils.py	/^import sys$/;"	i
to_bytes	ethereum\pow\ethash_utils.py	/^def to_bytes(x):$/;"	f
xor	ethereum\pow\ethash_utils.py	/^def xor(a, b):$/;"	f
zpad	ethereum\pow\ethash_utils.py	/^def zpad(s, length):$/;"	f
EPOCH_LENGTH	ethereum\pow\ethpow.py	/^    EPOCH_LENGTH = 30000$/;"	v
ETHASH_LIB	ethereum\pow\ethpow.py	/^    ETHASH_LIB = 'ethash'$/;"	v
ETHASH_LIB	ethereum\pow\ethpow.py	/^    ETHASH_LIB = 'pyethash'  # the C++ based implementation$/;"	v
Miner	ethereum\pow\ethpow.py	/^class Miner():$/;"	c
OrderedDict	ethereum\pow\ethpow.py	/^from collections import OrderedDict$/;"	i
TT64M1	ethereum\pow\ethpow.py	/^TT64M1 = 2**64 - 1$/;"	v
__init__	ethereum\pow\ethpow.py	/^    def __init__(self, block):$/;"	m	class:Miner
cache_by_seed	ethereum\pow\ethpow.py	/^cache_by_seed = OrderedDict()$/;"	v
cache_seeds	ethereum\pow\ethpow.py	/^cache_seeds = ['\\x00' * 32]$/;"	v
check_pow	ethereum\pow\ethpow.py	/^def check_pow(block_number, header_hash, mixhash, nonce, difficulty):$/;"	f
ethash	ethereum\pow\ethpow.py	/^from ethereum.pow import ethash$/;"	i
get_cache	ethereum\pow\ethpow.py	/^def get_cache(block_number):$/;"	f
get_logger	ethereum\pow\ethpow.py	/^from ethereum.slogging import get_logger$/;"	i
hashimoto_light	ethereum\pow\ethpow.py	/^        pyethash.hashimoto_light(s, c, h, utils.big_endian_to_int(n))$/;"	v
hashimoto_light	ethereum\pow\ethpow.py	/^    hashimoto_light = ethash.hashimoto_light$/;"	v
log	ethereum\pow\ethpow.py	/^log = get_logger('eth.pow')$/;"	v
lru_cache	ethereum\pow\ethpow.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\pow\ethpow.py	/^    from repoze.lru import lru_cache$/;"	i
mine	ethereum\pow\ethpow.py	/^    def mine(self, rounds=1000, start_nonce=0):$/;"	m	class:Miner
mine	ethereum\pow\ethpow.py	/^def mine(block_number, difficulty, mining_hash, start_nonce=0, rounds=1000):$/;"	f
mkcache	ethereum\pow\ethpow.py	/^    mkcache = ethash.mkcache$/;"	v
mkcache	ethereum\pow\ethpow.py	/^    mkcache = pyethash.mkcache_bytes$/;"	v
pyethash	ethereum\pow\ethpow.py	/^    import pyethash$/;"	i
rlp	ethereum\pow\ethpow.py	/^import rlp$/;"	i
sha3	ethereum\pow\ethpow.py	/^    import sha3$/;"	i
sys	ethereum\pow\ethpow.py	/^import sys$/;"	i
time	ethereum\pow\ethpow.py	/^import time$/;"	i
utils	ethereum\pow\ethpow.py	/^from ethereum import utils$/;"	i
warnings	ethereum\pow\ethpow.py	/^import warnings$/;"	i
SecureTrie	ethereum\securetrie.py	/^class SecureTrie(object):$/;"	c
__init__	ethereum\securetrie.py	/^    def __init__(self, t):$/;"	m	class:SecureTrie
commit_death_row	ethereum\securetrie.py	/^    def commit_death_row(self, epoch):$/;"	m	class:SecureTrie
delete	ethereum\securetrie.py	/^    def delete(self, k):$/;"	m	class:SecureTrie
deletes	ethereum\securetrie.py	/^    def deletes(self):$/;"	m	class:SecureTrie
deletes	ethereum\securetrie.py	/^    def deletes(self, value):$/;"	m	class:SecureTrie
get	ethereum\securetrie.py	/^    def get(self, k):$/;"	m	class:SecureTrie
iter_branch	ethereum\securetrie.py	/^    def iter_branch(self):$/;"	m	class:SecureTrie
process_epoch	ethereum\securetrie.py	/^    def process_epoch(self, epoch):$/;"	m	class:SecureTrie
revert_epoch	ethereum\securetrie.py	/^    def revert_epoch(self, epoch):$/;"	m	class:SecureTrie
root_hash	ethereum\securetrie.py	/^    def root_hash(self):$/;"	m	class:SecureTrie
root_hash	ethereum\securetrie.py	/^    def root_hash(self, value):$/;"	m	class:SecureTrie
root_hash_valid	ethereum\securetrie.py	/^    def root_hash_valid(self):$/;"	m	class:SecureTrie
to_dict	ethereum\securetrie.py	/^    def to_dict(self):$/;"	m	class:SecureTrie
update	ethereum\securetrie.py	/^    def update(self, k, v):$/;"	m	class:SecureTrie
utils	ethereum\securetrie.py	/^from ethereum import utils$/;"	i
BoundLogger	ethereum\slogging.py	/^class BoundLogger(object):$/;"	c
DEBUG	ethereum\slogging.py	/^def DEBUG(msg, *args, **kwargs):$/;"	f
DEFAULT_LOGLEVEL	ethereum\slogging.py	/^DEFAULT_LOGLEVEL = 'INFO'$/;"	v
FILE_PREFIX	ethereum\slogging.py	/^FILE_PREFIX = '%(asctime)s'$/;"	v
FileHandler	ethereum\slogging.py	/^from logging import StreamHandler, Formatter, FileHandler$/;"	i
Formatter	ethereum\slogging.py	/^from logging import StreamHandler, Formatter, FileHandler$/;"	i
JSONEncoder	ethereum\slogging.py	/^from json.encoder import JSONEncoder$/;"	i
JSON_FORMAT	ethereum\slogging.py	/^JSON_FORMAT = '%(message)s'$/;"	v
LogRecorder	ethereum\slogging.py	/^class LogRecorder(object):$/;"	c
PRINT_FORMAT	ethereum\slogging.py	/^PRINT_FORMAT = '%(levelname)s:%(name)s\\t%(message)s'$/;"	v
RootLogger	ethereum\slogging.py	/^class RootLogger(SLogger):$/;"	c
SLogger	ethereum\slogging.py	/^class SLogger(logging.Logger):$/;"	c
SManager	ethereum\slogging.py	/^class SManager(logging.Manager):$/;"	c
StreamHandler	ethereum\slogging.py	/^from logging import StreamHandler, Formatter, FileHandler$/;"	i
TRACE	ethereum\slogging.py	/^TRACE = 5$/;"	v
_LogJSONEncoder	ethereum\slogging.py	/^class _LogJSONEncoder(JSONEncoder):$/;"	c
__init__	ethereum\slogging.py	/^    def __init__(self, disable_other_handlers=False, log_config=None):$/;"	m	class:LogRecorder
__init__	ethereum\slogging.py	/^    def __init__(self, level):$/;"	m	class:RootLogger
__init__	ethereum\slogging.py	/^    def __init__(self, logger, context):$/;"	m	class:BoundLogger
__init__	ethereum\slogging.py	/^    def __init__(self, name, level=DEFAULT_LOGLEVEL):$/;"	m	class:SLogger
__init__	ethereum\slogging.py	/^    def __init__(self, rootnode):$/;"	m	class:SManager
_add_log_record	ethereum\slogging.py	/^    def _add_log_record(self, msg):$/;"	m	class:LogRecorder
_inject_into_logger	ethereum\slogging.py	/^def _inject_into_logger(name, code, namespace=None):$/;"	f
_log	ethereum\slogging.py	/^    def _log(self, level, msg, args, **kwargs):$/;"	m	class:SLogger
_proxy	ethereum\slogging.py	/^    def _proxy(self, method_name, *args, **kwargs):$/;"	m	class:BoundLogger
_stringify_dict_keys	ethereum\slogging.py	/^def _stringify_dict_keys(input_):$/;"	f
bcolors	ethereum\slogging.py	/^from ethereum.utils import bcolors, is_numeric$/;"	i
bind	ethereum\slogging.py	/^    def bind(self, **kwargs):$/;"	m	class:BoundLogger
bind	ethereum\slogging.py	/^    def bind(self, **kwargs):$/;"	m	class:SLogger
configure	ethereum\slogging.py	/^def configure(config_string=None, log_json=False, log_file=None):$/;"	f
configure_logging	ethereum\slogging.py	/^configure_logging = configure$/;"	v
debug	ethereum\slogging.py	/^    debug = lambda self, *args, **kwargs: self._proxy('debug', *args, **kwargs)$/;"	v	class:BoundLogger
default	ethereum\slogging.py	/^    def default(self, o):$/;"	m	class:_LogJSONEncoder
error	ethereum\slogging.py	/^    error = lambda self, *args, **kwargs: self._proxy('error', *args, **kwargs)$/;"	v	class:BoundLogger
exception	ethereum\slogging.py	/^    exception = lambda self, *args, **kwargs: self._proxy('exception', *args, **kwargs)$/;"	v	class:BoundLogger
format_message	ethereum\slogging.py	/^    def format_message(self, msg, kwargs, highlight, level):$/;"	m	class:SLogger
getLogger	ethereum\slogging.py	/^    def getLogger(self, name):$/;"	m	class:SManager
getLogger	ethereum\slogging.py	/^def getLogger(name=None):$/;"	f
get_configuration	ethereum\slogging.py	/^def get_configuration():$/;"	f
get_logger	ethereum\slogging.py	/^def get_logger(name=None):$/;"	f
get_logger_names	ethereum\slogging.py	/^def get_logger_names():$/;"	f
handle	ethereum\slogging.py	/^    def handle(self, record):$/;"	m	class:RootLogger
info	ethereum\slogging.py	/^    info = lambda self, *args, **kwargs: self._proxy('info', *args, **kwargs)$/;"	v	class:BoundLogger
is_active	ethereum\slogging.py	/^    def is_active(self, level_name='trace'):$/;"	m	class:SLogger
is_numeric	ethereum\slogging.py	/^from ethereum.utils import bcolors, is_numeric$/;"	i
json	ethereum\slogging.py	/^import json$/;"	i
known_loggers	ethereum\slogging.py	/^known_loggers = set()$/;"	v
log_json	ethereum\slogging.py	/^    def log_json(self):$/;"	m	class:SLogger
log_listeners	ethereum\slogging.py	/^log_listeners = []$/;"	v
logging	ethereum\slogging.py	/^import logging$/;"	i
max_capacity	ethereum\slogging.py	/^    max_capacity = 1000 * 1000  # check we are not forgotten or abused$/;"	v	class:LogRecorder
pop_records	ethereum\slogging.py	/^    def pop_records(self):$/;"	m	class:LogRecorder
rootLogger	ethereum\slogging.py	/^rootLogger = RootLogger(DEFAULT_LOGLEVEL)$/;"	v
set_level	ethereum\slogging.py	/^def set_level(name, level):$/;"	f
textwrap	ethereum\slogging.py	/^import textwrap$/;"	i
trace	ethereum\slogging.py	/^    trace = lambda self, *args, **kwargs: self._proxy('trace', *args, **kwargs)$/;"	v	class:BoundLogger
Account	ethereum\snapshot.py	/^from ethereum.state import State, Account$/;"	i
BLANK_NODE	ethereum\snapshot.py	/^from ethereum.trie import BLANK_NODE, BLANK_ROOT$/;"	i
BLANK_ROOT	ethereum\snapshot.py	/^from ethereum.trie import BLANK_NODE, BLANK_ROOT$/;"	i
Block	ethereum\snapshot.py	/^from ethereum.block import BlockHeader, Block$/;"	i
BlockHeader	ethereum\snapshot.py	/^from ethereum.block import BlockHeader, Block$/;"	i
FakeBlock	ethereum\snapshot.py	/^class FakeBlock(object):$/;"	c
FakeHeader	ethereum\snapshot.py	/^class FakeHeader(object):$/;"	c
SecureTrie	ethereum\snapshot.py	/^from ethereum.securetrie import SecureTrie$/;"	i
State	ethereum\snapshot.py	/^from ethereum.state import State, Account$/;"	i
Trie	ethereum\snapshot.py	/^from ethereum.experimental.pruning_trie import Trie$/;"	i
__init__	ethereum\snapshot.py	/^    def __init__(self, env, header, chain_diff):$/;"	m	class:FakeBlock
__init__	ethereum\snapshot.py	/^    def __init__(self, number, hash, state_root, gas_limit, timestamp):$/;"	m	class:FakeHeader
_vbh	ethereum\snapshot.py	/^    def _vbh(state, header):$/;"	f	function:load_snapshot
_vus	ethereum\snapshot.py	/^    def _vus(state, block):$/;"	f	function:load_snapshot
big_endian_to_int	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
chain_difficulty	ethereum\snapshot.py	/^    def chain_difficulty(self):$/;"	m	class:FakeBlock
common	ethereum\snapshot.py	/^from ethereum import common$/;"	i
consensus	ethereum\snapshot.py	/^from ethereum.pow import consensus$/;"	i
create_account_snapshot	ethereum\snapshot.py	/^def create_account_snapshot(env, rlpdata):$/;"	f
create_blocks_snapshot	ethereum\snapshot.py	/^def create_blocks_snapshot(chain, base, head):$/;"	f
create_snapshot	ethereum\snapshot.py	/^def create_snapshot(chain, recent=1024):$/;"	f
create_state_snapshot	ethereum\snapshot.py	/^def create_state_snapshot(chain, block):$/;"	f
decode_hex	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
encode_hex	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
get_account	ethereum\snapshot.py	/^def get_account(env, rlpdata):$/;"	f
get_ancestor_list	ethereum\snapshot.py	/^    def get_ancestor_list(self, n):$/;"	m	class:FakeBlock
has_parent	ethereum\snapshot.py	/^    def has_parent(self):$/;"	m	class:FakeBlock
is_numeric	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
is_string	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
load_snapshot	ethereum\snapshot.py	/^def load_snapshot(chain, snapshot):$/;"	f
load_state	ethereum\snapshot.py	/^def load_state(env, alloc):$/;"	f
rlp	ethereum\snapshot.py	/^import rlp$/;"	i
scan_bin	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
snapshot_form	ethereum\snapshot.py	/^def snapshot_form(val):$/;"	f
zpad	ethereum\snapshot.py	/^from ethereum.utils import is_numeric, is_string, encode_hex, decode_hex, zpad, scan_bin, big_endian_to_int$/;"	i
ZERO_PRIVKEY_ADDR	ethereum\specials.py	/^ZERO_PRIVKEY_ADDR = decode_hex('3f17f1962b36e491b30a40b2405849e597ba5fb5')$/;"	v
ascii_chr	ethereum\specials.py	/^from rlp.utils import ascii_chr$/;"	i
bn128	ethereum\specials.py	/^    import py_ecc.optimized_bn128 as bn128$/;"	i
data	ethereum\specials.py	/^        data = 'testdata'$/;"	v	class:.msg
decode_hex	ethereum\specials.py	/^from ethereum.utils import safe_ord, decode_hex, encode_int32$/;"	i
ecdsa_raw_recover	ethereum\specials.py	/^from py_ecc.secp256k1 import privtopub, ecdsa_raw_recover, N as secp256k1n$/;"	i
encode_int32	ethereum\specials.py	/^from ethereum.utils import safe_ord, decode_hex, encode_int32$/;"	i
gas	ethereum\specials.py	/^        gas = 500$/;"	v	class:.msg
hashlib	ethereum\specials.py	/^import hashlib$/;"	i
msg	ethereum\specials.py	/^    class msg(object):$/;"	c
mult_complexity	ethereum\specials.py	/^def mult_complexity(x):$/;"	f
opcodes	ethereum\specials.py	/^from ethereum import utils, opcodes$/;"	i
privtopub	ethereum\specials.py	/^from py_ecc.secp256k1 import privtopub, ecdsa_raw_recover, N as secp256k1n$/;"	i
proc_ecadd	ethereum\specials.py	/^def proc_ecadd(ext, msg):$/;"	f
proc_ecmul	ethereum\specials.py	/^def proc_ecmul(ext, msg):$/;"	f
proc_ecpairing	ethereum\specials.py	/^def proc_ecpairing(ext, msg):$/;"	f
proc_ecrecover	ethereum\specials.py	/^def proc_ecrecover(ext, msg):$/;"	f
proc_identity	ethereum\specials.py	/^def proc_identity(ext, msg):$/;"	f
proc_modexp	ethereum\specials.py	/^def proc_modexp(ext, msg):$/;"	f
proc_ripemd160	ethereum\specials.py	/^def proc_ripemd160(ext, msg):$/;"	f
proc_sha256	ethereum\specials.py	/^def proc_sha256(ext, msg):$/;"	f
py_ecc	ethereum\specials.py	/^    import py_ecc.optimized_bn128 as bn128$/;"	i
safe_ord	ethereum\specials.py	/^from ethereum.utils import safe_ord, decode_hex, encode_int32$/;"	i
secp256k1n	ethereum\specials.py	/^from py_ecc.secp256k1 import privtopub, ecdsa_raw_recover, N as secp256k1n$/;"	i
specials	ethereum\specials.py	/^specials = {$/;"	v
utils	ethereum\specials.py	/^from ethereum import utils, opcodes$/;"	i
validate_point	ethereum\specials.py	/^def validate_point(x, y):$/;"	f
Account	ethereum\state.py	/^class Account(rlp.Serializable):$/;"	c
BLANK_HASH	ethereum\state.py	/^BLANK_HASH = utils.sha3(b'')$/;"	v
BLANK_ROOT	ethereum\state.py	/^BLANK_ROOT = utils.sha3rlp(b'')$/;"	v
BLANK_UNCLES_HASH	ethereum\state.py	/^BLANK_UNCLES_HASH = sha3(rlp.encode([]))$/;"	v
BaseDB	ethereum\state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB, RefcountDB$/;"	i
Binary	ethereum\state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
CountableList	ethereum\state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
Env	ethereum\state.py	/^from ethereum.config import default_config, Env$/;"	i
EphemDB	ethereum\state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB, RefcountDB$/;"	i
FakeHeader	ethereum\state.py	/^from ethereum.block import FakeHeader$/;"	i
OverlayDB	ethereum\state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB, RefcountDB$/;"	i
RefcountDB	ethereum\state.py	/^from ethereum.db import BaseDB, EphemDB, OverlayDB, RefcountDB$/;"	i
STATE_DEFAULTS	ethereum\state.py	/^STATE_DEFAULTS = {$/;"	v
SecureTrie	ethereum\state.py	/^from ethereum.securetrie import SecureTrie$/;"	i
State	ethereum\state.py	/^class State():$/;"	c
THREE	ethereum\state.py	/^THREE = b'\\x00' * 19 + b'\\x03'$/;"	v
Trie	ethereum\state.py	/^from ethereum.trie import Trie$/;"	i
__init__	ethereum\state.py	/^    def __init__(self, nonce, balance, storage, code_hash, env, address):$/;"	m	class:Account
__init__	ethereum\state.py	/^    def __init__(self, root=b'', env=Env(), executing_on_head=False, **kwargs):$/;"	m	class:State
account_exists	ethereum\state.py	/^    def account_exists(self, address):$/;"	m	class:State
account_to_dict	ethereum\state.py	/^    def account_to_dict(self, address):$/;"	m	class:State
add_block_header	ethereum\state.py	/^    def add_block_header(self, block_header):$/;"	m	class:State
add_log	ethereum\state.py	/^    def add_log(self, log):$/;"	m	class:State
add_receipt	ethereum\state.py	/^    def add_receipt(self, receipt):$/;"	m	class:State
add_refund	ethereum\state.py	/^    def add_refund(self, value):$/;"	m	class:State
add_suicide	ethereum\state.py	/^    def add_suicide(self, address):$/;"	m	class:State
address	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
big_endian_int	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
big_endian_int	ethereum\state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
big_endian_to_int	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
binary	ethereum\state.py	/^from rlp.sedes import big_endian_int, Binary, binary, CountableList$/;"	i
blank_account	ethereum\state.py	/^    def blank_account(cls, env, address, initial_nonce=0):$/;"	m	class:Account
code	ethereum\state.py	/^    def code(self):$/;"	m	class:Account
code	ethereum\state.py	/^    def code(self, value):$/;"	m	class:Account
commit	ethereum\state.py	/^    def commit(self):$/;"	m	class:Account
commit	ethereum\state.py	/^    def commit(self, allow_empties=False):$/;"	m	class:State
config	ethereum\state.py	/^    def config(self):$/;"	m	class:State
copy	ethereum\state.py	/^import copy$/;"	i
db	ethereum\state.py	/^    def db(self):$/;"	m	class:State
decode_hex	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
default_config	ethereum\state.py	/^from ethereum.config import default_config, Env$/;"	i
default_specials	ethereum\state.py	/^from ethereum.specials import specials as default_specials$/;"	i
del_account	ethereum\state.py	/^    def del_account(self, address):$/;"	m	class:State
delta_balance	ethereum\state.py	/^    def delta_balance(self, address, value):$/;"	m	class:State
dict_to_prev_header	ethereum\state.py	/^def dict_to_prev_header(h):$/;"	f
encode_hex	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
encode_int	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
ephemeral_clone	ethereum\state.py	/^    def ephemeral_clone(self):$/;"	m	class:State
exists	ethereum\state.py	/^    def exists(self):$/;"	m	class:Account
fields	ethereum\state.py	/^    fields = [$/;"	v	class:Account
from_snapshot	ethereum\state.py	/^    def from_snapshot(cls, snapshot_data, env, executing_on_head=False):$/;"	m	class:State
get_and_cache_account	ethereum\state.py	/^    def get_and_cache_account(self, address):$/;"	m	class:State
get_balance	ethereum\state.py	/^    def get_balance(self, address):$/;"	m	class:State
get_block_hash	ethereum\state.py	/^    def get_block_hash(self, n):$/;"	m	class:State
get_code	ethereum\state.py	/^    def get_code(self, address):$/;"	m	class:State
get_nonce	ethereum\state.py	/^    def get_nonce(self, address):$/;"	m	class:State
get_storage_data	ethereum\state.py	/^    def get_storage_data(self, address, key):$/;"	m	class:State
get_storage_data	ethereum\state.py	/^    def get_storage_data(self, key):$/;"	m	class:Account
hash32	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
increment_nonce	ethereum\state.py	/^    def increment_nonce(self, address):$/;"	m	class:State
int256	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
int_to_addr	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
is_ANTI_DOS	ethereum\state.py	/^    def is_ANTI_DOS(self, at_fork_height=False):$/;"	m	class:State
is_DAO	ethereum\state.py	/^    def is_DAO(self, at_fork_height=False):$/;"	m	class:State
is_HOMESTEAD	ethereum\state.py	/^    def is_HOMESTEAD(self, at_fork_height=False):$/;"	m	class:State
is_METROPOLIS	ethereum\state.py	/^    def is_METROPOLIS(self, at_fork_height=False):$/;"	m	class:State
is_SERENITY	ethereum\state.py	/^    def is_SERENITY(self, at_fork_height=False):$/;"	m	class:State
is_SPURIOUS_DRAGON	ethereum\state.py	/^    def is_SPURIOUS_DRAGON(self, at_fork_height=False):$/;"	m	class:State
is_blank	ethereum\state.py	/^    def is_blank(self):$/;"	m	class:Account
is_numeric	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
is_string	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
lru_cache	ethereum\state.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\state.py	/^    from repoze.lru import lru_cache$/;"	i
normalize_address	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
parse_as_bin	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
parse_as_int	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
prev_header_to_dict	ethereum\state.py	/^def prev_header_to_dict(h):$/;"	f
reset_storage	ethereum\state.py	/^    def reset_storage(self, address):$/;"	m	class:State
revert	ethereum\state.py	/^    def revert(self, snapshot):$/;"	m	class:State
rlp	ethereum\state.py	/^import rlp$/;"	i
set_and_journal	ethereum\state.py	/^    def set_and_journal(self, acct, param, val):$/;"	m	class:State
set_balance	ethereum\state.py	/^    def set_balance(self, address, value):$/;"	m	class:State
set_code	ethereum\state.py	/^    def set_code(self, address, value):$/;"	m	class:State
set_nonce	ethereum\state.py	/^    def set_nonce(self, address, value):$/;"	m	class:State
set_param	ethereum\state.py	/^    def set_param(self, k, v):$/;"	m	class:State
set_storage_data	ethereum\state.py	/^    def set_storage_data(self, address, key, value):$/;"	m	class:State
set_storage_data	ethereum\state.py	/^    def set_storage_data(self, key, value):$/;"	m	class:Account
sha3	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
snapshot	ethereum\state.py	/^    def snapshot(self):$/;"	m	class:State
snapshot_form	ethereum\state.py	/^def snapshot_form(val):$/;"	f
sys	ethereum\state.py	/^import sys$/;"	i
to_dict	ethereum\state.py	/^    def to_dict(self):$/;"	m	class:Account
to_dict	ethereum\state.py	/^    def to_dict(self):$/;"	m	class:State
to_snapshot	ethereum\state.py	/^    def to_snapshot(self, root_only=False, no_prevblocks=False):$/;"	m	class:State
transfer_value	ethereum\state.py	/^    def transfer_value(self, from_addr, to_addr, value):$/;"	m	class:State
trie	ethereum\state.py	/^from ethereum import trie$/;"	i
trie_root	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
utils	ethereum\state.py	/^from ethereum import utils$/;"	i
zpad	ethereum\state.py	/^    decode_hex, sha3, is_string, is_numeric$/;"	i
abi	ethereum\tests\test_abi.py	/^import ethereum.abi as abi$/;"	i
ethereum	ethereum\tests\test_abi.py	/^import ethereum.abi as abi$/;"	i
ethereum	ethereum\tests\test_abi.py	/^import ethereum.tools.testutils as testutils$/;"	i
get_logger	ethereum\tests\test_abi.py	/^from ethereum.slogging import get_logger$/;"	i
logger	ethereum\tests\test_abi.py	/^logger = get_logger()$/;"	v
os	ethereum\tests\test_abi.py	/^import os$/;"	i
pytest	ethereum\tests\test_abi.py	/^import pytest$/;"	i
pytest_generate_tests	ethereum\tests\test_abi.py	/^def pytest_generate_tests(metafunc):$/;"	f
test_abi_decode_single_bytes	ethereum\tests\test_abi.py	/^def test_abi_decode_single_bytes():$/;"	f
test_abi_decode_single_fixed	ethereum\tests\test_abi.py	/^def test_abi_decode_single_fixed():$/;"	f
test_abi_decode_single_hash	ethereum\tests\test_abi.py	/^def test_abi_decode_single_hash():$/;"	f
test_abi_encode_fixed_size_array	ethereum\tests\test_abi.py	/^def test_abi_encode_fixed_size_array():$/;"	f
test_abi_encode_signed_int	ethereum\tests\test_abi.py	/^def test_abi_encode_signed_int():$/;"	f
test_abi_encode_single_fixed	ethereum\tests\test_abi.py	/^def test_abi_encode_single_fixed():$/;"	f
test_abi_encode_single_hash	ethereum\tests\test_abi.py	/^def test_abi_encode_single_hash():$/;"	f
test_abi_encode_single_int	ethereum\tests\test_abi.py	/^def test_abi_encode_single_int():$/;"	f
test_abi_encode_single_prefixed_address	ethereum\tests\test_abi.py	/^def test_abi_encode_single_prefixed_address():$/;"	f
test_abi_encode_single_ufixed	ethereum\tests\test_abi.py	/^def test_abi_encode_single_ufixed():$/;"	f
test_abi_encode_var_sized_array	ethereum\tests\test_abi.py	/^def test_abi_encode_var_sized_array():$/;"	f
test_state	ethereum\tests\test_abi.py	/^def test_state(filename, testname, testdata):$/;"	f
testutils	ethereum\tests\test_abi.py	/^import ethereum.tools.testutils as testutils$/;"	i
tools	ethereum\tests\test_abi.py	/^import ethereum.tools.testutils as testutils$/;"	i
zpad	ethereum\tests\test_abi.py	/^from ethereum.utils import zpad$/;"	i
Block	ethereum\tests\test_blocks.py	/^from ethereum.block import Block$/;"	i
DecodingError	ethereum\tests\test_blocks.py	/^from rlp import DecodingError, DeserializationError$/;"	i
DeserializationError	ethereum\tests\test_blocks.py	/^from rlp import DecodingError, DeserializationError$/;"	i
Env	ethereum\tests\test_blocks.py	/^from ethereum.config import Env$/;"	i
InvalidNonce	ethereum\tests\test_blocks.py	/^from ethereum.exceptions import VerificationFailed, InvalidTransaction, InvalidNonce$/;"	i
InvalidTransaction	ethereum\tests\test_blocks.py	/^from ethereum.exceptions import VerificationFailed, InvalidTransaction, InvalidNonce$/;"	i
VerificationFailed	ethereum\tests\test_blocks.py	/^from ethereum.exceptions import VerificationFailed, InvalidTransaction, InvalidNonce$/;"	i
chain	ethereum\tests\test_blocks.py	/^from ethereum.pow import chain$/;"	i
configure_logging	ethereum\tests\test_blocks.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
copy	ethereum\tests\test_blocks.py	/^import copy$/;"	i
db	ethereum\tests\test_blocks.py	/^from ethereum import utils, db$/;"	i
decode_hex	ethereum\tests\test_blocks.py	/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;"	i
encode_hex	ethereum\tests\test_blocks.py	/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;"	i
ethereum	ethereum\tests\test_blocks.py	/^import ethereum.tools.testutils as testutils$/;"	i
exclude	ethereum\tests\test_blocks.py	/^def exclude(filename, testname, _):$/;"	f
get_config_overrides	ethereum\tests\test_blocks.py	/^def get_config_overrides(filename, testname):$/;"	f
get_logger	ethereum\tests\test_blocks.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
initialize_genesis_keys	ethereum\tests\test_blocks.py	/^from ethereum.genesis_helpers import state_from_genesis_declaration, initialize_genesis_keys$/;"	i
logger	ethereum\tests\test_blocks.py	/^logger = get_logger()$/;"	v
main	ethereum\tests\test_blocks.py	/^def main():$/;"	f
os	ethereum\tests\test_blocks.py	/^import os$/;"	i
pytest	ethereum\tests\test_blocks.py	/^import pytest$/;"	i
pytest_generate_tests	ethereum\tests\test_blocks.py	/^def pytest_generate_tests(metafunc):$/;"	f
rlp	ethereum\tests\test_blocks.py	/^import rlp$/;"	i
run_block_test	ethereum\tests\test_blocks.py	/^def run_block_test(params, config_overrides=None):$/;"	f
safe_decode	ethereum\tests\test_blocks.py	/^def safe_decode(x):$/;"	f
skips	ethereum\tests\test_blocks.py	/^skips = {$/;"	v
state_from_genesis_declaration	ethereum\tests\test_blocks.py	/^from ethereum.genesis_helpers import state_from_genesis_declaration, initialize_genesis_keys$/;"	i
str_to_bytes	ethereum\tests\test_blocks.py	/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;"	i
sys	ethereum\tests\test_blocks.py	/^import sys$/;"	i
test_block	ethereum\tests\test_blocks.py	/^def test_block(filename, testname, testdata):$/;"	f
testutils	ethereum\tests\test_blocks.py	/^import ethereum.tools.testutils as testutils$/;"	i
tools	ethereum\tests\test_blocks.py	/^import ethereum.tools.testutils as testutils$/;"	i
translate_keys	ethereum\tests\test_blocks.py	/^def translate_keys(olddict, keymap, valueconv, deletes):$/;"	f
translator_list	ethereum\tests\test_blocks.py	/^translator_list = {$/;"	v
utils	ethereum\tests\test_blocks.py	/^from ethereum import utils, db$/;"	i
valueconv	ethereum\tests\test_blocks.py	/^def valueconv(k, v):$/;"	f
Log	ethereum\tests\test_bloom.py	/^from ethereum.messages import Log$/;"	i
bloom	ethereum\tests\test_bloom.py	/^import ethereum.bloom as bloom$/;"	i
check_testdata	ethereum\tests\test_bloom.py	/^def check_testdata(data_keys, expected_keys):$/;"	f
decode_hex	ethereum\tests\test_bloom.py	/^from rlp.utils import decode_hex, str_to_bytes$/;"	i
decode_int_from_hex	ethereum\tests\test_bloom.py	/^def decode_int_from_hex(x):$/;"	f
do_test_bloom	ethereum\tests\test_bloom.py	/^def do_test_bloom(test_logs):$/;"	f
encode_hex	ethereum\tests\test_bloom.py	/^from ethereum.utils import encode_hex$/;"	i
encode_hex_from_int	ethereum\tests\test_bloom.py	/^def encode_hex_from_int(x):$/;"	f
ethereum	ethereum\tests\test_bloom.py	/^import ethereum.bloom as bloom$/;"	i
ethereum	ethereum\tests\test_bloom.py	/^import ethereum.tools.testutils as testutils$/;"	i
ethereum	ethereum\tests\test_bloom.py	/^import ethereum.utils as utils$/;"	i
gen_func	ethereum\tests\test_bloom.py	/^def gen_func(testdata):$/;"	f
json	ethereum\tests\test_bloom.py	/^import json$/;"	i
os	ethereum\tests\test_bloom.py	/^import os$/;"	i
pytest	ethereum\tests\test_bloom.py	/^import pytest$/;"	i
str_to_bytes	ethereum\tests\test_bloom.py	/^from rlp.utils import decode_hex, str_to_bytes$/;"	i
testutils	ethereum\tests\test_bloom.py	/^import ethereum.tools.testutils as testutils$/;"	i
tools	ethereum\tests\test_bloom.py	/^import ethereum.tools.testutils as testutils$/;"	i
utils	ethereum\tests\test_bloom.py	/^import ethereum.utils as utils$/;"	i
vm_tests_fixtures	ethereum\tests\test_bloom.py	/^def vm_tests_fixtures():$/;"	f
Block	ethereum\tests\test_chain.py	/^from ethereum.block import Block$/;"	i
Chain	ethereum\tests\test_chain.py	/^from ethereum.pow.chain import Chain$/;"	i
EphemDB	ethereum\tests\test_chain.py	/^from ethereum.db import EphemDB$/;"	i
State	ethereum\tests\test_chain.py	/^from ethereum.state import State$/;"	i
TransactionQueue	ethereum\tests\test_chain.py	/^from ethereum.transaction_queue import TransactionQueue$/;"	i
_db	ethereum\tests\test_chain.py	/^_db = new_db()$/;"	v
accounts	ethereum\tests\test_chain.py	/^def accounts():$/;"	f
alt_db	ethereum\tests\test_chain.py	/^alt_db = db$/;"	v
db	ethereum\tests\test_chain.py	/^def db():$/;"	f
decode_hex	ethereum\tests\test_chain.py	/^from rlp.utils import decode_hex, encode_hex$/;"	i
encode_hex	ethereum\tests\test_chain.py	/^from rlp.utils import decode_hex, encode_hex$/;"	i
ethereum	ethereum\tests\test_chain.py	/^import ethereum.messages as messages$/;"	i
ethereum	ethereum\tests\test_chain.py	/^import ethereum.meta as meta$/;"	i
ethereum	ethereum\tests\test_chain.py	/^import ethereum.pow.ethpow as ethpow$/;"	i
ethereum	ethereum\tests\test_chain.py	/^import ethereum.transactions as transactions$/;"	i
ethereum	ethereum\tests\test_chain.py	/^import ethereum.utils as utils$/;"	i
ethpow	ethereum\tests\test_chain.py	/^import ethereum.pow.ethpow as ethpow$/;"	i
get_consensus_strategy	ethereum\tests\test_chain.py	/^from ethereum.consensus_strategy import get_consensus_strategy$/;"	i
get_logger	ethereum\tests\test_chain.py	/^from ethereum.slogging import get_logger$/;"	i
get_transaction	ethereum\tests\test_chain.py	/^def get_transaction(gasprice=0, nonce=0):$/;"	f
logger	ethereum\tests\test_chain.py	/^logger = get_logger()$/;"	v
messages	ethereum\tests\test_chain.py	/^import ethereum.messages as messages$/;"	i
meta	ethereum\tests\test_chain.py	/^import ethereum.meta as meta$/;"	i
mine_next_block	ethereum\tests\test_chain.py	/^def mine_next_block(chain, coinbase=None, transactions=[]):$/;"	f
mine_on_chain	ethereum\tests\test_chain.py	/^def mine_on_chain(chain, parent=None, transactions=[], coinbase=None, timestamp=None):$/;"	f
new_db	ethereum\tests\test_chain.py	/^from ethereum.tests.utils import new_db$/;"	i
pow	ethereum\tests\test_chain.py	/^import ethereum.pow.ethpow as ethpow$/;"	i
pytest	ethereum\tests\test_chain.py	/^import pytest$/;"	i
rlp	ethereum\tests\test_chain.py	/^import rlp$/;"	i
test_add_longer_side_chain	ethereum\tests\test_chain.py	/^def test_add_longer_side_chain(db, alt_db):$/;"	f
test_add_side_chain	ethereum\tests\test_chain.py	/^def test_add_side_chain(db, alt_db):$/;"	f
test_block_serialization_with_transaction_empty_genesis	ethereum\tests\test_chain.py	/^def test_block_serialization_with_transaction_empty_genesis(db):$/;"	f
test_failing_transfer	ethereum\tests\test_chain.py	/^def test_failing_transfer(db):$/;"	f
test_genesis_chain	ethereum\tests\test_chain.py	/^def test_genesis_chain(db):$/;"	f
test_invalid_transaction	ethereum\tests\test_chain.py	/^def test_invalid_transaction(db):$/;"	f
test_mine_block	ethereum\tests\test_chain.py	/^def test_mine_block(db):$/;"	f
test_mine_block_with_transaction	ethereum\tests\test_chain.py	/^def test_mine_block_with_transaction(db):$/;"	f
test_mine_block_with_transaction2	ethereum\tests\test_chain.py	/^def test_mine_block_with_transaction2(db):$/;"	f
test_mine_block_with_transaction3	ethereum\tests\test_chain.py	/^def test_mine_block_with_transaction3(db):$/;"	f
test_mining	ethereum\tests\test_chain.py	/^def test_mining(db):$/;"	f
test_prevhash	ethereum\tests\test_chain.py	/^def test_prevhash(db):$/;"	f
test_reward_uncles	ethereum\tests\test_chain.py	/^def test_reward_uncles(db):$/;"	f
test_simple_chain	ethereum\tests\test_chain.py	/^def test_simple_chain(db):$/;"	f
test_transaction	ethereum\tests\test_chain.py	/^def test_transaction(db):$/;"	f
test_transaction_serialization	ethereum\tests\test_chain.py	/^def test_transaction_serialization():$/;"	f
test_transfer	ethereum\tests\test_chain.py	/^def test_transfer(db):$/;"	f
transactions	ethereum\tests\test_chain.py	/^import ethereum.transactions as transactions$/;"	i
utils	ethereum\tests\test_chain.py	/^import ethereum.utils as utils$/;"	i
compress	ethereum\tests\test_compress.py	/^from ethereum import compress, utils$/;"	i
test_compress	ethereum\tests\test_compress.py	/^def test_compress():$/;"	f
test_compress_fail	ethereum\tests\test_compress.py	/^def test_compress_fail():$/;"	f
utils	ethereum\tests\test_compress.py	/^from ethereum import compress, utils$/;"	i
abi	ethereum\tests\test_contracts.py	/^from ethereum import utils, abi$/;"	i
big_endian_to_int	ethereum\tests\test_contracts.py	/^from ethereum.utils import safe_ord, big_endian_to_int$/;"	i
bitcoin	ethereum\tests\test_contracts.py	/^import bitcoin$/;"	i
decode_hex	ethereum\tests\test_contracts.py	/^from rlp.utils import decode_hex$/;"	i
filename	ethereum\tests\test_contracts.py	/^filename = "mul2_qwertyuioplkjhgfdsa.se"$/;"	v
filename2	ethereum\tests\test_contracts.py	/^filename2 = "inner_qwertyuioplkjhgfdsa.se"$/;"	v
filename25	ethereum\tests\test_contracts.py	/^filename25 = "inner_qwertyuioplkjhgfdsa.se"$/;"	v
filename3	ethereum\tests\test_contracts.py	/^filename3 = "stateless_qwertyuioplkjhgfdsa.se"$/;"	v
filename4	ethereum\tests\test_contracts.py	/^filename4 = "nfitc2635987162498621846198246.se"$/;"	v
filename5	ethereum\tests\test_contracts.py	/^filename5 = 'abi_output_tester_1264876521746198724124'$/;"	v
filename9	ethereum\tests\test_contracts.py	/^filename9 = "mul2_qwertyuioplkjhgfdsabarbar.se"$/;"	v
os	ethereum\tests\test_contracts.py	/^import os$/;"	i
pytest	ethereum\tests\test_contracts.py	/^import pytest$/;"	i
safe_ord	ethereum\tests\test_contracts.py	/^from ethereum.utils import safe_ord, big_endian_to_int$/;"	i
serpent	ethereum\tests\test_contracts.py	/^import serpent$/;"	i
test_abi_address_output	ethereum\tests\test_contracts.py	/^def test_abi_address_output():$/;"	f
test_abi_contract	ethereum\tests\test_contracts.py	/^def test_abi_contract():$/;"	f
test_abi_logging	ethereum\tests\test_contracts.py	/^def test_abi_logging():$/;"	f
test_argcall	ethereum\tests\test_contracts.py	/^def test_argcall():$/;"	f
test_argcall2	ethereum\tests\test_contracts.py	/^def test_argcall2():$/;"	f
test_array	ethereum\tests\test_contracts.py	/^def test_array():$/;"	f
test_array2	ethereum\tests\test_contracts.py	/^def test_array2():$/;"	f
test_array3	ethereum\tests\test_contracts.py	/^def test_array3():$/;"	f
test_callcode	ethereum\tests\test_contracts.py	/^def test_callcode():$/;"	f
test_calls	ethereum\tests\test_contracts.py	/^def test_calls():$/;"	f
test_crowdfund	ethereum\tests\test_contracts.py	/^def test_crowdfund():$/;"	f
test_currency	ethereum\tests\test_contracts.py	/^def test_currency():$/;"	f
test_data_feeds	ethereum\tests\test_contracts.py	/^def test_data_feeds():$/;"	f
test_delegatecall	ethereum\tests\test_contracts.py	/^def test_delegatecall():$/;"	f
test_double_array	ethereum\tests\test_contracts.py	/^def test_double_array():$/;"	f
test_ecrecover	ethereum\tests\test_contracts.py	/^def test_ecrecover():$/;"	f
test_evm	ethereum\tests\test_contracts.py	/^def test_evm():$/;"	f
test_hedge	ethereum\tests\test_contracts.py	/^def test_hedge():$/;"	f
test_indirect_sort	ethereum\tests\test_contracts.py	/^def test_indirect_sort():$/;"	f
test_infinite_storage_objects	ethereum\tests\test_contracts.py	/^def test_infinite_storage_objects():$/;"	f
test_inner_abi_address_output	ethereum\tests\test_contracts.py	/^def test_inner_abi_address_output():$/;"	f
test_inset	ethereum\tests\test_contracts.py	/^def test_inset():$/;"	f
test_inset2	ethereum\tests\test_contracts.py	/^def test_inset2():$/;"	f
test_lifo	ethereum\tests\test_contracts.py	/^def test_lifo():$/;"	f
test_macros	ethereum\tests\test_contracts.py	/^def test_macros():$/;"	f
test_mcopy	ethereum\tests\test_contracts.py	/^def test_mcopy():$/;"	f
test_mcopy2	ethereum\tests\test_contracts.py	/^def test_mcopy2():$/;"	f
test_more_infinite_storage	ethereum\tests\test_contracts.py	/^def test_more_infinite_storage():$/;"	f
test_more_infinites	ethereum\tests\test_contracts.py	/^def test_more_infinites():$/;"	f
test_multiarg_code	ethereum\tests\test_contracts.py	/^def test_multiarg_code():$/;"	f
test_namecoin	ethereum\tests\test_contracts.py	/^def test_namecoin():$/;"	f
test_new_format	ethereum\tests\test_contracts.py	/^def test_new_format():$/;"	f
test_params_contract	ethereum\tests\test_contracts.py	/^def test_params_contract():$/;"	f
test_prefix_types_in_functions	ethereum\tests\test_contracts.py	/^def test_prefix_types_in_functions():$/;"	f
test_returnarray_code	ethereum\tests\test_contracts.py	/^def test_returnarray_code():$/;"	f
test_returnten	ethereum\tests\test_contracts.py	/^def test_returnten():$/;"	f
test_reverter	ethereum\tests\test_contracts.py	/^def test_reverter():$/;"	f
test_ripemd160	ethereum\tests\test_contracts.py	/^def test_ripemd160():$/;"	f
test_saveload	ethereum\tests\test_contracts.py	/^def test_saveload():$/;"	f
test_saveload2	ethereum\tests\test_contracts.py	/^def test_saveload2():$/;"	f
test_saveload3	ethereum\tests\test_contracts.py	/^def test_saveload3():$/;"	f
test_sdiv	ethereum\tests\test_contracts.py	/^def test_sdiv():$/;"	f
test_sha256	ethereum\tests\test_contracts.py	/^def test_sha256():$/;"	f
test_sha3	ethereum\tests\test_contracts.py	/^def test_sha3():$/;"	f
test_sixten	ethereum\tests\test_contracts.py	/^def test_sixten():$/;"	f
test_sort	ethereum\tests\test_contracts.py	/^def test_sort():$/;"	f
test_storage_objects	ethereum\tests\test_contracts.py	/^def test_storage_objects():$/;"	f
test_storagevar_fails	ethereum\tests\test_contracts.py	/^def test_storagevar_fails():$/;"	f
test_string_logging	ethereum\tests\test_contracts.py	/^def test_string_logging():$/;"	f
test_string_manipulation	ethereum\tests\test_contracts.py	/^def test_string_manipulation():$/;"	f
test_suicider	ethereum\tests\test_contracts.py	/^def test_suicider():$/;"	f
test_type_system_fails	ethereum\tests\test_contracts.py	/^def test_type_system_fails():$/;"	f
test_types	ethereum\tests\test_contracts.py	/^def test_types():$/;"	f
test_types_in_functions	ethereum\tests\test_contracts.py	/^def test_types_in_functions():$/;"	f
test_with	ethereum\tests\test_contracts.py	/^def test_with():$/;"	f
tester	ethereum\tests\test_contracts.py	/^from ethereum.tools import tester$/;"	i
utils	ethereum\tests\test_contracts.py	/^from ethereum import utils, abi$/;"	i
_EphemDB	ethereum\tests\test_db.py	/^from ethereum.db import _EphemDB$/;"	i
alt_content	ethereum\tests\test_db.py	/^alt_content = {key: random_string(32) for key in content}$/;"	v
ascii_chr	ethereum\tests\test_db.py	/^from rlp.utils import ascii_chr$/;"	i
content	ethereum\tests\test_db.py	/^content = {random_string(lk): random_string(lv)$/;"	v
itertools	ethereum\tests\test_db.py	/^import itertools$/;"	i
pytest	ethereum\tests\test_db.py	/^import pytest$/;"	i
random	ethereum\tests\test_db.py	/^import random$/;"	i
random_string	ethereum\tests\test_db.py	/^def random_string(length):$/;"	f
test_ephem	ethereum\tests\test_db.py	/^def test_ephem():$/;"	f
Block	ethereum\tests\test_difficulty.py	/^from ethereum.block import Block, BlockHeader$/;"	i
BlockHeader	ethereum\tests\test_difficulty.py	/^from ethereum.block import Block, BlockHeader$/;"	i
State	ethereum\tests\test_difficulty.py	/^from ethereum.state import State$/;"	i
calc_difficulty	ethereum\tests\test_difficulty.py	/^from ethereum.common import calc_difficulty$/;"	i
config	ethereum\tests\test_difficulty.py	/^import ethereum.config as config$/;"	i
ethereum	ethereum\tests\test_difficulty.py	/^import ethereum.config as config$/;"	i
ethereum	ethereum\tests\test_difficulty.py	/^import ethereum.tools.testutils as testutils$/;"	i
ethereum	ethereum\tests\test_difficulty.py	/^import ethereum.utils as utils$/;"	i
get_logger	ethereum\tests\test_difficulty.py	/^from ethereum.slogging import get_logger$/;"	i
json	ethereum\tests\test_difficulty.py	/^import json$/;"	i
logger	ethereum\tests\test_difficulty.py	/^logger = get_logger()$/;"	v
main	ethereum\tests\test_difficulty.py	/^def main():$/;"	f
not_a_difficulty_test	ethereum\tests\test_difficulty.py	/^def not_a_difficulty_test(filename, testname, testdata):$/;"	f
os	ethereum\tests\test_difficulty.py	/^import os$/;"	i
pdb	ethereum\tests\test_difficulty.py	/^    import pdb; pdb.set_trace()$/;"	i
pytest_generate_tests	ethereum\tests\test_difficulty.py	/^def pytest_generate_tests(metafunc):$/;"	f
rlp	ethereum\tests\test_difficulty.py	/^import rlp$/;"	i
set_trace	ethereum\tests\test_difficulty.py	/^    import pdb; pdb.set_trace()$/;"	i
sys	ethereum\tests\test_difficulty.py	/^import sys$/;"	i
test_difficulty	ethereum\tests\test_difficulty.py	/^def test_difficulty(filename, testname, testdata):$/;"	f
testutils	ethereum\tests\test_difficulty.py	/^import ethereum.tools.testutils as testutils$/;"	i
tools	ethereum\tests\test_difficulty.py	/^import ethereum.tools.testutils as testutils$/;"	i
utils	ethereum\tests\test_difficulty.py	/^import ethereum.utils as utils$/;"	i
blocks_genesis	ethereum\tests\test_genesis.py	/^def blocks_genesis(*args):  # FIXME!$/;"	f
encode_hex	ethereum\tests\test_genesis.py	/^from ethereum.utils import encode_hex$/;"	i
ethereum	ethereum\tests\test_genesis.py	/^import ethereum.utils as utils$/;"	i
genesis_fixture	ethereum\tests\test_genesis.py	/^def genesis_fixture():$/;"	f
get_logger	ethereum\tests\test_genesis.py	/^from ethereum.slogging import get_logger$/;"	i
json	ethereum\tests\test_genesis.py	/^import json$/;"	i
logger	ethereum\tests\test_genesis.py	/^logger = get_logger()$/;"	v
new_env	ethereum\tests\test_genesis.py	/^from ethereum.tests.utils import new_env$/;"	i
os	ethereum\tests\test_genesis.py	/^import os$/;"	i
pytest	ethereum\tests\test_genesis.py	/^import pytest$/;"	i
test_genesis_hash	ethereum\tests\test_genesis.py	/^def test_genesis_hash(genesis_fixture):$/;"	f
test_genesis_initial_alloc	ethereum\tests\test_genesis.py	/^def test_genesis_initial_alloc(genesis_fixture):$/;"	f
test_genesis_state_root	ethereum\tests\test_genesis.py	/^def test_genesis_state_root(genesis_fixture):$/;"	f
testutils	ethereum\tests\test_genesis.py	/^from ethereum.tools import testutils$/;"	i
utils	ethereum\tests\test_genesis.py	/^import ethereum.utils as utils$/;"	i
ethereum	ethereum\tests\test_keys.py	/^import ethereum.tools.keys as keys$/;"	i
ethereum	ethereum\tests\test_keys.py	/^import ethereum.tools.testutils as testutils$/;"	i
ethereum	ethereum\tests\test_keys.py	/^import ethereum.utils as utils$/;"	i
get_logger	ethereum\tests\test_keys.py	/^from ethereum.slogging import get_logger$/;"	i
keys	ethereum\tests\test_keys.py	/^import ethereum.tools.keys as keys$/;"	i
logger	ethereum\tests\test_keys.py	/^logger = get_logger()$/;"	v
os	ethereum\tests\test_keys.py	/^import os$/;"	i
pytest_generate_tests	ethereum\tests\test_keys.py	/^def pytest_generate_tests(metafunc):$/;"	f
test_key	ethereum\tests\test_keys.py	/^def test_key(filename, testname, testdata,):$/;"	f
testutils	ethereum\tests\test_keys.py	/^import ethereum.tools.testutils as testutils$/;"	i
tools	ethereum\tests\test_keys.py	/^import ethereum.tools.keys as keys$/;"	i
tools	ethereum\tests\test_keys.py	/^import ethereum.tools.testutils as testutils$/;"	i
utils	ethereum\tests\test_keys.py	/^import ethereum.utils as utils$/;"	i
opcode_gas	ethereum\tests\test_opcodes.py	/^opcode_gas = {$/;"	v
opcodes	ethereum\tests\test_opcodes.py	/^from ethereum import opcodes$/;"	i
test_eip150_opcode_gascost	ethereum\tests\test_opcodes.py	/^def test_eip150_opcode_gascost():$/;"	f
block	ethereum\tests\test_serialization.py	/^from ethereum import block$/;"	i
filename	ethereum\tests\test_serialization.py	/^filename = "mul2_qwertyuioplkjhgfdsa.se"$/;"	v
pytest	ethereum\tests\test_serialization.py	/^import pytest$/;"	i
rlp	ethereum\tests\test_serialization.py	/^import rlp$/;"	i
test_returnten	ethereum\tests\test_serialization.py	/^def test_returnten():$/;"	f
tester	ethereum\tests\test_serialization.py	/^from ethereum.tools import tester$/;"	i
checker	ethereum\tests\test_state.py	/^checker = new_statetest_utils.verify_state_test$/;"	v
configure_logging	ethereum\tests\test_state.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
ethereum	ethereum\tests\test_state.py	/^import ethereum.tools.new_statetest_utils as new_statetest_utils$/;"	i
ethereum	ethereum\tests\test_state.py	/^import ethereum.tools.testutils as testutils$/;"	i
get_logger	ethereum\tests\test_state.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
json	ethereum\tests\test_state.py	/^import json$/;"	i
logger	ethereum\tests\test_state.py	/^logger = get_logger()$/;"	v
main	ethereum\tests\test_state.py	/^def main():$/;"	f
new_statetest_utils	ethereum\tests\test_state.py	/^import ethereum.tools.new_statetest_utils as new_statetest_utils$/;"	i
place_to_check	ethereum\tests\test_state.py	/^place_to_check = 'GeneralStateTests'$/;"	v
pytest_generate_tests	ethereum\tests\test_state.py	/^def pytest_generate_tests(metafunc):$/;"	f
sys	ethereum\tests\test_state.py	/^import sys$/;"	i
test_state	ethereum\tests\test_state.py	/^def test_state(filename, testname, testdata):$/;"	f
testutils	ethereum\tests\test_state.py	/^import ethereum.tools.testutils as testutils$/;"	i
tools	ethereum\tests\test_state.py	/^import ethereum.tools.new_statetest_utils as new_statetest_utils$/;"	i
tools	ethereum\tests\test_state.py	/^import ethereum.tools.testutils as testutils$/;"	i
ABIContract	ethereum\tests\test_tester.py	/^from ethereum.tools.tester import Chain, ABIContract$/;"	i
CONTRACTS_DIR	ethereum\tests\test_tester.py	/^CONTRACTS_DIR = path.join(path.dirname(__file__), 'contracts')$/;"	v
Chain	ethereum\tests\test_tester.py	/^from ethereum.tools.tester import Chain, ABIContract$/;"	i
SOLIDITY_AVAILABLE	ethereum\tests\test_tester.py	/^SOLIDITY_AVAILABLE = get_solidity() is not None$/;"	v
json	ethereum\tests\test_tester.py	/^import json$/;"	i
path	ethereum\tests\test_tester.py	/^from os import path$/;"	i
pytest	ethereum\tests\test_tester.py	/^import pytest$/;"	i
test_abicontract_interface	ethereum\tests\test_tester.py	/^def test_abicontract_interface():$/;"	f
config	ethereum\tests\test_transactions.py	/^import ethereum.config as config$/;"	i
config_fork_specific_validation	ethereum\tests\test_transactions.py	/^from ethereum.messages import config_fork_specific_validation, null_address$/;"	i
copy	ethereum\tests\test_transactions.py	/^import copy$/;"	i
decode_hex	ethereum\tests\test_transactions.py	/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;"	i
encode_hex	ethereum\tests\test_transactions.py	/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;"	i
ethereum	ethereum\tests\test_transactions.py	/^import ethereum.config as config$/;"	i
ethereum	ethereum\tests\test_transactions.py	/^import ethereum.transactions as transactions$/;"	i
ethereum	ethereum\tests\test_transactions.py	/^import ethereum.utils as utils$/;"	i
get_logger	ethereum\tests\test_transactions.py	/^from ethereum.slogging import get_logger$/;"	i
json	ethereum\tests\test_transactions.py	/^import json$/;"	i
konfig	ethereum\tests\test_transactions.py	/^konfig = copy.copy(config.default_config)$/;"	v
logger	ethereum\tests\test_transactions.py	/^logger = get_logger()$/;"	v
main	ethereum\tests\test_transactions.py	/^def main():$/;"	f
null_address	ethereum\tests\test_transactions.py	/^from ethereum.messages import config_fork_specific_validation, null_address$/;"	i
pytest_generate_tests	ethereum\tests\test_transactions.py	/^def pytest_generate_tests(metafunc):$/;"	f
rlp	ethereum\tests\test_transactions.py	/^import rlp$/;"	i
str_to_bytes	ethereum\tests\test_transactions.py	/^from rlp.utils import decode_hex, encode_hex, str_to_bytes$/;"	i
sys	ethereum\tests\test_transactions.py	/^import sys$/;"	i
test_transaction	ethereum\tests\test_transactions.py	/^def test_transaction(filename, testname, testdata):$/;"	f
testutils	ethereum\tests\test_transactions.py	/^from ethereum.tools import testutils$/;"	i
transactions	ethereum\tests\test_transactions.py	/^import ethereum.transactions as transactions$/;"	i
utils	ethereum\tests\test_transactions.py	/^import ethereum.utils as utils$/;"	i
_dec	ethereum\tests\test_trie.py	/^    def _dec(x):$/;"	f	function:run_test
check_testdata	ethereum\tests\test_trie.py	/^def check_testdata(data_keys, expected_keys):$/;"	f
db	ethereum\tests\test_trie.py	/^import ethereum.db as db$/;"	i
decode_hex	ethereum\tests\test_trie.py	/^from rlp.utils import decode_hex$/;"	i
encode_hex	ethereum\tests\test_trie.py	/^from ethereum.utils import encode_hex, to_string$/;"	i
ethereum	ethereum\tests\test_trie.py	/^import ethereum.db as db$/;"	i
ethereum	ethereum\tests\test_trie.py	/^import ethereum.trie as trie$/;"	i
fixture_path	ethereum\tests\test_trie.py	/^fixture_path = os.path.join(os.path.dirname(__file__), '..', '..', 'fixtures')$/;"	v
get_logger	ethereum\tests\test_trie.py	/^from ethereum.slogging import get_logger$/;"	i
is_string	ethereum\tests\test_trie.py	/^from ethereum.abi import is_string$/;"	i
itertools	ethereum\tests\test_trie.py	/^import itertools$/;"	i
json	ethereum\tests\test_trie.py	/^import json$/;"	i
load_tests	ethereum\tests\test_trie.py	/^def load_tests():$/;"	f
logger	ethereum\tests\test_trie.py	/^logger = get_logger()$/;"	v
os	ethereum\tests\test_trie.py	/^import os$/;"	i
run_test	ethereum\tests\test_trie.py	/^def run_test(name, pairs):$/;"	f
to_string	ethereum\tests\test_trie.py	/^from ethereum.utils import encode_hex, to_string$/;"	i
trie	ethereum\tests\test_trie.py	/^import ethereum.trie as trie$/;"	i
EphemDB	ethereum\tests\test_trie_next_prev.py	/^from ethereum.db import EphemDB$/;"	i
check_testdata	ethereum\tests\test_trie_next_prev.py	/^def check_testdata(data_keys, expected_keys):$/;"	f
ethereum	ethereum\tests\test_trie_next_prev.py	/^import ethereum.tools.testutils as testutils$/;"	i
ethereum	ethereum\tests\test_trie_next_prev.py	/^import ethereum.trie as trie$/;"	i
get_logger	ethereum\tests\test_trie_next_prev.py	/^from ethereum.slogging import get_logger$/;"	i
json	ethereum\tests\test_trie_next_prev.py	/^import json$/;"	i
load_tests	ethereum\tests\test_trie_next_prev.py	/^def load_tests():$/;"	f
logger	ethereum\tests\test_trie_next_prev.py	/^logger = get_logger()$/;"	v
os	ethereum\tests\test_trie_next_prev.py	/^import os$/;"	i
run_test	ethereum\tests\test_trie_next_prev.py	/^def run_test(name):$/;"	f
test_basic	ethereum\tests\test_trie_next_prev.py	/^def test_basic():$/;"	f
testutils	ethereum\tests\test_trie_next_prev.py	/^import ethereum.tools.testutils as testutils$/;"	i
to_string	ethereum\tests\test_trie_next_prev.py	/^from ethereum.utils import to_string$/;"	i
tools	ethereum\tests\test_trie_next_prev.py	/^import ethereum.tools.testutils as testutils$/;"	i
trie	ethereum\tests\test_trie_next_prev.py	/^import ethereum.trie as trie$/;"	i
DB	ethereum\tests\utils.py	/^from ethereum.db import DB as DB$/;"	i
Env	ethereum\tests\utils.py	/^from ethereum.config import Env$/;"	i
__TESTDATADIR	ethereum\tests\utils.py	/^__TESTDATADIR = "..\/tests"$/;"	v
json	ethereum\tests\utils.py	/^import json$/;"	i
load_test_data	ethereum\tests\utils.py	/^def load_test_data(fname):$/;"	f
new_db	ethereum\tests\utils.py	/^def new_db():$/;"	f
new_env	ethereum\tests\utils.py	/^def new_env():$/;"	f
os	ethereum\tests\utils.py	/^import os$/;"	i
tempdir	ethereum\tests\utils.py	/^tempdir = tempfile.mktemp()$/;"	v
tempfile	ethereum\tests\utils.py	/^import tempfile$/;"	i
ethereum	ethereum\todo_tests\test_ethash.py	/^import ethereum.testutils as testutils$/;"	i
fixtures	ethereum\todo_tests\test_ethash.py	/^fixtures = testutils.get_tests_from_file_or_dir($/;"	v
os	ethereum\todo_tests\test_ethash.py	/^import os$/;"	i
pytest	ethereum\todo_tests\test_ethash.py	/^import pytest$/;"	i
test_pow	ethereum\todo_tests\test_ethash.py	/^def test_pow():$/;"	f
testutils	ethereum\todo_tests\test_ethash.py	/^import ethereum.testutils as testutils$/;"	i
Expensive	ethereum\todo_tests\test_logging.py	/^    class Expensive(object):$/;"	c	function:test_lazy_log
__repr__	ethereum\todo_tests\test_logging.py	/^        def __repr__(self):$/;"	m	class:test_lazy_log.Expensive	file:
div	ethereum\todo_tests\test_logging.py	/^    def div(a, b):$/;"	f	function:test_tracebacks
handlers	ethereum\todo_tests\test_logging.py	/^import logging.handlers$/;"	i
json	ethereum\todo_tests\test_logging.py	/^import json$/;"	i
log_cb	ethereum\todo_tests\test_logging.py	/^    def log_cb(event_dict):$/;"	f	function:test_listeners
logging	ethereum\todo_tests\test_logging.py	/^import logging$/;"	i
logging	ethereum\todo_tests\test_logging.py	/^import logging.handlers$/;"	i
pytest	ethereum\todo_tests\test_logging.py	/^import pytest$/;"	i
run_vm	ethereum\todo_tests\test_logging.py	/^    def run_vm(raise_error=False):$/;"	f	function:test_how_to_use_as_vm_logger
setup_function	ethereum\todo_tests\test_logging.py	/^def setup_function(function):$/;"	f
slogging	ethereum\todo_tests\test_logging.py	/^from ethereum import slogging$/;"	i
teardown_function	ethereum\todo_tests\test_logging.py	/^def teardown_function(function):$/;"	f
test_basic	ethereum\todo_tests\test_logging.py	/^def test_basic(caplog, level_name):$/;"	f
test_bound_logger	ethereum\todo_tests\test_logging.py	/^def test_bound_logger(caplog):$/;"	f
test_bound_logger_isolation	ethereum\todo_tests\test_logging.py	/^def test_bound_logger_isolation(caplog):$/;"	f
test_configuration	ethereum\todo_tests\test_logging.py	/^def test_configuration():$/;"	f
test_get_configuration	ethereum\todo_tests\test_logging.py	/^def test_get_configuration():$/;"	f
test_highlight	ethereum\todo_tests\test_logging.py	/^def test_highlight(caplog):$/;"	f
test_how_to_use_as_vm_logger	ethereum\todo_tests\test_logging.py	/^def test_how_to_use_as_vm_logger():$/;"	f
test_howto_use_in_tests	ethereum\todo_tests\test_logging.py	/^def test_howto_use_in_tests():$/;"	f
test_initial_config	ethereum\todo_tests\test_logging.py	/^def test_initial_config():$/;"	f
test_is_active	ethereum\todo_tests\test_logging.py	/^def test_is_active():$/;"	f
test_jsonconfig	ethereum\todo_tests\test_logging.py	/^def test_jsonconfig(caplog):$/;"	f
test_lazy_log	ethereum\todo_tests\test_logging.py	/^def test_lazy_log():$/;"	f
test_listeners	ethereum\todo_tests\test_logging.py	/^def test_listeners(caplog):$/;"	f
test_logger_filter	ethereum\todo_tests\test_logging.py	/^def test_logger_filter(caplog, logger_name, filter, should_log):$/;"	f
test_logger_names	ethereum\todo_tests\test_logging.py	/^def test_logger_names():$/;"	f
test_logging_reconfigure	ethereum\todo_tests\test_logging.py	/^def test_logging_reconfigure():$/;"	f
test_logging_reconfigure_levels	ethereum\todo_tests\test_logging.py	/^def test_logging_reconfigure_levels(config, logger, level):$/;"	f
test_logging_source_file	ethereum\todo_tests\test_logging.py	/^def test_logging_source_file(caplog, log_method):$/;"	f
test_recorder	ethereum\todo_tests\test_logging.py	/^def test_recorder(caplog):$/;"	f
test_set_level	ethereum\todo_tests\test_logging.py	/^def test_set_level():$/;"	f
test_shortcut_dev_logger	ethereum\todo_tests\test_logging.py	/^def test_shortcut_dev_logger(capsys):$/;"	f
test_tracebacks	ethereum\todo_tests\test_logging.py	/^def test_tracebacks(caplog):$/;"	f
BLOCK_MAKING_PPB	ethereum\todo_tests\test_pos.py	/^BLOCK_MAKING_PPB = 10$/;"	v
Chain	ethereum\todo_tests\test_pos.py	/^from ethereum.chain import Chain$/;"	i
Env	ethereum\todo_tests\test_pos.py	/^from ethereum.config import default_config, Env$/;"	i
LogRecorder	ethereum\todo_tests\test_pos.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
NUM_PARTICIPANTS	ethereum\todo_tests\test_pos.py	/^NUM_PARTICIPANTS = 10$/;"	v
RandaoManager	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
State	ethereum\todo_tests\test_pos.py	/^from ethereum.state import State$/;"	i
Transaction	ethereum\todo_tests\test_pos.py	/^from ethereum.transactions import Transaction$/;"	i
TransactionQueue	ethereum\todo_tests\test_pos.py	/^from ethereum.transaction_queue import TransactionQueue$/;"	i
abi	ethereum\todo_tests\test_pos.py	/^from ethereum import abi$/;"	i
addrs	ethereum\todo_tests\test_pos.py	/^addrs = [utils.privtoaddr(k) for k in privkeys]$/;"	v
alloc	ethereum\todo_tests\test_pos.py	/^                        alloc={a: {'balance': 10**18} for a in addrs},$/;"	v
apply_const_message	ethereum\todo_tests\test_pos.py	/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;"	i
apply_transaction	ethereum\todo_tests\test_pos.py	/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;"	i
b	ethereum\todo_tests\test_pos.py	/^    b = make_block(chains[0], privkeys[next_validator_id], randaos[next_validator_id],$/;"	v
b	ethereum\todo_tests\test_pos.py	/^b = make_block(chains[0], privkeys[next_validator_id],$/;"	v
b2	ethereum\todo_tests\test_pos.py	/^b2 = make_block(chains[0], privkeys[next_validator_id],$/;"	v
b3	ethereum\todo_tests\test_pos.py	/^b3 = make_block(chains[1], privkeys[next_validator_id],$/;"	v
blocks_by_v0_in_stage1	ethereum\todo_tests\test_pos.py	/^blocks_by_v0_in_stage1 = len([x for x in vids[:200] if x == 0])$/;"	v
blocks_by_v0_in_stage2	ethereum\todo_tests\test_pos.py	/^blocks_by_v0_in_stage2 = len([x for x in vids[200:400] if x == 0])$/;"	v
bn	ethereum\todo_tests\test_pos.py	/^bn = call_casper(chains[0].state, 'getBlockNumber')$/;"	v
call_casper	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
casper_config	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
chains	ethereum\todo_tests\test_pos.py	/^chains = [Chain(s.to_snapshot(), env=s.env) for i in range(NUM_PARTICIPANTS)]$/;"	v
config_string	ethereum\todo_tests\test_pos.py	/^config_string = ':info,eth.vm.log:trace'$/;"	v
configure_logging	ethereum\todo_tests\test_pos.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
copy	ethereum\todo_tests\test_pos.py	/^import copy$/;"	i
ct	ethereum\todo_tests\test_pos.py	/^ct = get_casper_ct()$/;"	v
default_config	ethereum\todo_tests\test_pos.py	/^from ethereum.config import default_config, Env$/;"	i
deposit_sizes	ethereum\todo_tests\test_pos.py	/^deposit_sizes = [i * 500 + 500 for i in range(NUM_PARTICIPANTS)]$/;"	v
epoch_length	ethereum\todo_tests\test_pos.py	/^                        epoch_length=100)$/;"	v
expected_revenue_in_stage1	ethereum\todo_tests\test_pos.py	/^expected_revenue_in_stage1 = blocks_by_v0_in_stage1 * max(sum(deposit_sizes[:-1]), 1000000) * 10**18 * BLOCK_MAKING_PPB \/ 10**9$/;"	v
expected_revenue_in_stage2	ethereum\todo_tests\test_pos.py	/^expected_revenue_in_stage2 = blocks_by_v0_in_stage2 * max(sum(deposit_sizes), 1000000) * 10**18 * BLOCK_MAKING_PPB \/ 10**9$/;"	v
generate_validation_code	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_casper_code	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_casper_ct	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_contract_code	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_hash_without_ed_code	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_rlp_decoder_code	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_skips_and_block_making_time	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
get_timestamp	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
initialize	ethereum\todo_tests\test_pos.py	/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;"	i
make_block	ethereum\todo_tests\test_pos.py	/^def make_block(chain, key, randao, vchash, skips):$/;"	f
make_casper_genesis	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
make_head_candidate	ethereum\todo_tests\test_pos.py	/^from ethereum.block_creation import make_head_candidate$/;"	i
make_withdrawal_signature	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
mk_basic_state	ethereum\todo_tests\test_pos.py	/^from ethereum.parse_genesis_declaration import mk_basic_state$/;"	i
next_validator	ethereum\todo_tests\test_pos.py	/^    next_validator = call_casper(chains[0].state, 'getValidator', [0])$/;"	v
next_validator	ethereum\todo_tests\test_pos.py	/^next_validator = call_casper(chains[0].state, 'getValidator', [0])$/;"	v
next_validator	ethereum\todo_tests\test_pos.py	/^next_validator = call_casper(chains[1].state, 'getValidator', [1])$/;"	v
next_validator	ethereum\todo_tests\test_pos.py	/^next_validator = call_casper(s, 'getValidator', [0])$/;"	v
next_validator_id	ethereum\todo_tests\test_pos.py	/^    next_validator_id = vchashes.index(next_validator)$/;"	v
next_validator_id	ethereum\todo_tests\test_pos.py	/^next_validator_id = vchashes.index(next_validator)$/;"	v
post_bal	ethereum\todo_tests\test_pos.py	/^post_bal = chains[0].state.get_balance(addrs[0])$/;"	v
pre_bal	ethereum\todo_tests\test_pos.py	/^pre_bal = chains[0].state.get_balance(addrs[0])$/;"	v
privkeys	ethereum\todo_tests\test_pos.py	/^privkeys = [utils.sha3(str(i)) for i in range(NUM_PARTICIPANTS)]$/;"	v
randaos	ethereum\todo_tests\test_pos.py	/^randaos = [RandaoManager(utils.sha3(str(i))) for i in range(NUM_PARTICIPANTS)]$/;"	v
rlp	ethereum\todo_tests\test_pos.py	/^import rlp$/;"	i
s	ethereum\todo_tests\test_pos.py	/^s = make_casper_genesis(validators=[(generate_validation_code(a), ds * 10**18, r.get(9999), a)$/;"	v
serpent	ethereum\todo_tests\test_pos.py	/^import serpent$/;"	i
set_level	ethereum\todo_tests\test_pos.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
sigdata	ethereum\todo_tests\test_pos.py	/^sigdata = make_withdrawal_signature(privkeys[0])$/;"	v
sign_block	ethereum\todo_tests\test_pos.py	/^    make_withdrawal_signature$/;"	i
t	ethereum\todo_tests\test_pos.py	/^t = Transaction(0, 0, 10**6, casper_config['CASPER_ADDR'], 0, ct.encode('includeDunkle', [rlp.encode(b3.header)])).sign(privkeys[0])$/;"	v
t	ethereum\todo_tests\test_pos.py	/^t = Transaction(1, 0, 10**6, casper_config['CASPER_ADDR'], 0, ct.encode('includeDunkle', [rlp.encode(b3.header)])).sign(privkeys[0])$/;"	v
t2	ethereum\todo_tests\test_pos.py	/^t2 = Transaction(chains[0].state.get_nonce(a), 0, 1000000, casper_config['CASPER_ADDR'],$/;"	v
t3	ethereum\todo_tests\test_pos.py	/^t3 = Transaction(chains[0].state.get_nonce(addrs[0]), 0, 1000000, casper_config['CASPER_ADDR'], 0, txdata).sign(privkeys[0])$/;"	v
t4	ethereum\todo_tests\test_pos.py	/^t4 = Transaction(chains[0].state.get_nonce(addrs[0]), 0, 1000000, casper_config['CASPER_ADDR'], 0, txdata).sign(privkeys[0])$/;"	v
time	ethereum\todo_tests\test_pos.py	/^import time$/;"	i
timestamp	ethereum\todo_tests\test_pos.py	/^                        timestamp=int(time.time() - 99999),$/;"	v
txdata	ethereum\todo_tests\test_pos.py	/^txdata = ct.encode('startWithdrawal', [vchashes[0], sigdata])$/;"	v
txdata	ethereum\todo_tests\test_pos.py	/^txdata = ct.encode('withdraw', [vchashes[0]])$/;"	v
utils	ethereum\todo_tests\test_pos.py	/^from ethereum import utils$/;"	i
validate_block_header	ethereum\todo_tests\test_pos.py	/^from ethereum.state_transition import apply_transaction, apply_const_message, validate_block_header, initialize$/;"	i
vc	ethereum\todo_tests\test_pos.py	/^vc = generate_validation_code(a)$/;"	v
vchashes	ethereum\todo_tests\test_pos.py	/^vchashes = [utils.sha3(c) for c in vcodes]$/;"	v
vcodes	ethereum\todo_tests\test_pos.py	/^vcodes = [generate_validation_code(a) for a in addrs]$/;"	v
vids	ethereum\todo_tests\test_pos.py	/^vids = []$/;"	v
vm	ethereum\todo_tests\test_pos.py	/^from ethereum import vm$/;"	i
withdrawal_time_1	ethereum\todo_tests\test_pos.py	/^withdrawal_time_1 = call_casper(chains[0].state, 'getLockDuration', [vchashes[0]])$/;"	v
x	ethereum\todo_tests\test_pos.py	/^x = chains[0].state.gas_used$/;"	v
x2	ethereum\todo_tests\test_pos.py	/^x2 = chains[0].state.gas_used$/;"	v
EphemDB	ethereum\todo_tests\test_pruning_trie.py	/^from ethereum.db import EphemDB$/;"	i
RefcountDB	ethereum\todo_tests\test_pruning_trie.py	/^from ethereum.refcount_db import RefcountDB$/;"	i
_dec	ethereum\todo_tests\test_pruning_trie.py	/^    def _dec(x):$/;"	f	function:run_test
check_db_tightness	ethereum\todo_tests\test_pruning_trie.py	/^def check_db_tightness(trees, db):$/;"	f
check_testdata	ethereum\todo_tests\test_pruning_trie.py	/^def check_testdata(data_keys, expected_keys):$/;"	f
ethereum	ethereum\todo_tests\test_pruning_trie.py	/^import ethereum.pruning_trie as pruning_trie$/;"	i
ethereum	ethereum\todo_tests\test_pruning_trie.py	/^import ethereum.testutils as testutils$/;"	i
ethereum	ethereum\todo_tests\test_pruning_trie.py	/^import ethereum.utils as utils$/;"	i
fixture_to_bytes	ethereum\todo_tests\test_pruning_trie.py	/^from ethereum.testutils import fixture_to_bytes$/;"	i
itertools	ethereum\todo_tests\test_pruning_trie.py	/^import itertools$/;"	i
json	ethereum\todo_tests\test_pruning_trie.py	/^import json$/;"	i
load_tests	ethereum\todo_tests\test_pruning_trie.py	/^def load_tests():$/;"	f
os	ethereum\todo_tests\test_pruning_trie.py	/^import os$/;"	i
pruning_trie	ethereum\todo_tests\test_pruning_trie.py	/^import ethereum.pruning_trie as pruning_trie$/;"	i
rlp	ethereum\todo_tests\test_pruning_trie.py	/^import rlp$/;"	i
run_test	ethereum\todo_tests\test_pruning_trie.py	/^def run_test(name):$/;"	f
sys	ethereum\todo_tests\test_pruning_trie.py	/^import sys$/;"	i
test_basic_pruning	ethereum\todo_tests\test_pruning_trie.py	/^def test_basic_pruning():$/;"	f
test_block_18315_changes	ethereum\todo_tests\test_pruning_trie.py	/^def test_block_18315_changes():$/;"	f
test_block_18503_changes	ethereum\todo_tests\test_pruning_trie.py	/^def test_block_18503_changes():$/;"	f
test_clear	ethereum\todo_tests\test_pruning_trie.py	/^def test_clear():$/;"	f
test_deep_inner_branch_deletion	ethereum\todo_tests\test_pruning_trie.py	/^def test_deep_inner_branch_deletion():$/;"	f
test_delayed_clear	ethereum\todo_tests\test_pruning_trie.py	/^def test_delayed_clear():$/;"	f
test_delayed_pruning	ethereum\todo_tests\test_pruning_trie.py	/^def test_delayed_pruning():$/;"	f
test_emptyValues	ethereum\todo_tests\test_pruning_trie.py	/^def test_emptyValues():$/;"	f
test_insert_delete	ethereum\todo_tests\test_pruning_trie.py	/^def test_insert_delete():$/;"	f
test_jeff	ethereum\todo_tests\test_pruning_trie.py	/^def test_jeff():$/;"	f
test_revert_adds	ethereum\todo_tests\test_pruning_trie.py	/^def test_revert_adds():$/;"	f
test_revert_deletes	ethereum\todo_tests\test_pruning_trie.py	/^def test_revert_deletes():$/;"	f
test_shared_prefix	ethereum\todo_tests\test_pruning_trie.py	/^def test_shared_prefix():$/;"	f
test_trie_transfer	ethereum\todo_tests\test_pruning_trie.py	/^def test_trie_transfer():$/;"	f
test_two_trees	ethereum\todo_tests\test_pruning_trie.py	/^def test_two_trees():$/;"	f
test_two_trees_with_clear	ethereum\todo_tests\test_pruning_trie.py	/^def test_two_trees_with_clear():$/;"	f
test_two_tries_with_small_root_node	ethereum\todo_tests\test_pruning_trie.py	/^def test_two_tries_with_small_root_node():$/;"	f
testutils	ethereum\todo_tests\test_pruning_trie.py	/^import ethereum.testutils as testutils$/;"	i
to_string	ethereum\todo_tests\test_pruning_trie.py	/^from ethereum.utils import to_string$/;"	i
utils	ethereum\todo_tests\test_pruning_trie.py	/^import ethereum.utils as utils$/;"	i
DB	ethereum\todo_tests\test_remoteblocks.py	/^from ethereum.db import DB$/;"	i
formt	ethereum\todo_tests\test_remoteblocks.py	/^    formt = sys.argv[4] if len(sys.argv) > 4 else 'lines'$/;"	v
get_logger	ethereum\todo_tests\test_remoteblocks.py	/^from ethereum.slogging import get_logger$/;"	i
import_chain_data	ethereum\todo_tests\test_remoteblocks.py	/^def import_chain_data(raw_blocks_fn, test_db_path, skip=0):$/;"	f
logger	ethereum\todo_tests\test_remoteblocks.py	/^logger = get_logger()$/;"	v
raw_blocks_fn	ethereum\todo_tests\test_remoteblocks.py	/^    raw_blocks_fn = sys.argv[1]$/;"	v
skip	ethereum\todo_tests\test_remoteblocks.py	/^    skip = int(sys.argv[3]) if len(sys.argv) > 3 else 0$/;"	v
sys	ethereum\todo_tests\test_remoteblocks.py	/^import sys$/;"	i
test_db_path	ethereum\todo_tests\test_remoteblocks.py	/^    test_db_path = sys.argv[2]$/;"	v
testutils	ethereum\todo_tests\test_remoteblocks.py	/^from ethereum import testutils$/;"	i
CONTRACTS_DIR	ethereum\todo_tests\test_solidity.py	/^CONTRACTS_DIR = path.join(path.dirname(__file__), 'contracts')$/;"	v
SOLIDITY_AVAILABLE	ethereum\todo_tests\test_solidity.py	/^SOLIDITY_AVAILABLE = get_solidity() is not None$/;"	v
_solidity	ethereum\todo_tests\test_solidity.py	/^from ethereum import _solidity$/;"	i
bytecode_is_generated	ethereum\todo_tests\test_solidity.py	/^def bytecode_is_generated(cinfo, cname):$/;"	f
encode_hex	ethereum\todo_tests\test_solidity.py	/^from ethereum.utils import encode_hex$/;"	i
get_solidity	ethereum\todo_tests\test_solidity.py	/^from ethereum._solidity import get_solidity$/;"	i
path	ethereum\todo_tests\test_solidity.py	/^from os import path$/;"	i
pytest	ethereum\todo_tests\test_solidity.py	/^import pytest$/;"	i
test_abi_contract	ethereum\todo_tests\test_solidity.py	/^def test_abi_contract():$/;"	f
test_constructor	ethereum\todo_tests\test_solidity.py	/^def test_constructor():$/;"	f
test_extra_args	ethereum\todo_tests\test_solidity.py	/^def test_extra_args():$/;"	f
test_interop	ethereum\todo_tests\test_solidity.py	/^def test_interop():$/;"	f
test_library_from_code	ethereum\todo_tests\test_solidity.py	/^def test_library_from_code():$/;"	f
test_library_from_file	ethereum\todo_tests\test_solidity.py	/^def test_library_from_file():$/;"	f
test_missing_solc	ethereum\todo_tests\test_solidity.py	/^def test_missing_solc(monkeypatch):$/;"	f
test_names	ethereum\todo_tests\test_solidity.py	/^def test_names():$/;"	f
test_solidity_compile_rich	ethereum\todo_tests\test_solidity.py	/^def test_solidity_compile_rich():$/;"	f
test_symbols	ethereum\todo_tests\test_solidity.py	/^def test_symbols():$/;"	f
tester	ethereum\todo_tests\test_solidity.py	/^from ethereum import tester$/;"	i
utils	ethereum\todo_tests\test_solidity.py	/^from ethereum import utils$/;"	i
configure_logging	ethereum\todo_tests\test_vm.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
get_logger	ethereum\todo_tests\test_vm.py	/^from ethereum.slogging import get_logger, configure_logging$/;"	i
json	ethereum\todo_tests\test_vm.py	/^import json$/;"	i
logger	ethereum\todo_tests\test_vm.py	/^logger = get_logger()$/;"	v
main	ethereum\todo_tests\test_vm.py	/^def main():$/;"	f
pytest_generate_tests	ethereum\todo_tests\test_vm.py	/^def pytest_generate_tests(metafunc):$/;"	f
sys	ethereum\todo_tests\test_vm.py	/^import sys$/;"	i
test_vm	ethereum\todo_tests\test_vm.py	/^def test_vm(filename, testname, testdata):$/;"	f
testutils	ethereum\todo_tests\test_vm.py	/^from ethereum.tools import testutils$/;"	i
collected	ethereum\todo_tests\test_vm_failing.py	/^collected = []$/;"	v
do_test_vm	ethereum\todo_tests\test_vm_failing.py	/^def do_test_vm(filename, testname=None, testdata=None, limit=99999999):$/;"	f
ethereum	ethereum\todo_tests\test_vm_failing.py	/^import ethereum.testutils as testutils$/;"	i
failing	ethereum\todo_tests\test_vm_failing.py	/^failing = [$/;"	v
failing	ethereum\todo_tests\test_vm_failing.py	/^failing = [x.split('_', 1)[-1] for x in failing]  # testnames$/;"	v
fixtures	ethereum\todo_tests\test_vm_failing.py	/^fixtures = testutils.get_tests_from_file_or_dir($/;"	v
get_logger	ethereum\todo_tests\test_vm_failing.py	/^from ethereum.slogging import get_logger$/;"	i
logger	ethereum\todo_tests\test_vm_failing.py	/^logger = get_logger()$/;"	v
mk_test_func	ethereum\todo_tests\test_vm_failing.py	/^def mk_test_func(filename, testname, testdata):$/;"	f
os	ethereum\todo_tests\test_vm_failing.py	/^import os$/;"	i
test_testutils_check_vm_test	ethereum\todo_tests\test_vm_failing.py	/^def test_testutils_check_vm_test():$/;"	f
testutils	ethereum\todo_tests\test_vm_failing.py	/^import ethereum.testutils as testutils$/;"	i
BENCHMARK	ethereum\todo_tests\tst_frontier.py	/^    BENCHMARK = int(sys.argv[sys.argv.index('--benchmark') + 1])$/;"	v
BENCHMARK	ethereum\todo_tests\tst_frontier.py	/^BENCHMARK = 0$/;"	v
Block	ethereum\todo_tests\tst_frontier.py	/^from ethereum.block import Block, BlockHeader$/;"	i
BlockHeader	ethereum\todo_tests\tst_frontier.py	/^from ethereum.block import Block, BlockHeader$/;"	i
DB_DIR	ethereum\todo_tests\tst_frontier.py	/^    DB_DIR = int(sys.argv[sys.argv.index('--db') + 1])$/;"	v
DB_DIR	ethereum\todo_tests\tst_frontier.py	/^DB_DIR = '\/tmp\/%d' % random.randrange(int(time.time() * 1000000))$/;"	v
Env	ethereum\todo_tests\tst_frontier.py	/^from ethereum.config import Env$/;"	i
LevelDB	ethereum\todo_tests\tst_frontier.py	/^from pyethapp.leveldb_service import LevelDB$/;"	i
LogRecorder	ethereum\todo_tests\tst_frontier.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
MANUAL_SNAPSHOTS	ethereum\todo_tests\tst_frontier.py	/^MANUAL_SNAPSHOTS = []$/;"	v
REPORT_INTERVAL	ethereum\todo_tests\tst_frontier.py	/^REPORT_INTERVAL = 1000$/;"	v
RLP_BLOCKS_FILE	ethereum\todo_tests\tst_frontier.py	/^    RLP_BLOCKS_FILE = sys.argv[sys.argv.index('--rlp_blocks') + 1]$/;"	v
RLP_BLOCKS_FILE	ethereum\todo_tests\tst_frontier.py	/^RLP_BLOCKS_FILE = '1700kblocks.rlp'$/;"	v
SAVE_INTERVAL	ethereum\todo_tests\tst_frontier.py	/^SAVE_INTERVAL = 999999$/;"	v
SNAPSHOT_INTERVAL	ethereum\todo_tests\tst_frontier.py	/^SNAPSHOT_INTERVAL = 999999$/;"	v
STATE_LOAD_FN	ethereum\todo_tests\tst_frontier.py	/^    STATE_LOAD_FN = sys.argv[sys.argv.index('--saved_state') + 1]$/;"	v
STATE_LOAD_FN	ethereum\todo_tests\tst_frontier.py	/^STATE_LOAD_FN = 'saved_state.json'$/;"	v
STATE_SNAPSHOT_FN	ethereum\todo_tests\tst_frontier.py	/^STATE_SNAPSHOT_FN = 'saved_snapshot_{}k.json'$/;"	v
STATE_STORE_FN	ethereum\todo_tests\tst_frontier.py	/^STATE_STORE_FN = 'saved_state.json'$/;"	v
block	ethereum\todo_tests\tst_frontier.py	/^    block = rlp.decode(block, Block)$/;"	v
block_rlps	ethereum\todo_tests\tst_frontier.py	/^block_rlps = []$/;"	v
block_source_data	ethereum\todo_tests\tst_frontier.py	/^block_source_data = f.read()$/;"	v
c	ethereum\todo_tests\tst_frontier.py	/^    c = chain.Chain(json.load(open('genesis_frontier.json')), Env(LevelDB(DB_DIR)))$/;"	v
c	ethereum\todo_tests\tst_frontier.py	/^    c = chain.Chain(json.load(open(STATE_LOAD_FN)), Env())$/;"	v
chain	ethereum\todo_tests\tst_frontier.py	/^from ethereum.pow import chain$/;"	i
check_snapshot_consistency	ethereum\todo_tests\tst_frontier.py	/^def check_snapshot_consistency(snapshot, env=None):$/;"	f
common	ethereum\todo_tests\tst_frontier.py	/^import ethereum.common as common$/;"	i
config_string	ethereum\todo_tests\tst_frontier.py	/^config_string = ':info,eth.vm.log:trace,eth.vm.op:trace,eth.vm.stack:trace,eth.vm.exit:trace,eth.pb.msg:trace,eth.pb.tx:debug'$/;"	v
configure_logging	ethereum\todo_tests\tst_frontier.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
db	ethereum\todo_tests\tst_frontier.py	/^from ethereum import genesis_helpers, db$/;"	i
ethereum	ethereum\todo_tests\tst_frontier.py	/^import ethereum.common as common$/;"	i
ethereum	ethereum\todo_tests\tst_frontier.py	/^import ethereum.messages as messages$/;"	i
f	ethereum\todo_tests\tst_frontier.py	/^f = open(RLP_BLOCKS_FILE)$/;"	v
gas_used	ethereum\todo_tests\tst_frontier.py	/^            gas_used = 0$/;"	v
gas_used	ethereum\todo_tests\tst_frontier.py	/^gas_used = 0$/;"	v
genesis_helpers	ethereum\todo_tests\tst_frontier.py	/^from ethereum import genesis_helpers, db$/;"	i
json	ethereum\todo_tests\tst_frontier.py	/^import json$/;"	i
messages	ethereum\todo_tests\tst_frontier.py	/^import ethereum.messages as messages$/;"	i
num_blks	ethereum\todo_tests\tst_frontier.py	/^            num_blks = 0$/;"	v
num_blks	ethereum\todo_tests\tst_frontier.py	/^num_blks = 0$/;"	v
num_blocks	ethereum\todo_tests\tst_frontier.py	/^        num_blocks = block.header.number + 1$/;"	v
num_txs	ethereum\todo_tests\tst_frontier.py	/^            num_txs = 0$/;"	v
num_txs	ethereum\todo_tests\tst_frontier.py	/^num_txs = 0$/;"	v
os	ethereum\todo_tests\tst_frontier.py	/^import os$/;"	i
pos	ethereum\todo_tests\tst_frontier.py	/^    pos = l1 + l2$/;"	v
pos	ethereum\todo_tests\tst_frontier.py	/^pos = 0$/;"	v
random	ethereum\todo_tests\tst_frontier.py	/^import random$/;"	i
report	ethereum\todo_tests\tst_frontier.py	/^def report(st, num_blks, num_txs, gas_used):$/;"	f
rlp	ethereum\todo_tests\tst_frontier.py	/^import rlp$/;"	i
set_level	ethereum\todo_tests\tst_frontier.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
snapshot	ethereum\todo_tests\tst_frontier.py	/^def snapshot(c, num_blocks):$/;"	f
st	ethereum\todo_tests\tst_frontier.py	/^            st = time.time()$/;"	v
st	ethereum\todo_tests\tst_frontier.py	/^st = time.time()$/;"	v
sys	ethereum\todo_tests\tst_frontier.py	/^import sys$/;"	i
time	ethereum\todo_tests\tst_frontier.py	/^import time$/;"	i
_solidity	ethereum\tools\__init__.py	/^from ethereum.tools import keys, new_statetest_utils, testutils, tester, _solidity$/;"	i
keys	ethereum\tools\__init__.py	/^from ethereum.tools import keys, new_statetest_utils, testutils, tester, _solidity$/;"	i
new_statetest_utils	ethereum\tools\__init__.py	/^from ethereum.tools import keys, new_statetest_utils, testutils, tester, _solidity$/;"	i
tester	ethereum\tools\__init__.py	/^from ethereum.tools import keys, new_statetest_utils, testutils, tester, _solidity$/;"	i
testutils	ethereum\tools\__init__.py	/^from ethereum.tools import keys, new_statetest_utils, testutils, tester, _solidity$/;"	i
BINARY	ethereum\tools\_solidity.py	/^BINARY = 'solc'$/;"	v
CompileError	ethereum\tools\_solidity.py	/^class CompileError(Exception):$/;"	c
Solc	ethereum\tools\_solidity.py	/^class Solc(object):$/;"	c
SolcMissing	ethereum\tools\_solidity.py	/^class SolcMissing(Exception):$/;"	c
_code_or_path	ethereum\tools\_solidity.py	/^    def _code_or_path(sourcecode, path, contract_name, libraries, combined, extra_args):$/;"	m	class:Solc
combined	ethereum\tools\_solidity.py	/^    def combined(cls, code, path=None, extra_args=None):$/;"	m	class:Solc
compile	ethereum\tools\_solidity.py	/^    def compile(cls, code, path=None, libraries=None, contract_name='', extra_args=None):$/;"	m	class:Solc
compile_code	ethereum\tools\_solidity.py	/^def compile_code(sourcecode, libraries=None, combined='bin,abi', optimize=True, extra_args=None):$/;"	f
compile_contract	ethereum\tools\_solidity.py	/^def compile_contract(filepath, contract_name, libraries=None, combined='bin,abi', optimize=True, extra_args=None):$/;"	f
compile_file	ethereum\tools\_solidity.py	/^def compile_file(filepath, libraries=None, combined='bin,abi', optimize=True, extra_args=None):$/;"	f
compile_last_contract	ethereum\tools\_solidity.py	/^def compile_last_contract(filepath, libraries=None, combined='bin,abi', optimize=True, extra_args=None):$/;"	f
compile_rich	ethereum\tools\_solidity.py	/^    def compile_rich(cls, code, path=None, extra_args=None):$/;"	m	class:Solc
compiler_available	ethereum\tools\_solidity.py	/^    compiler_available = staticmethod(get_compiler_path)$/;"	v	class:Solc
compiler_version	ethereum\tools\_solidity.py	/^    compiler_version = staticmethod(compiler_version)$/;"	v	class:Solc
compiler_version	ethereum\tools\_solidity.py	/^def compiler_version():$/;"	f
contract_names	ethereum\tools\_solidity.py	/^    contract_names = staticmethod(solidity_names)$/;"	v	class:Solc
decode_hex	ethereum\tools\_solidity.py	/^from rlp.utils import decode_hex$/;"	i
get_compiler_path	ethereum\tools\_solidity.py	/^def get_compiler_path():$/;"	f
get_solidity	ethereum\tools\_solidity.py	/^def get_solidity():$/;"	f
mk_full_signature	ethereum\tools\_solidity.py	/^    def mk_full_signature(cls, code, path=None, libraries=None, contract_name='', extra_args=None):$/;"	m	class:Solc
os	ethereum\tools\_solidity.py	/^import os$/;"	i
re	ethereum\tools\_solidity.py	/^import re$/;"	i
shlex	ethereum\tools\_solidity.py	/^import shlex$/;"	i
solc_arguments	ethereum\tools\_solidity.py	/^def solc_arguments(libraries=None, combined='bin,abi', optimize=True, extra_args=None):$/;"	f
solc_parse_output	ethereum\tools\_solidity.py	/^def solc_parse_output(compiler_output):$/;"	f
solc_wrapper	ethereum\tools\_solidity.py	/^solc_wrapper = Solc  # pylint: disable=invalid-name$/;"	v
solidity_get_contract_data	ethereum\tools\_solidity.py	/^def solidity_get_contract_data(all_contracts, filepath, contract_name):$/;"	f
solidity_get_contract_key	ethereum\tools\_solidity.py	/^def solidity_get_contract_key(all_contracts, filepath, contract_name):$/;"	f
solidity_library_symbol	ethereum\tools\_solidity.py	/^def solidity_library_symbol(library_name):$/;"	f
solidity_names	ethereum\tools\_solidity.py	/^def solidity_names(code):  # pylint: disable=too-many-branches$/;"	f
solidity_resolve_address	ethereum\tools\_solidity.py	/^def solidity_resolve_address(hex_code, library_symbol, library_address):$/;"	f
solidity_resolve_symbols	ethereum\tools\_solidity.py	/^def solidity_resolve_symbols(hex_code, libraries):$/;"	f
solidity_unresolved_symbols	ethereum\tools\_solidity.py	/^def solidity_unresolved_symbols(hex_code):$/;"	f
subprocess	ethereum\tools\_solidity.py	/^import subprocess$/;"	i
utils	ethereum\tools\_solidity.py	/^from ethereum import utils$/;"	i
warnings	ethereum\tools\_solidity.py	/^import warnings$/;"	i
yaml	ethereum\tools\_solidity.py	/^import yaml$/;"	i
AES	ethereum\tools\keys.py	/^from Crypto.Cipher import AES$/;"	i
Counter	ethereum\tools\keys.py	/^from Crypto.Util import Counter$/;"	i
PBKDF2_CONSTANTS	ethereum\tools\keys.py	/^PBKDF2_CONSTANTS = {$/;"	v
SCRYPT_CONSTANTS	ethereum\tools\keys.py	/^SCRYPT_CONSTANTS = {$/;"	v
SHA256	ethereum\tools\keys.py	/^from Crypto.Hash import SHA256$/;"	i
aes_ctr_decrypt	ethereum\tools\keys.py	/^def aes_ctr_decrypt(text, key, params):$/;"	f
aes_ctr_encrypt	ethereum\tools\keys.py	/^def aes_ctr_encrypt(text, key, params):$/;"	f
aes_mkparams	ethereum\tools\keys.py	/^def aes_mkparams():$/;"	f
big_endian_to_int	ethereum\tools\keys.py	/^    def big_endian_to_int(value):$/;"	f	function:zpad
big_endian_to_int	ethereum\tools\keys.py	/^    def big_endian_to_int(value):$/;"	f
binascii	ethereum\tools\keys.py	/^import binascii$/;"	i
bitcoin	ethereum\tools\keys.py	/^    import bitcoin$/;"	i
ceil	ethereum\tools\keys.py	/^from math import ceil$/;"	i
check_keystore_json	ethereum\tools\keys.py	/^def check_keystore_json(jsondata):$/;"	f
ciphers	ethereum\tools\keys.py	/^ciphers = {$/;"	v
decode_hex	ethereum\tools\keys.py	/^from rlp.utils import decode_hex$/;"	i
decode_keystore_json	ethereum\tools\keys.py	/^def decode_keystore_json(jsondata, pw):$/;"	f
encode_hex	ethereum\tools\keys.py	/^from ethereum.utils import encode_hex$/;"	i
int_to_big_endian	ethereum\tools\keys.py	/^    def int_to_big_endian(value):$/;"	f	function:zpad
int_to_big_endian	ethereum\tools\keys.py	/^    def int_to_big_endian(value):$/;"	f
kdfs	ethereum\tools\keys.py	/^kdfs = {$/;"	v
keccak	ethereum\tools\keys.py	/^from Crypto.Hash import keccak$/;"	i
make_keystore_json	ethereum\tools\keys.py	/^def make_keystore_json(priv, pw, kdf="pbkdf2", cipher="aes-128-ctr"):$/;"	f
mk_pbkdf2_params	ethereum\tools\keys.py	/^def mk_pbkdf2_params():$/;"	f
mk_scrypt_params	ethereum\tools\keys.py	/^def mk_scrypt_params():$/;"	f
os	ethereum\tools\keys.py	/^import os$/;"	i
pbkdf2	ethereum\tools\keys.py	/^import pbkdf2$/;"	i
pbkdf2_hash	ethereum\tools\keys.py	/^def pbkdf2_hash(val, params):$/;"	f
privtoaddr	ethereum\tools\keys.py	/^def privtoaddr(x):$/;"	f
scrypt	ethereum\tools\keys.py	/^    scrypt = None$/;"	v
scrypt	ethereum\tools\keys.py	/^    scrypt = __import__('scrypt')$/;"	v
scrypt_hash	ethereum\tools\keys.py	/^def scrypt_hash(val, params):$/;"	f
sha3	ethereum\tools\keys.py	/^def sha3(seed):$/;"	f
sha3_256	ethereum\tools\keys.py	/^sha3_256 = lambda x: keccak.new(digest_bits=256, data=x)$/;"	v
struct	ethereum\tools\keys.py	/^import struct$/;"	i
sys	ethereum\tools\keys.py	/^import sys$/;"	i
zpad	ethereum\tools\keys.py	/^def zpad(x, l):$/;"	f
Block	ethereum\tools\new_statetest_utils.py	/^from ethereum.block import FakeHeader, Block$/;"	i
Env	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
EnvNotFoundException	ethereum\tools\new_statetest_utils.py	/^class EnvNotFoundException(Exception):$/;"	c
FakeHeader	ethereum\tools\new_statetest_utils.py	/^from ethereum.block import FakeHeader, Block$/;"	i
InvalidTransaction	ethereum\tools\new_statetest_utils.py	/^from ethereum.exceptions import InvalidTransaction$/;"	i
LogRecorder	ethereum\tools\new_statetest_utils.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
State	ethereum\tools\new_statetest_utils.py	/^from ethereum.state import State$/;"	i
apply_transaction	ethereum\tools\new_statetest_utils.py	/^from ethereum.messages import apply_transaction$/;"	i
basic_env	ethereum\tools\new_statetest_utils.py	/^basic_env = {$/;"	v
big_endian_to_int	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
compute_state_test_unit	ethereum\tools\new_statetest_utils.py	/^def compute_state_test_unit(state, txdata, indices, konfig):$/;"	f
config_frontier	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
config_homestead	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
config_metropolis	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
config_spurious	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
config_string	ethereum\tools\new_statetest_utils.py	/^config_string = ':info,eth.vm.log:trace,eth.vm.op:trace,eth.vm.stack:trace,eth.vm.exit:trace,eth.pb.msg:trace,eth.pb.tx:debug'$/;"	v
config_tangerine	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
configs	ethereum\tools\new_statetest_utils.py	/^configs = {$/;"	v
configure_logging	ethereum\tools\new_statetest_utils.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
copy	ethereum\tools\new_statetest_utils.py	/^import copy$/;"	i
decode_hex	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
default_config	ethereum\tools\new_statetest_utils.py	/^from ethereum.config import default_config, config_frontier, config_homestead, config_tangerine, config_spurious, config_metropolis, Env$/;"	i
encode_hex	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
ethereum	ethereum\tools\new_statetest_utils.py	/^import ethereum.transactions as transactions$/;"	i
fake_headers	ethereum\tools\new_statetest_utils.py	/^fake_headers = {}$/;"	v
fixture_path	ethereum\tools\new_statetest_utils.py	/^fixture_path = os.path.join(os.path.dirname(__file__), '..\/..', 'fixtures')$/;"	v
init_state	ethereum\tools\new_statetest_utils.py	/^def init_state(env, pre):$/;"	f
json	ethereum\tools\new_statetest_utils.py	/^import json$/;"	i
konfig	ethereum\tools\new_statetest_utils.py	/^konfig=copy.copy(default_config)$/;"	v
mk_fake_header	ethereum\tools\new_statetest_utils.py	/^def mk_fake_header(blknum):$/;"	f
mk_state_diff	ethereum\tools\new_statetest_utils.py	/^def mk_state_diff(prev, post):$/;"	f
os	ethereum\tools\new_statetest_utils.py	/^import os$/;"	i
parse_int_or_hex	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
remove_0x_head	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
set_level	ethereum\tools\new_statetest_utils.py	/^from ethereum.slogging import LogRecorder, configure_logging, set_level$/;"	i
sha3	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
to_string	ethereum\tools\new_statetest_utils.py	/^    remove_0x_head, encode_hex, big_endian_to_int$/;"	i
transactions	ethereum\tools\new_statetest_utils.py	/^import ethereum.transactions as transactions$/;"	i
verify_state_test	ethereum\tools\new_statetest_utils.py	/^def verify_state_test(test):$/;"	f
ABIContract	ethereum\tools\tester.py	/^class ABIContract(object):  # pylint: disable=too-few-public-methods$/;"	c
Chain	ethereum\tools\tester.py	/^class Chain(object):$/;"	c
ContractTranslator	ethereum\tools\tester.py	/^from ethereum.abi import ContractTranslator$/;"	i
Env	ethereum\tools\tester.py	/^from ethereum.config import config_homestead, config_tangerine, config_spurious, config_metropolis, default_config, Env$/;"	i
GASPRICE	ethereum\tools\tester.py	/^GASPRICE = 0$/;"	v
Miner	ethereum\tools\tester.py	/^from ethereum.pow.ethpow import Miner$/;"	i
STARTGAS	ethereum\tools\tester.py	/^STARTGAS = 3141592$/;"	v
State	ethereum\tools\tester.py	/^class State(object):$/;"	c
Transaction	ethereum\tools\tester.py	/^from ethereum.transactions import Transaction$/;"	i
TransactionFailed	ethereum\tools\tester.py	/^class TransactionFailed(Exception):$/;"	c
__init__	ethereum\tools\tester.py	/^    def __init__(self, _tester, _abi, address):$/;"	m	class:ABIContract
__init__	ethereum\tools\tester.py	/^    def __init__(self, alloc=base_alloc, env=None, genesis=None):$/;"	m	class:Chain
__init__	ethereum\tools\tester.py	/^    def __init__(self, genesis):$/;"	m	class:State
_solidity	ethereum\tools\tester.py	/^_solidity = get_solidity()$/;"	v
accounts	ethereum\tools\tester.py	/^accounts = []$/;"	v
apply_message	ethereum\tools\tester.py	/^from ethereum.messages import apply_transaction, apply_message$/;"	i
apply_transaction	ethereum\tools\tester.py	/^from ethereum.messages import apply_transaction, apply_message$/;"	i
base_alloc	ethereum\tools\tester.py	/^base_alloc = {}$/;"	v
big_endian_to_int	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
call	ethereum\tools\tester.py	/^    def call(self, sender=k0, to=b'\\x00' * 20, value=0, data=b'', startgas=STARTGAS, gasprice=GASPRICE):$/;"	m	class:Chain
call	ethereum\tools\tester.py	/^    def call(self, sender=k0, to=b'\\x00' * 20, value=0, data=b'', startgas=STARTGAS, gasprice=GASPRICE):$/;"	m	class:State
change_head	ethereum\tools\tester.py	/^    def change_head(self, parent, coinbase=a0):$/;"	m	class:Chain
checksum_encode	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
compiler	ethereum\tools\tester.py	/^    from viper import compiler$/;"	i
config_homestead	ethereum\tools\tester.py	/^from ethereum.config import config_homestead, config_tangerine, config_spurious, config_metropolis, default_config, Env$/;"	i
config_metropolis	ethereum\tools\tester.py	/^from ethereum.config import config_homestead, config_tangerine, config_spurious, config_metropolis, default_config, Env$/;"	i
config_spurious	ethereum\tools\tester.py	/^from ethereum.config import config_homestead, config_tangerine, config_spurious, config_metropolis, default_config, Env$/;"	i
config_string	ethereum\tools\tester.py	/^config_string = ':info'$/;"	v
config_tangerine	ethereum\tools\tester.py	/^from ethereum.config import config_homestead, config_tangerine, config_spurious, config_metropolis, default_config, Env$/;"	i
configure_logging	ethereum\tools\tester.py	/^from ethereum.slogging import configure_logging$/;"	i
contract	ethereum\tools\tester.py	/^    def contract(self, sourcecode, args=[], sender=k0, value=0, language=None, l=None, startgas=STARTGAS, gasprice=GASPRICE):$/;"	m	class:Chain
default_config	ethereum\tools\tester.py	/^from ethereum.config import config_homestead, config_tangerine, config_spurious, config_metropolis, default_config, Env$/;"	i
direct_tx	ethereum\tools\tester.py	/^    def direct_tx(self, transaction):$/;"	m	class:Chain
encode_hex	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
get_consensus_strategy	ethereum\tools\tester.py	/^from ethereum.consensus_strategy import get_consensus_strategy$/;"	i
get_env	ethereum\tools\tester.py	/^def get_env(env):$/;"	f
get_solidity	ethereum\tools\tester.py	/^from ethereum.tools._solidity import get_solidity$/;"	i
int_to_0x_hex	ethereum\tools\tester.py	/^def int_to_0x_hex(v):$/;"	f
int_to_addr	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
int_to_big_endian	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
kall	ethereum\tools\tester.py	/^        def kall(self, *args, **kwargs):$/;"	f	function:ABIContract.method_factory
keys	ethereum\tools\tester.py	/^keys = []$/;"	v
languages	ethereum\tools\tester.py	/^languages = {}$/;"	v
last_gas_used	ethereum\tools\tester.py	/^    def last_gas_used(self, with_tx=False):$/;"	m	class:Chain
make_head_candidate	ethereum\tools\tester.py	/^from ethereum.meta import make_head_candidate$/;"	i
method_factory	ethereum\tools\tester.py	/^    def method_factory(tx_or_call, function_name):$/;"	m	class:ABIContract
mine	ethereum\tools\tester.py	/^    def mine(self, number_of_blocks=1, coinbase=a0):$/;"	m	class:Chain
minimal_alloc	ethereum\tools\tester.py	/^minimal_alloc = {}$/;"	v
mk_basic_state	ethereum\tools\tester.py	/^from ethereum.genesis_helpers import mk_basic_state$/;"	i
mk_block_from_prevstate	ethereum\tools\tester.py	/^from ethereum.common import verify_execution_results, mk_block_from_prevstate, set_execution_results$/;"	i
mk_state_test_postfill	ethereum\tools\tester.py	/^def mk_state_test_postfill(c, prefill, filler_mode=False):$/;"	f
mk_state_test_prefill	ethereum\tools\tester.py	/^def mk_state_test_prefill(c):$/;"	f
pow_chain	ethereum\tools\tester.py	/^from ethereum.pow import chain as pow_chain$/;"	i
privtoaddr	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
revert	ethereum\tools\tester.py	/^    def revert(self, snapshot):$/;"	m	class:Chain
rlp	ethereum\tools\tester.py	/^import rlp$/;"	i
serpent	ethereum\tools\tester.py	/^    import serpent$/;"	i
set_execution_results	ethereum\tools\tester.py	/^from ethereum.common import verify_execution_results, mk_block_from_prevstate, set_execution_results$/;"	i
sha3	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
snapshot	ethereum\tools\tester.py	/^    def snapshot(self):$/;"	m	class:Chain
to_string	ethereum\tools\tester.py	/^from ethereum.utils import sha3, privtoaddr, int_to_addr, to_string, big_endian_to_int, checksum_encode, int_to_big_endian, encode_hex$/;"	i
tx	ethereum\tools\tester.py	/^    def tx(self, sender=k0, to=b'\\x00' * 20, value=0, data=b'', startgas=STARTGAS, gasprice=GASPRICE):$/;"	m	class:Chain
tx	ethereum\tools\tester.py	/^    def tx(self, sender=k0, to=b'\\x00' * 20, value=0, data=b'', startgas=STARTGAS, gasprice=GASPRICE):$/;"	m	class:State
types	ethereum\tools\tester.py	/^import types$/;"	i
verify_execution_results	ethereum\tools\tester.py	/^from ethereum.common import verify_execution_results, mk_block_from_prevstate, set_execution_results$/;"	i
FILL	ethereum\tools\testutils.py	/^FILL = 1$/;"	v
TIME	ethereum\tools\testutils.py	/^TIME = 3$/;"	v
VERIFY	ethereum\tools\testutils.py	/^VERIFY = 2$/;"	v
abi	ethereum\tools\testutils.py	/^from ethereum import abi$/;"	i
bytesify	ethereum\tools\testutils.py	/^def bytesify(li):$/;"	f
check_abi_test	ethereum\tools\testutils.py	/^check_abi_test = lambda params: run_abi_test(params, VERIFY)$/;"	v
encode_hex	ethereum\tools\testutils.py	/^from ethereum.utils import encode_hex, str_to_bytes$/;"	i
fill_abi_test	ethereum\tools\testutils.py	/^fill_abi_test = lambda params: run_abi_test(params, FILL)$/;"	v
fixture_path	ethereum\tools\testutils.py	/^fixture_path = os.path.join(os.path.dirname(__file__), '..\/..', 'fixtures')$/;"	v
generate_test_params	ethereum\tools\testutils.py	/^def generate_test_params(testsource, metafunc, skip_func=None, exclude_func=None):$/;"	f
get_tests_from_file_or_dir	ethereum\tools\testutils.py	/^def get_tests_from_file_or_dir(dname, json_only=False):$/;"	f
json	ethereum\tools\testutils.py	/^import json$/;"	i
os	ethereum\tools\testutils.py	/^import os$/;"	i
pytest	ethereum\tools\testutils.py	/^    import pytest$/;"	i
run_abi_test	ethereum\tools\testutils.py	/^def run_abi_test(params, mode):$/;"	f
str_to_bytes	ethereum\tools\testutils.py	/^from ethereum.utils import encode_hex, str_to_bytes$/;"	i
time	ethereum\tools\testutils.py	/^import time$/;"	i
OrderableTx	ethereum\transaction_queue.py	/^class OrderableTx(object):$/;"	c
PRIO_INFINITY	ethereum\transaction_queue.py	/^PRIO_INFINITY = -2**100$/;"	v
Transaction	ethereum\transaction_queue.py	/^    from ethereum.transactions import Transaction$/;"	i
TransactionQueue	ethereum\transaction_queue.py	/^class TransactionQueue():$/;"	c
__init__	ethereum\transaction_queue.py	/^    def __init__(self):$/;"	m	class:TransactionQueue
__init__	ethereum\transaction_queue.py	/^    def __init__(self, prio, counter, tx):$/;"	m	class:OrderableTx
__len__	ethereum\transaction_queue.py	/^    def __len__(self):$/;"	m	class:TransactionQueue	file:
__lt__	ethereum\transaction_queue.py	/^    def __lt__(self, other):$/;"	m	class:OrderableTx	file:
add_transaction	ethereum\transaction_queue.py	/^    def add_transaction(self, tx, force=False):$/;"	m	class:TransactionQueue
diff	ethereum\transaction_queue.py	/^    def diff(self, txs):$/;"	m	class:TransactionQueue
heapq	ethereum\transaction_queue.py	/^import heapq$/;"	i
make_test_tx	ethereum\transaction_queue.py	/^def make_test_tx(s=100000, g=50, data='', nonce=0):$/;"	f
peek	ethereum\transaction_queue.py	/^    def peek(self, num=None):$/;"	m	class:TransactionQueue
pop_transaction	ethereum\transaction_queue.py	/^    def pop_transaction(self, max_gas=9999999999, max_seek_depth=16, min_gasprice=0):$/;"	m	class:TransactionQueue
test	ethereum\transaction_queue.py	/^def test():$/;"	f
test_diff	ethereum\transaction_queue.py	/^def test_diff():$/;"	f
test_orderable_tx	ethereum\transaction_queue.py	/^def test_orderable_tx():$/;"	f
test_ordering_for_same_prio	ethereum\transaction_queue.py	/^def test_ordering_for_same_prio():$/;"	f
InvalidTransaction	ethereum\transactions.py	/^from ethereum.exceptions import InvalidTransaction$/;"	i
TT256	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
Transaction	ethereum\transactions.py	/^class Transaction(rlp.Serializable):$/;"	c
UnsignedTransaction	ethereum\transactions.py	/^UnsignedTransaction = Transaction.exclude(['v', 'r', 's'])$/;"	v
__eq__	ethereum\transactions.py	/^    def __eq__(self, other):$/;"	m	class:Transaction	file:
__hash__	ethereum\transactions.py	/^    def __hash__(self):$/;"	m	class:Transaction	file:
__init__	ethereum\transactions.py	/^    def __init__(self, nonce, gasprice, startgas, to, value, data, v=0, r=0, s=0):$/;"	m	class:Transaction
__lt__	ethereum\transactions.py	/^    def __lt__(self, other):$/;"	m	class:Transaction	file:
__ne__	ethereum\transactions.py	/^    def __ne__(self, other):$/;"	m	class:Transaction	file:
__repr__	ethereum\transactions.py	/^    def __repr__(self):$/;"	m	class:Transaction	file:
__structlog__	ethereum\transactions.py	/^    def __structlog__(self):$/;"	m	class:Transaction	file:
_sender	ethereum\transactions.py	/^    _sender = None$/;"	v	class:Transaction
ascii_chr	ethereum\transactions.py	/^from rlp.utils import str_to_bytes, ascii_chr$/;"	i
big_endian_int	ethereum\transactions.py	/^from rlp.sedes import big_endian_int, binary$/;"	i
big_endian_to_int	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
binary	ethereum\transactions.py	/^from rlp.sedes import big_endian_int, binary$/;"	i
bloom	ethereum\transactions.py	/^from ethereum import bloom$/;"	i
check_low_s_homestead	ethereum\transactions.py	/^    def check_low_s_homestead(self):$/;"	m	class:Transaction
check_low_s_metropolis	ethereum\transactions.py	/^    def check_low_s_metropolis(self):$/;"	m	class:Transaction
creates	ethereum\transactions.py	/^    def creates(self):$/;"	m	class:Transaction
ecrecover_to_pub	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
ecsign	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
encode_hex	ethereum\transactions.py	/^from ethereum.utils import encode_hex$/;"	i
fields	ethereum\transactions.py	/^    fields = [$/;"	v	class:Transaction
get_logger	ethereum\transactions.py	/^from ethereum.slogging import get_logger$/;"	i
hash	ethereum\transactions.py	/^    def hash(self):$/;"	m	class:Transaction
int_to_32bytearray	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
intrinsic_gas_used	ethereum\transactions.py	/^    def intrinsic_gas_used(self):$/;"	m	class:Transaction
log	ethereum\transactions.py	/^log = get_logger('eth.chain.tx')$/;"	v
mk_contract_address	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
network_id	ethereum\transactions.py	/^    def network_id(self):$/;"	m	class:Transaction
normalize_key	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
null_address	ethereum\transactions.py	/^null_address = b'\\xff' * 20$/;"	v
opcodes	ethereum\transactions.py	/^from ethereum import opcodes$/;"	i
rlp	ethereum\transactions.py	/^import rlp$/;"	i
secpk1n	ethereum\transactions.py	/^secpk1n = 115792089237316195423570985008687907852837564279074904382605163141518161494337$/;"	v
sender	ethereum\transactions.py	/^    def sender(self):$/;"	m	class:Transaction
sender	ethereum\transactions.py	/^    def sender(self, value):$/;"	m	class:Transaction
sign	ethereum\transactions.py	/^    def sign(self, key, network_id=None):$/;"	m	class:Transaction
str_to_bytes	ethereum\transactions.py	/^from rlp.utils import str_to_bytes, ascii_chr$/;"	i
to_dict	ethereum\transactions.py	/^    def to_dict(self):$/;"	m	class:Transaction
utils	ethereum\transactions.py	/^from ethereum import utils$/;"	i
zpad	ethereum\transactions.py	/^from ethereum.utils import TT256, mk_contract_address, zpad, int_to_32bytearray, big_endian_to_int, ecsign, ecrecover_to_pub, normalize_key$/;"	i
BLANK_NODE	ethereum\trie.py	/^BLANK_NODE = b''$/;"	v
BLANK_ROOT	ethereum\trie.py	/^BLANK_ROOT = utils.sha3rlp(b'')$/;"	v
NIBBLE_TERMINATOR	ethereum\trie.py	/^NIBBLE_TERMINATOR = 16$/;"	v
Trie	ethereum\trie.py	/^class Trie(object):$/;"	c
__contains__	ethereum\trie.py	/^    def __contains__(self, key):$/;"	m	class:Trie	file:
__delitem__	ethereum\trie.py	/^    def __delitem__(self, key):$/;"	m	class:Trie	file:
__getitem__	ethereum\trie.py	/^    def __getitem__(self, key):$/;"	m	class:Trie	file:
__init__	ethereum\trie.py	/^    def __init__(self, db, root_hash=BLANK_ROOT):$/;"	m	class:Trie
__iter__	ethereum\trie.py	/^    def __iter__(self):$/;"	m	class:Trie	file:
__len__	ethereum\trie.py	/^    def __len__(self):$/;"	m	class:Trie	file:
__setitem__	ethereum\trie.py	/^    def __setitem__(self, key, value):$/;"	m	class:Trie	file:
_db	ethereum\trie.py	/^    _db = db.DB(sys.argv[2])$/;"	v
_decode_to_node	ethereum\trie.py	/^    def _decode_to_node(self, encoded):$/;"	m	class:Trie
_delete	ethereum\trie.py	/^    def _delete(self, node, key):$/;"	m	class:Trie
_delete_and_delete_storage	ethereum\trie.py	/^    def _delete_and_delete_storage(self, node, key):$/;"	m	class:Trie
_delete_branch_node	ethereum\trie.py	/^    def _delete_branch_node(self, node, key):$/;"	m	class:Trie
_delete_child_storage	ethereum\trie.py	/^    def _delete_child_storage(self, node):$/;"	m	class:Trie
_delete_kv_node	ethereum\trie.py	/^    def _delete_kv_node(self, node, key):$/;"	m	class:Trie
_delete_node_storage	ethereum\trie.py	/^    def _delete_node_storage(self, node):$/;"	m	class:Trie
_encode_node	ethereum\trie.py	/^    def _encode_node(self, node, put_in_db=True):$/;"	m	class:Trie
_get	ethereum\trie.py	/^    def _get(self, node, key):$/;"	m	class:Trie
_get_node_type	ethereum\trie.py	/^    def _get_node_type(self, node):$/;"	m	class:Trie
_get_size	ethereum\trie.py	/^    def _get_size(self, node):$/;"	m	class:Trie
_getany	ethereum\trie.py	/^    def _getany(self, node, reverse=False, path=[]):$/;"	m	class:Trie
_iter	ethereum\trie.py	/^    def _iter(self, node, key, reverse=False, path=[]):$/;"	m	class:Trie
_iter_branch	ethereum\trie.py	/^    def _iter_branch(self, node):$/;"	m	class:Trie
_merge	ethereum\trie.py	/^    def _merge(self, node1, node2):$/;"	m	class:Trie
_normalize_branch_node	ethereum\trie.py	/^    def _normalize_branch_node(self, node):$/;"	m	class:Trie
_split	ethereum\trie.py	/^    def _split(self, node, key):$/;"	m	class:Trie
_to_dict	ethereum\trie.py	/^    def _to_dict(self, node):$/;"	m	class:Trie
_update	ethereum\trie.py	/^    def _update(self, node, key, value):$/;"	m	class:Trie
_update_and_delete_storage	ethereum\trie.py	/^    def _update_and_delete_storage(self, node, key, value):$/;"	m	class:Trie
_update_kv_node	ethereum\trie.py	/^    def _update_kv_node(self, node, key, value):$/;"	m	class:Trie
_update_root_hash	ethereum\trie.py	/^    def _update_root_hash(self):$/;"	m	class:Trie
adapt_terminator	ethereum\trie.py	/^def adapt_terminator(nibbles, has_terminator):$/;"	f
ascii_chr	ethereum\trie.py	/^from rlp.utils import decode_hex, ascii_chr, str_to_bytes$/;"	i
bin_to_nibbles	ethereum\trie.py	/^def bin_to_nibbles(s):$/;"	f
bin_to_nibbles_cache	ethereum\trie.py	/^bin_to_nibbles_cache = {}$/;"	v
clear	ethereum\trie.py	/^    def clear(self):$/;"	m	class:Trie
copy	ethereum\trie.py	/^import copy$/;"	i
db	ethereum\trie.py	/^    from . import db$/;"	i
decode_hex	ethereum\trie.py	/^from rlp.utils import decode_hex, ascii_chr, str_to_bytes$/;"	i
delete	ethereum\trie.py	/^    def delete(self, key):$/;"	m	class:Trie
encode_hex	ethereum\trie.py	/^from ethereum.utils import encode_hex$/;"	i
encode_node	ethereum\trie.py	/^    def encode_node(nd):$/;"	f
encode_optimized	ethereum\trie.py	/^from ethereum.fast_rlp import encode_optimized$/;"	i
get	ethereum\trie.py	/^    def get(self, key):$/;"	m	class:Trie
get_root_hash	ethereum\trie.py	/^    def get_root_hash(self):$/;"	m	class:Trie
hti	ethereum\trie.py	/^hti = {}$/;"	v
is_key_value_type	ethereum\trie.py	/^def is_key_value_type(node_type):$/;"	f
is_string	ethereum\trie.py	/^from ethereum.abi import is_string$/;"	i
iter_branch	ethereum\trie.py	/^    def iter_branch(self):$/;"	m	class:Trie
next	ethereum\trie.py	/^    def next(self, key):$/;"	m	class:Trie
nibbles_to_bin	ethereum\trie.py	/^def nibbles_to_bin(nibbles):$/;"	f
os	ethereum\trie.py	/^import os$/;"	i
pack_nibbles	ethereum\trie.py	/^def pack_nibbles(nibbles):$/;"	f
prev	ethereum\trie.py	/^    def prev(self, key):$/;"	m	class:Trie
rlp	ethereum\trie.py	/^import rlp$/;"	i
rlp_encode	ethereum\trie.py	/^rlp_encode = encode_optimized$/;"	v
root_hash	ethereum\trie.py	/^    def root_hash(self):$/;"	m	class:Trie
root_hash	ethereum\trie.py	/^    def root_hash(self, value):$/;"	m	class:Trie
root_hash_valid	ethereum\trie.py	/^    def root_hash_valid(self):$/;"	m	class:Trie
set_root_hash	ethereum\trie.py	/^    def set_root_hash(self, root_hash):$/;"	m	class:Trie
split	ethereum\trie.py	/^    def split(self, key):$/;"	m	class:Trie
starts_with	ethereum\trie.py	/^def starts_with(full, part):$/;"	f
str_to_bytes	ethereum\trie.py	/^from rlp.utils import decode_hex, ascii_chr, str_to_bytes$/;"	i
sys	ethereum\trie.py	/^    import sys$/;"	i
to_dict	ethereum\trie.py	/^    def to_dict(self):$/;"	m	class:Trie
to_string	ethereum\trie.py	/^from ethereum.utils import to_string$/;"	i
unpack_to_nibbles	ethereum\trie.py	/^def unpack_to_nibbles(bindata):$/;"	f
unsafe_merge	ethereum\trie.py	/^    def unsafe_merge(cls, trie1, trie2):$/;"	m	class:Trie
update	ethereum\trie.py	/^    def update(self, key, value):$/;"	m	class:Trie
utils	ethereum\trie.py	/^from ethereum import utils$/;"	i
with_terminator	ethereum\trie.py	/^def with_terminator(nibbles):$/;"	f
without_terminator	ethereum\trie.py	/^def without_terminator(nibbles):$/;"	f
BOLD	ethereum\utils.py	/^    BOLD = '\\033[1m'$/;"	v	class:bcolors
BigEndianInt	ethereum\utils.py	/^from rlp.sedes import big_endian_int, BigEndianInt, Binary$/;"	i
Binary	ethereum\utils.py	/^from rlp.sedes import big_endian_int, BigEndianInt, Binary$/;"	i
DEBUG	ethereum\utils.py	/^def DEBUG(msg, *args, **kwargs):$/;"	f
Denoms	ethereum\utils.py	/^class Denoms():$/;"	c
ENDC	ethereum\utils.py	/^    ENDC = '\\033[0m'$/;"	v	class:bcolors
FAIL	ethereum\utils.py	/^    FAIL = '\\033[91m'$/;"	v	class:bcolors
HEADER	ethereum\utils.py	/^    HEADER = '\\033[95m'$/;"	v	class:bcolors
OKBLUE	ethereum\utils.py	/^    OKBLUE = '\\033[94m'$/;"	v	class:bcolors
OKGREEN	ethereum\utils.py	/^    OKGREEN = '\\033[92m'$/;"	v	class:bcolors
SECP256K1P	ethereum\utils.py	/^SECP256K1P = 2**256 - 4294968273$/;"	v
TT255	ethereum\utils.py	/^TT255 = 2 ** 255$/;"	v
TT256	ethereum\utils.py	/^TT256 = 2 ** 256$/;"	v
TT256M1	ethereum\utils.py	/^TT256M1 = 2 ** 256 - 1$/;"	v
UNDERLINE	ethereum\utils.py	/^    UNDERLINE = '\\033[4m'$/;"	v	class:bcolors
WARNING	ethereum\utils.py	/^    WARNING = '\\033[91m'$/;"	v	class:bcolors
__init__	ethereum\utils.py	/^    def __init__(self):$/;"	m	class:Denoms
_sha3	ethereum\utils.py	/^    import sha3 as _sha3$/;"	i
address	ethereum\utils.py	/^address = Binary.fixed_length(20, allow_empty=True)$/;"	v
ascii_chr	ethereum\utils.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr, str_to_bytes$/;"	i
bcolors	ethereum\utils.py	/^class bcolors:$/;"	c
big_endian_int	ethereum\utils.py	/^from rlp.sedes import big_endian_int, BigEndianInt, Binary$/;"	i
big_endian_to_int	ethereum\utils.py	/^big_endian_to_int = lambda x: big_endian_int.deserialize(str_to_bytes(x).lstrip(b'\\x00'))$/;"	v
bytearray_to_bytestr	ethereum\utils.py	/^    def bytearray_to_bytestr(value):$/;"	f
bytearray_to_int	ethereum\utils.py	/^def bytearray_to_int(arr):$/;"	f
bytes_to_int	ethereum\utils.py	/^    def bytes_to_int(value):$/;"	f
ceil32	ethereum\utils.py	/^def ceil32(x):$/;"	f
check_checksum	ethereum\utils.py	/^def check_checksum(addr):$/;"	f
checksum_encode	ethereum\utils.py	/^def checksum_encode(addr): # Takes a 20-byte binary address as input$/;"	f
coerce_addr_to_bin	ethereum\utils.py	/^def coerce_addr_to_bin(x):$/;"	f
coerce_addr_to_hex	ethereum\utils.py	/^def coerce_addr_to_hex(x):$/;"	f
coerce_to_bytes	ethereum\utils.py	/^def coerce_to_bytes(x):$/;"	f
coerce_to_int	ethereum\utils.py	/^def coerce_to_int(x):$/;"	f
deb	ethereum\utils.py	/^    def deb(f):$/;"	f	function:debug
debug	ethereum\utils.py	/^def debug(label):$/;"	f
decode_addr	ethereum\utils.py	/^def decode_addr(v):$/;"	f
decode_bin	ethereum\utils.py	/^def decode_bin(v):$/;"	f
decode_hex	ethereum\utils.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr, str_to_bytes$/;"	i
decode_int	ethereum\utils.py	/^def decode_int(v):$/;"	f
decode_int256	ethereum\utils.py	/^def decode_int256(v):$/;"	f
decoders	ethereum\utils.py	/^decoders = {$/;"	v
denoms	ethereum\utils.py	/^denoms = Denoms()$/;"	v
display	ethereum\utils.py	/^    def display(x):$/;"	f	function:print_func_call
dump_state	ethereum\utils.py	/^def dump_state(trie):$/;"	f
ecdsa_raw_recover	ethereum\utils.py	/^from py_ecc.secp256k1 import privtopub, ecdsa_raw_sign, ecdsa_raw_recover$/;"	i
ecdsa_raw_sign	ethereum\utils.py	/^from py_ecc.secp256k1 import privtopub, ecdsa_raw_sign, ecdsa_raw_recover$/;"	i
ecrecover_to_pub	ethereum\utils.py	/^def ecrecover_to_pub(rawhash, v, r, s):$/;"	f
ecsign	ethereum\utils.py	/^def ecsign(rawhash, key):$/;"	f
encode_bin	ethereum\utils.py	/^def encode_bin(v):$/;"	f
encode_hex	ethereum\utils.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr, str_to_bytes$/;"	i
encode_int	ethereum\utils.py	/^def encode_int(v):$/;"	f
encode_int256	ethereum\utils.py	/^def encode_int256(v):$/;"	f
encode_int32	ethereum\utils.py	/^    def encode_int32(v):$/;"	f
encode_root	ethereum\utils.py	/^def encode_root(v):$/;"	f
encoders	ethereum\utils.py	/^encoders = {$/;"	v
flatten	ethereum\utils.py	/^def flatten(li):$/;"	f
hash32	ethereum\utils.py	/^hash32 = Binary.fixed_length(32)$/;"	v
inner	ethereum\utils.py	/^        def inner(*args, **kwargs):$/;"	f	function:debug.deb
inner	ethereum\utils.py	/^    def inner(f):$/;"	f	function:print_func_call
int20	ethereum\utils.py	/^int20 = BigEndianInt(20)$/;"	v
int256	ethereum\utils.py	/^int256 = BigEndianInt(256)$/;"	v
int32	ethereum\utils.py	/^int32 = BigEndianInt(32)$/;"	v
int_to_32bytearray	ethereum\utils.py	/^def int_to_32bytearray(i):$/;"	f
int_to_addr	ethereum\utils.py	/^def int_to_addr(x):$/;"	f
int_to_big_endian	ethereum\utils.py	/^int_to_big_endian = lambda x: big_endian_int.serialize(x)$/;"	v
int_to_bytes	ethereum\utils.py	/^    def int_to_bytes(value):$/;"	f
int_to_hex	ethereum\utils.py	/^def int_to_hex(x):$/;"	f
is_numeric	ethereum\utils.py	/^    is_numeric = lambda x: isinstance(x, (int, long))$/;"	v
is_numeric	ethereum\utils.py	/^    is_numeric = lambda x: isinstance(x, int)$/;"	v
is_string	ethereum\utils.py	/^    is_string = lambda x: isinstance(x, (str, unicode))$/;"	v
is_string	ethereum\utils.py	/^    is_string = lambda x: isinstance(x, bytes)$/;"	v
keccak	ethereum\utils.py	/^    from Crypto.Hash import keccak$/;"	i
mk_contract_address	ethereum\utils.py	/^def mk_contract_address(sender, nonce):$/;"	f
mk_metropolis_contract_address	ethereum\utils.py	/^def mk_metropolis_contract_address(sender, initcode):$/;"	f
normalize_address	ethereum\utils.py	/^def normalize_address(x, allow_blank=False):$/;"	f
normalize_key	ethereum\utils.py	/^def normalize_key(key):$/;"	f
parse_as_bin	ethereum\utils.py	/^def parse_as_bin(s):$/;"	f
parse_as_int	ethereum\utils.py	/^def parse_as_int(s):$/;"	f
parse_int_or_hex	ethereum\utils.py	/^def parse_int_or_hex(s):$/;"	f
print_func_call	ethereum\utils.py	/^def print_func_call(ignore_first_arg=False, max_call_number=100):$/;"	f
printers	ethereum\utils.py	/^printers = {$/;"	v
privtoaddr	ethereum\utils.py	/^def privtoaddr(k):$/;"	f
privtopub	ethereum\utils.py	/^from py_ecc.secp256k1 import privtopub, ecdsa_raw_sign, ecdsa_raw_recover$/;"	i
random	ethereum\utils.py	/^import random$/;"	i
remove_0x_head	ethereum\utils.py	/^def remove_0x_head(s):$/;"	f
rlp	ethereum\utils.py	/^import rlp$/;"	i
rzpad	ethereum\utils.py	/^def rzpad(value, total_length):$/;"	f
safe_ord	ethereum\utils.py	/^def safe_ord(value):$/;"	f
scan_bin	ethereum\utils.py	/^def scan_bin(v):$/;"	f
scan_int	ethereum\utils.py	/^def scan_int(v):$/;"	f
scanners	ethereum\utils.py	/^scanners = {$/;"	v
secp256k1	ethereum\utils.py	/^    import secp256k1$/;"	i
secp256k1	ethereum\utils.py	/^    secp256k1 = None$/;"	v
secp256k1	ethereum\utils.py	/^    warnings.warn('could not import secp256k1', ImportWarning)$/;"	i
sha3	ethereum\utils.py	/^def sha3(seed):$/;"	f
sha3_256	ethereum\utils.py	/^    sha3_256 = lambda x: _sha3.keccak_256(x).digest()$/;"	v
sha3_256	ethereum\utils.py	/^    sha3_256 = lambda x: keccak.new(digest_bits=256, data=x).digest()$/;"	v
sha3rlp	ethereum\utils.py	/^def sha3rlp(x):$/;"	f
slogging	ethereum\utils.py	/^    from ethereum import slogging$/;"	i
str_to_bytes	ethereum\utils.py	/^from rlp.utils import decode_hex, encode_hex, ascii_chr, str_to_bytes$/;"	i
sys	ethereum\utils.py	/^import sys$/;"	i
to_signed	ethereum\utils.py	/^def to_signed(i):$/;"	f
to_string	ethereum\utils.py	/^    def to_string(value):$/;"	f
to_string_for_regexp	ethereum\utils.py	/^    def to_string_for_regexp(value):$/;"	f
trie_root	ethereum\utils.py	/^trie_root = Binary.fixed_length(32, allow_empty=True)$/;"	v
unicode	ethereum\utils.py	/^    unicode = str$/;"	v
unicode	ethereum\utils.py	/^    unicode = unicode$/;"	v
warnings	ethereum\utils.py	/^    import warnings$/;"	i
wrapper	ethereum\utils.py	/^        def wrapper(*args, **kwargs):$/;"	f	function:print_func_call.inner
wraps	ethereum\utils.py	/^    from functools import wraps$/;"	i
zpad	ethereum\utils.py	/^def zpad(x, l):$/;"	f
CallData	ethereum\vm.py	/^class CallData(object):$/;"	c
Compustate	ethereum\vm.py	/^class Compustate():$/;"	c
MAX_DEPTH	ethereum\vm.py	/^MAX_DEPTH = 1024$/;"	v
Message	ethereum\vm.py	/^class Message(object):$/;"	c
TT255	ethereum\vm.py	/^TT255 = 2 ** 255$/;"	v
TT256	ethereum\vm.py	/^TT256 = 2 ** 256$/;"	v
TT256M1	ethereum\vm.py	/^TT256M1 = 2 ** 256 - 1$/;"	v
VmExtBase	ethereum\vm.py	/^class VmExtBase():$/;"	c
__init__	ethereum\vm.py	/^    def __init__(self):$/;"	m	class:VmExtBase
__init__	ethereum\vm.py	/^    def __init__(self, **kwargs):$/;"	m	class:Compustate
__init__	ethereum\vm.py	/^    def __init__(self, parent_memory, offset=0, size=None):$/;"	m	class:CallData
__init__	ethereum\vm.py	/^    def __init__(self, sender, to, value=0, gas=1000000, data='', depth=0,$/;"	m	class:Message
__repr__	ethereum\vm.py	/^    def __repr__(self):$/;"	m	class:Message	file:
all_but_1n	ethereum\vm.py	/^def all_but_1n(x, n):$/;"	f
ascii_chr	ethereum\vm.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
bytearray_to_bytestr	ethereum\vm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr, safe_ord$/;"	i
copy	ethereum\vm.py	/^import copy$/;"	i
data_copy	ethereum\vm.py	/^def data_copy(compustate, size):$/;"	f
eat_gas	ethereum\vm.py	/^def eat_gas(compustate, amount):$/;"	f
encode_hex	ethereum\vm.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
encode_int	ethereum\vm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr, safe_ord$/;"	i
extract32	ethereum\vm.py	/^    def extract32(self, i):$/;"	m	class:CallData
extract_all	ethereum\vm.py	/^    def extract_all(self):$/;"	m	class:CallData
extract_copy	ethereum\vm.py	/^    def extract_copy(self, mem, memstart, datastart, size):$/;"	m	class:CallData
get_logger	ethereum\vm.py	/^from ethereum.slogging import get_logger$/;"	i
is_numeric	ethereum\vm.py	/^from ethereum.abi import is_numeric$/;"	i
log_log	ethereum\vm.py	/^log_log = get_logger('eth.vm.log')$/;"	v
log_msg	ethereum\vm.py	/^log_msg = get_logger('eth.pb.msg')$/;"	v
log_vm_exit	ethereum\vm.py	/^log_vm_exit = get_logger('eth.vm.exit')$/;"	v
log_vm_op	ethereum\vm.py	/^log_vm_op = get_logger('eth.vm.op')$/;"	v
log_vm_op_memory	ethereum\vm.py	/^log_vm_op_memory = get_logger('eth.vm.op.memory')$/;"	v
log_vm_op_stack	ethereum\vm.py	/^log_vm_op_stack = get_logger('eth.vm.op.stack')$/;"	v
log_vm_op_storage	ethereum\vm.py	/^log_vm_op_storage = get_logger('eth.vm.op.storage')$/;"	v
lru_cache	ethereum\vm.py	/^    from functools import lru_cache$/;"	i
lru_cache	ethereum\vm.py	/^    from repoze.lru import lru_cache$/;"	i
mem_extend	ethereum\vm.py	/^def mem_extend(mem, compustate, op, start, sz):$/;"	f
opcodes	ethereum\vm.py	/^from ethereum import opcodes$/;"	i
peaceful_exit	ethereum\vm.py	/^def peaceful_exit(cause, gas, data, **kargs):$/;"	f
preprocess_code	ethereum\vm.py	/^def preprocess_code(code):$/;"	f
revert	ethereum\vm.py	/^def revert(gas, data, **kargs):$/;"	f
safe_ord	ethereum\vm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr, safe_ord$/;"	i
sys	ethereum\vm.py	/^import sys$/;"	i
to_string	ethereum\vm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr, safe_ord$/;"	i
utils	ethereum\vm.py	/^from ethereum import utils$/;"	i
verify_stack_after_op	ethereum\vm.py	/^verify_stack_after_op = False$/;"	v
vm_exception	ethereum\vm.py	/^def vm_exception(error, **kargs):$/;"	f
vm_execute	ethereum\vm.py	/^def vm_execute(ext, msg, code):$/;"	f
zpad	ethereum\vm.py	/^from ethereum.utils import to_string, encode_int, zpad, bytearray_to_bytestr, safe_ord$/;"	i
classifiers	setup.py	/^    classifiers=[$/;"	v
description	setup.py	/^    description='Next generation cryptocurrency network',$/;"	v
find_packages	setup.py	/^from setuptools import setup, find_packages$/;"	i
install_requires	setup.py	/^    install_requires=install_requires,$/;"	v
install_requires	setup.py	/^install_requires = [install_requires_replacements.get(r, r) for r in install_requires]$/;"	v
install_requires	setup.py	/^install_requires = set(x.strip() for x in open('requirements.txt'))$/;"	v
install_requires_replacements	setup.py	/^install_requires_replacements = {$/;"	v
long_description	setup.py	/^    long_description=readme,$/;"	v
name	setup.py	/^    name="ethereum",$/;"	v
packages	setup.py	/^    packages=find_packages("."),$/;"	v
readme	setup.py	/^    readme = readme_file.read()$/;"	v
setup	setup.py	/^from setuptools import setup, find_packages$/;"	i
setup_requires	setup.py	/^    setup_requires=[$/;"	v
tests_require	setup.py	/^    tests_require=tests_require,$/;"	v
tests_require	setup.py	/^tests_require = [tests_require_replacements.get(r, r) for r in tests_require]$/;"	v
tests_require	setup.py	/^tests_require = set(x.strip() for x in open('dev_requirements.txt'))$/;"	v
tests_require_replacements	setup.py	/^tests_require_replacements = dict()$/;"	v
tests_require_replacements	setup.py	/^tests_require_replacements = {$/;"	v
url	setup.py	/^    url='https:\/\/github.com\/ethereum\/pyethereum\/',$/;"	v
version	setup.py	/^    version=version,$/;"	v
version	setup.py	/^version = '2.0.4'$/;"	v
StringIO	tools\fixture_to_example.py	/^    from io import StringIO$/;"	i
f	tools\fixture_to_example.py	/^    f = sys.argv[1]$/;"	v
fixture	tools\fixture_to_example.py	/^    fixture = json.load(file(f))$/;"	v
fixture_to_tables	tools\fixture_to_example.py	/^def fixture_to_tables(fixture):$/;"	f
format_item	tools\fixture_to_example.py	/^def format_item(item, py=True):$/;"	f
format_to_example	tools\fixture_to_example.py	/^def format_to_example(table, tabspace=2, indent=2):$/;"	f
json	tools\fixture_to_example.py	/^    import json$/;"	i
sys	tools\fixture_to_example.py	/^    import sys$/;"	i
tables	tools\fixture_to_example.py	/^    tables = fixture_to_tables(fixture)$/;"	v
ethereum	tools\keystorer.py	/^        import ethereum.keys as keys$/;"	i
getpass	tools\keystorer.py	/^import getpass$/;"	i
j	tools\keystorer.py	/^    j = keys.make_keystore_json(key, pw)$/;"	v
json	tools\keystorer.py	/^    json = json.loads(open(sys.argv[2]).read())$/;"	v
json	tools\keystorer.py	/^import sys, json, os$/;"	i
k	tools\keystorer.py	/^    k = keys.decode_keystore_json(json, pw)$/;"	v
key	tools\keystorer.py	/^        key = keys.decode_hex(sys.argv[2])$/;"	v
key	tools\keystorer.py	/^        key = os.urandom(32)$/;"	v
keys	tools\keystorer.py	/^        import ethereum.keys as keys$/;"	i
keys	tools\keystorer.py	/^    import keys$/;"	i
os	tools\keystorer.py	/^import sys, json, os$/;"	i
pw	tools\keystorer.py	/^    pw = getpass.getpass()$/;"	v
pw2	tools\keystorer.py	/^    pw2 = getpass.getpass()$/;"	v
sys	tools\keystorer.py	/^import sys, json, os$/;"	i
big_endian_to_int	tools\mk_ecadd_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
c	tools\mk_ecadd_tests.py	/^c = tester.Chain(env='metropolis')$/;"	v
encode_int32	tools\mk_ecadd_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
gaslimits	tools\mk_ecadd_tests.py	/^gaslimits = [21000, 25000]$/;"	v
int_to_big_endian	tools\mk_ecadd_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
intrinsic_gas_of_data	tools\mk_ecadd_tests.py	/^def intrinsic_gas_of_data(d):$/;"	f
json	tools\mk_ecadd_tests.py	/^import json$/;"	i
mk_ecadd_data	tools\mk_ecadd_tests.py	/^def mk_ecadd_data(p1, p2):$/;"	f
mk_test	tools\mk_ecadd_tests.py	/^def mk_test(p1, p2, execgas, datarestrict=128):$/;"	f
new_statetest_utils	tools\mk_ecadd_tests.py	/^from ethereum.tools import new_statetest_utils$/;"	i
opcodes	tools\mk_ecadd_tests.py	/^from ethereum import opcodes$/;"	i
py_pairing	tools\mk_ecadd_tests.py	/^import py_pairing$/;"	i
tester	tools\mk_ecadd_tests.py	/^from ethereum.tools import tester$/;"	i
testout	tools\mk_ecadd_tests.py	/^testout = {}$/;"	v
testout_filler	tools\mk_ecadd_tests.py	/^testout_filler = {}$/;"	v
tests	tools\mk_ecadd_tests.py	/^tests = []$/;"	v
wrong1	tools\mk_ecadd_tests.py	/^wrong1 = (py_pairing.FQ(1), py_pairing.FQ(3), py_pairing.FQ(1))$/;"	v
wrong2	tools\mk_ecadd_tests.py	/^wrong2 = (py_pairing.FQ(0), py_pairing.FQ(3), py_pairing.FQ(1))$/;"	v
wrong3	tools\mk_ecadd_tests.py	/^wrong3 = (py_pairing.FQ(6), py_pairing.FQ(9), py_pairing.FQ(1))$/;"	v
wrong4	tools\mk_ecadd_tests.py	/^wrong4 = (py_pairing.FQ(19274124), py_pairing.FQ(124124), py_pairing.FQ(1))$/;"	v
x1	tools\mk_ecadd_tests.py	/^x1 = c.contract(kode, language='viper')$/;"	v
zero	tools\mk_ecadd_tests.py	/^zero = (py_pairing.FQ(1), py_pairing.FQ(1), py_pairing.FQ(0))$/;"	v
big_endian_to_int	tools\mk_ecmul_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
c	tools\mk_ecmul_tests.py	/^c = tester.Chain(env='metropolis')$/;"	v
encode_int32	tools\mk_ecmul_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
gaslimits	tools\mk_ecmul_tests.py	/^gaslimits = [21000, 28000]$/;"	v
int_to_big_endian	tools\mk_ecmul_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
intrinsic_gas_of_data	tools\mk_ecmul_tests.py	/^def intrinsic_gas_of_data(d):$/;"	f
json	tools\mk_ecmul_tests.py	/^import json$/;"	i
mk_ecmul_data	tools\mk_ecmul_tests.py	/^def mk_ecmul_data(p1, m):$/;"	f
mk_test	tools\mk_ecmul_tests.py	/^def mk_test(p1, m, execgas, datarestrict=96):$/;"	f
mults	tools\mk_ecmul_tests.py	/^mults = [0, 1, 2, 9, 2**128, py_pairing.curve_order - 1, py_pairing.curve_order, 2**256 - 1]$/;"	v
n	tools\mk_ecmul_tests.py	/^    n = py_pairing.normalize(test[0])$/;"	v
new_statetest_utils	tools\mk_ecmul_tests.py	/^from ethereum.tools import new_statetest_utils$/;"	i
opcodes	tools\mk_ecmul_tests.py	/^from ethereum import opcodes$/;"	i
pts	tools\mk_ecmul_tests.py	/^pts = [zero, py_pairing.G1, py_pairing.multiply(py_pairing.G1, 98723629835235), wrong1, wrong2]$/;"	v
py_pairing	tools\mk_ecmul_tests.py	/^import py_pairing$/;"	i
tester	tools\mk_ecmul_tests.py	/^from ethereum.tools import tester$/;"	i
testout	tools\mk_ecmul_tests.py	/^testout = {}$/;"	v
testout_filler	tools\mk_ecmul_tests.py	/^testout_filler = {}$/;"	v
tests	tools\mk_ecmul_tests.py	/^tests = []$/;"	v
wrong1	tools\mk_ecmul_tests.py	/^wrong1 = (py_pairing.FQ(1), py_pairing.FQ(3), py_pairing.FQ(1))$/;"	v
wrong2	tools\mk_ecmul_tests.py	/^wrong2 = (py_pairing.FQ(0), py_pairing.FQ(3), py_pairing.FQ(1))$/;"	v
x1	tools\mk_ecmul_tests.py	/^x1 = c.contract(kode, language='viper')$/;"	v
zero	tools\mk_ecmul_tests.py	/^zero = (py_pairing.FQ(1), py_pairing.FQ(1), py_pairing.FQ(0))$/;"	v
FQ2_one	tools\mk_ecpairing_tests.py	/^FQ2_one = py_pairing.FQ2.one()$/;"	v
G1_zero	tools\mk_ecpairing_tests.py	/^G1_zero = (py_pairing.FQ.one(), py_pairing.FQ.one(), py_pairing.FQ.zero())$/;"	v
G2_zero	tools\mk_ecpairing_tests.py	/^G2_zero = (FQ2_one, FQ2_one, py_pairing.FQ2.zero())$/;"	v
GPB	tools\mk_ecpairing_tests.py	/^from ethereum.opcodes import GPAIRINGBASE as GPB$/;"	i
GPP	tools\mk_ecpairing_tests.py	/^from ethereum.opcodes import GPAIRINGPERPOINT as GPP$/;"	i
big_endian_to_int	tools\mk_ecpairing_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
big_order	tools\mk_ecpairing_tests.py	/^big_order = py_pairing.curve_order * (py_pairing.field_modulus * 2 - py_pairing.curve_order)$/;"	v
c	tools\mk_ecpairing_tests.py	/^c = tester.Chain(env='metropolis')$/;"	v
co	tools\mk_ecpairing_tests.py	/^co = py_pairing.curve_order$/;"	v
encode_int32	tools\mk_ecpairing_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
fake_point	tools\mk_ecpairing_tests.py	/^    fake_point = (x, y, FQ2_one)$/;"	v
fake_point	tools\mk_ecpairing_tests.py	/^fake_point = None$/;"	v
fm	tools\mk_ecpairing_tests.py	/^fm = py_pairing.field_modulus$/;"	v
int_to_big_endian	tools\mk_ecpairing_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
intrinsic_gas_of_data	tools\mk_ecpairing_tests.py	/^def intrinsic_gas_of_data(d):$/;"	f
json	tools\mk_ecpairing_tests.py	/^import json$/;"	i
m	tools\mk_ecpairing_tests.py	/^m = py_pairing.multiply$/;"	v
mk_ecpairing_data	tools\mk_ecpairing_tests.py	/^def mk_ecpairing_data(pts):$/;"	f
mk_test	tools\mk_ecpairing_tests.py	/^def mk_test(encoded, execgas, expect):$/;"	f
new_statetest_utils	tools\mk_ecpairing_tests.py	/^from ethereum.tools import new_statetest_utils$/;"	i
opcodes	tools\mk_ecpairing_tests.py	/^from ethereum import opcodes$/;"	i
perturb	tools\mk_ecpairing_tests.py	/^def perturb(inp, pos, by):$/;"	f
py_pairing	tools\mk_ecpairing_tests.py	/^import py_pairing$/;"	i
tester	tools\mk_ecpairing_tests.py	/^from ethereum.tools import tester$/;"	i
testout	tools\mk_ecpairing_tests.py	/^testout = {}$/;"	v
testout_filler	tools\mk_ecpairing_tests.py	/^testout_filler = {}$/;"	v
tests	tools\mk_ecpairing_tests.py	/^tests = []$/;"	v
x	tools\mk_ecpairing_tests.py	/^    x = py_pairing.FQ2([8, i])$/;"	v
x1	tools\mk_ecpairing_tests.py	/^x1 = c.contract(kode, language='viper')$/;"	v
y	tools\mk_ecpairing_tests.py	/^    y = ysquared ** ((py_pairing.field_modulus ** 2 + 15) \/\/ 32)$/;"	v
ysquared	tools\mk_ecpairing_tests.py	/^    ysquared = x ** 3 + py_pairing.b2$/;"	v
big_endian_to_int	tools\mk_modexp_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
c	tools\mk_modexp_tests.py	/^c = tester.Chain(alloc=tester.minimal_alloc, env='metropolis')$/;"	v
encode_int32	tools\mk_modexp_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
gaslimits	tools\mk_modexp_tests.py	/^gaslimits = [20500, 22000, 25000, 35000, 155000, 1000000]$/;"	v
int_to_big_endian	tools\mk_modexp_tests.py	/^from ethereum.utils import int_to_big_endian, encode_int32, big_endian_to_int$/;"	i
intlen	tools\mk_modexp_tests.py	/^def intlen(o):$/;"	f
intrinsic_gas_of_data	tools\mk_modexp_tests.py	/^def intrinsic_gas_of_data(d):$/;"	f
json	tools\mk_modexp_tests.py	/^import json$/;"	i
mk_modexp_data	tools\mk_modexp_tests.py	/^def mk_modexp_data(b, e, m):$/;"	f
mk_test	tools\mk_modexp_tests.py	/^def mk_test(b, e, m, execgas):$/;"	f
new_statetest_utils	tools\mk_modexp_tests.py	/^from ethereum.tools import new_statetest_utils$/;"	i
opcodes	tools\mk_modexp_tests.py	/^from ethereum import opcodes$/;"	i
tester	tools\mk_modexp_tests.py	/^from ethereum.tools import tester$/;"	i
testout	tools\mk_modexp_tests.py	/^testout = {}$/;"	v
testout_filler	tools\mk_modexp_tests.py	/^testout_filler = {}$/;"	v
tests	tools\mk_modexp_tests.py	/^tests = []$/;"	v
apply_msg_wrapper	tools\random_vm_test_generator.py	/^    def apply_msg_wrapper(_block, _tx, msg, code):$/;"	f	function:gen_test
ascii_chr	tools\random_vm_test_generator.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
encode_hex	tools\random_vm_test_generator.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
gen_random_code	tools\random_vm_test_generator.py	/^def gen_random_code(rnd):$/;"	f
gen_test	tools\random_vm_test_generator.py	/^def gen_test(seed):$/;"	f
json	tools\random_vm_test_generator.py	/^import json$/;"	i
mkrndgen	tools\random_vm_test_generator.py	/^def mkrndgen(seed):$/;"	f
pb	tools\random_vm_test_generator.py	/^pb = pyethereum.processblock$/;"	v
pyethereum	tools\random_vm_test_generator.py	/^import pyethereum$/;"	i
random	tools\random_vm_test_generator.py	/^import random$/;"	i
rnd	tools\random_vm_test_generator.py	/^    def rnd(n):$/;"	f	function:mkrndgen
sys	tools\random_vm_test_generator.py	/^import sys$/;"	i
t	tools\random_vm_test_generator.py	/^t = pyethereum.tester$/;"	v
u	tools\random_vm_test_generator.py	/^u = pyethereum.utils$/;"	v
apply_msg_wrapper	tools\vm_test_generator.py	/^        def apply_msg_wrapper(_block, _tx, msg, code):$/;"	f	function:gen_test
ascii_chr	tools\vm_test_generator.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
encode_hex	tools\vm_test_generator.py	/^from rlp.utils import encode_hex, ascii_chr$/;"	i
gen_test	tools\vm_test_generator.py	/^def gen_test(code, val, data):$/;"	f
json	tools\vm_test_generator.py	/^import json$/;"	i
o	tools\vm_test_generator.py	/^    o = gen_test(sys.argv[2], int(sys.argv[3]), sys.argv[4:])$/;"	v
pb	tools\vm_test_generator.py	/^pb = pyethereum.processblock$/;"	v
pyethereum	tools\vm_test_generator.py	/^import pyethereum$/;"	i
serpent	tools\vm_test_generator.py	/^import serpent$/;"	i
sys	tools\vm_test_generator.py	/^import sys$/;"	i
t	tools\vm_test_generator.py	/^t = pyethereum.tester$/;"	v
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
