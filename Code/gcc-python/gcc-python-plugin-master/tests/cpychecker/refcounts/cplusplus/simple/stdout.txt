Trace 0:
  Transitions:
    'when considering range: -0x80000000 <= value <= -1'
    'taking True path'
    'when PyDict_New() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32), region=RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32)) from tests/cpychecker/refcounts/cplusplus/simple/input.cc:32
    r->ob_refcnt: refs: 1 owned
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/cplusplus/simple/input.cc:26

Trace 1:
  Transitions:
    'when considering range: -0x80000000 <= value <= -1'
    'taking True path'
    'when PyDict_New() fails'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32), value=0)
    str(): (struct PyObject *)0 from tests/cpychecker/refcounts/cplusplus/simple/input.cc:32
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/cplusplus/simple/input.cc:32

Trace 2:
  Transitions:
    'when considering value == (int)0 from tests/cpychecker/refcounts/cplusplus/simple/input.cc:25'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=36), region=RegionForGlobal(gcc.VarDecl('_Py_NoneStruct')))
    str(): (struct PyObject *)&RegionForGlobal(gcc.VarDecl('_Py_NoneStruct')) from tests/cpychecker/refcounts/cplusplus/simple/input.cc:36
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: None
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/cplusplus/simple/input.cc:26

Trace 3:
  Transitions:
    'when considering range: 1 <= value <= 0x7fffffff'
    'taking True path'
    'when PyDict_New() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32), region=RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32)) from tests/cpychecker/refcounts/cplusplus/simple/input.cc:32
    r->ob_refcnt: refs: 1 owned
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/cplusplus/simple/input.cc:26

Trace 4:
  Transitions:
    'when considering range: 1 <= value <= 0x7fffffff'
    'taking True path'
    'when PyDict_New() fails'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/cplusplus/simple/input.cc', line=32), value=0)
    str(): (struct PyObject *)0 from tests/cpychecker/refcounts/cplusplus/simple/input.cc:32
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/cplusplus/simple/input.cc:32
