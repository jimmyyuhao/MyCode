Trace 0:
  Transitions:
    'when PyTuple_Size() returns ob_size'
    'returning'
  Return value:
    repr(): WithinRange(gcctype='Py_ssize_t', loc=gcc.Location(file='tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c', line=29), minvalue=-0x8000000000000000, maxvalue=0x7fffffffffffffff)
    str(): (Py_ssize_t)val [-0x8000000000000000 <= val <= 0x7fffffffffffffff] from tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c:29
  region for gcc.ParmDecl('obj') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('obj')")
    str(): region for gcc.ParmDecl('obj') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c', line=27), region=Region("region-for-type-of-arg-gcc.ParmDecl('obj')"))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c:28

Trace 1:
  Transitions:
    'when PyTuple_Size() fails (not a tuple)'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='Py_ssize_t', loc=gcc.Location(file='tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c', line=29), value=-1)
    str(): (Py_ssize_t)-1 from tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c:29
  region for gcc.ParmDecl('obj') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('obj')")
    str(): region for gcc.ParmDecl('obj') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c', line=27), region=Region("region-for-type-of-arg-gcc.ParmDecl('obj')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_SystemError')) from tests/cpychecker/refcounts/PyTuple_Size/ticket-24/input.c:29
