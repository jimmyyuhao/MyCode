In function 'handle_SET_ITEM_macro':
cc1: warning: memory leak: ob_refcnt of PyLongObject is 1 too high [enabled by default]
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:50:nn: note: PyLongObject was allocated at:     items[2] = PyLong_FromLong(3000);
cc1: note: was expecting final owned ob_refcnt of PyLongObject to be 1 due to object being referenced by: PyTupleObject.ob_item[2] but final ob_refcnt is refs: 2 owned
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:33:nn: note: when PyTuple_New() succeeds at:     tuple = PyTuple_New(3);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:34:nn: note: taking False path at:     if (!tuple) {
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:39:nn: note: reaching:     items[0] = PyLong_FromLong(1000);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:39:nn: note: when PyLong_FromLong() succeeds at:     items[0] = PyLong_FromLong(1000);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:40:nn: note: taking False path at:     if (!items[0]) {
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:44:nn: note: reaching:     items[1] = PyLong_FromLong(2000);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:44:nn: note: when PyLong_FromLong() succeeds at:     items[1] = PyLong_FromLong(2000);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:45:nn: note: taking False path at:     if (!items[1]) {
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:50:nn: note: reaching:     items[2] = PyLong_FromLong(3000);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:50:nn: note: when PyLong_FromLong() succeeds at:     items[2] = PyLong_FromLong(3000);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:50:nn: note: ob_refcnt is now refs: 1 owned
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:51:nn: note: taking False path at:     if (!items[2]) {
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:64:nn: note: reaching:     PyTuple_SET_ITEM(tuple, 0, items[0]);
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:66:nn: note: PyLongObject is now referenced by 1 non-stack value(s): PyTupleObject.ob_item[2]
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:71:nn: note: ob_refcnt is now refs: 2 owned
cc1: note: returning
tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c:24:nn: note: graphical error report for function 'handle_SET_ITEM_macro' written out to 'tests/cpychecker/refcounts/PyTuple_SET_ITEM_macro/incorrect_multiple/input.c.handle_SET_ITEM_macro-refcount-errors.html'
