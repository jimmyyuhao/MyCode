Trace 0:
  Transitions:
    'when PyCObject_FromVoidPtr() succeeds'
    'when PyTuple_Pack() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=44), region=RegionOnHeap('PyTupleObject', gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=44)))
    str(): (struct PyObject *)&RegionOnHeap('PyTupleObject', gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=44)) from tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:44
    r->ob_refcnt: refs: 1 owned
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=44), region=RegionForGlobal(gcc.VarDecl('PyTuple_Type')))
  region for gcc.ParmDecl('self') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('self')")
    str(): region for gcc.ParmDecl('self') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  region for gcc.ParmDecl('args') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('args')")
    str(): region for gcc.ParmDecl('args') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  PyCObject allocated at tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:38:
    repr(): RegionOnHeap('PyCObject', gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=38))
    str(): PyCObject allocated at tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:38
    r->ob_refcnt: refs: 1 owned
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=38), region=RegionForGlobal(gcc.VarDecl('PyCObject_Type')))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:37

Trace 1:
  Transitions:
    'when PyCObject_FromVoidPtr() succeeds'
    'when PyTuple_Pack() fails'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=44), value=0)
    str(): (struct PyObject *)0 from tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:44
  region for gcc.ParmDecl('self') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('self')")
    str(): region for gcc.ParmDecl('self') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  region for gcc.ParmDecl('args') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('args')")
    str(): region for gcc.ParmDecl('args') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  PyCObject allocated at tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:38:
    repr(): RegionOnHeap('PyCObject', gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=38))
    str(): PyCObject allocated at tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:38
    r->ob_refcnt: refs: 1 owned
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=38), region=RegionForGlobal(gcc.VarDecl('PyCObject_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:44

Trace 2:
  Transitions:
    'when PyCObject_FromVoidPtr() fails (when py3k deprecation warnings are enabled and configured to raise exceptions)'
  error: NullPtrArgument()
  error: calling PyTuple_Pack with NULL as argument 3 (obj) at tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:44
  region for gcc.ParmDecl('self') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('self')")
    str(): region for gcc.ParmDecl('self') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  region for gcc.ParmDecl('args') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('args')")
    str(): region for gcc.ParmDecl('args') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:38

Trace 3:
  Transitions:
    'when PyCObject_FromVoidPtr() fails'
  error: NullPtrArgument()
  error: calling PyTuple_Pack with NULL as argument 3 (obj) at tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:44
  region for gcc.ParmDecl('self') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('self')")
    str(): region for gcc.ParmDecl('self') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  region for gcc.ParmDecl('args') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('args')")
    str(): region for gcc.ParmDecl('args') on stack
    r->ob_refcnt: refs: 0 owned, 1 borrowed
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c', line=36), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/PyCObject_FromVoidPtr/incorrect/input.c:38
