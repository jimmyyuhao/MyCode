Trace 0:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 1:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 2:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 3:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 4:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 32
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/combinatorial-explosion/input.c:31

Trace 5:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 6:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 7:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 8:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 9:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 10:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 11:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  region for gcc.ParmDecl('m') on stack:
    repr(): RegionOnStack("region for gcc.ParmDecl('m')")
    str(): region for gcc.ParmDecl('m') on stack
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172
