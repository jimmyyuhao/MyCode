{
	"folder_history":
	[
		"/D/MyCode1/Code/ChainBlock/pyethereum-develop",
		"/D/MyCode/Code/ChainBlock/pyethereum-develop"
	],
	"last_version": 3126,
	"last_window_id": 3,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 480.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/D/MyCode1/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/Default/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 0.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 0.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 0.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 640.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "import rlp\nfrom ethereum.utils import normalize_address, hash32, trie_root, \\\n    big_endian_int, address, int256, encode_hex, decode_hex, encode_int, sha3\nfrom rlp.sedes import big_endian_int, Binary, binary, CountableList\nfrom ethereum import utils\nfrom ethereum import trie\nfrom ethereum.trie import Trie\nfrom ethereum.securetrie import SecureTrie\nfrom ethereum.config import default_config\nfrom ethereum.transactions import Transaction\nfrom ethereum.db import BaseDB\nimport sys\nif sys.version_info.major == 2:\n    from repoze.lru import lru_cache\nelse:\n    from functools import lru_cache\n\n\nclass BlockHeader(rlp.Serializable):\n\n    \"\"\"A block header.\n\n    If the block with this header exists as an instance of :class:`Block`, the\n    connection can be made explicit by setting :attr:`BlockHeader.block`. Then,\n    :attr:`BlockHeader.state_root`, :attr:`BlockHeader.tx_list_root` and\n    :attr:`BlockHeader.receipts_root` always refer to the up-to-date value in\n    the block instance.\n\n    :ivar block: an instance of :class:`Block` or `None`\n    :ivar prevhash: the 32 byte hash of the previous block\n    :ivar uncles_hash: the 32 byte hash of the RLP encoded list of uncle\n                       headers\n    :ivar coinbase: the 20 byte coinbase address\n    :ivar state_root: the root of the block's state trie\n    :ivar tx_list_root: the root of the block's transaction trie\n    :ivar receipts_root: the root of the block's receipts trie\n    :ivar bloom: TODO\n    :ivar difficulty: the block's difficulty\n    :ivar number: the number of ancestors of this block (0 for the genesis\n                  block)\n    :ivar gas_limit: the block's gas limit\n    :ivar gas_used: the total amount of gas used by all transactions in this\n                    block\n    :ivar timestamp: a UNIX timestamp\n    :ivar extra_data: up to 1024 bytes of additional data\n    :ivar nonce: a 32 byte nonce constituting a proof-of-work, or the empty\n                 string as a placeholder\n    \"\"\"\n\n    fields = [\n        ('prevhash', hash32),\n        ('uncles_hash', hash32),\n        ('coinbase', address),\n        ('state_root', trie_root),\n        ('tx_list_root', trie_root),\n        ('receipts_root', trie_root),\n        ('bloom', int256),\n        ('difficulty', big_endian_int),\n        ('number', big_endian_int),\n        ('gas_limit', big_endian_int),\n        ('gas_used', big_endian_int),\n        ('timestamp', big_endian_int),\n        ('extra_data', binary),\n        ('mixhash', binary),\n        ('nonce', binary)\n    ]\n\n    def __init__(self,\n                 prevhash=default_config['GENESIS_PREVHASH'],\n                 uncles_hash=utils.sha3rlp([]),\n                 coinbase=default_config['GENESIS_COINBASE'],\n                 state_root=trie.BLANK_ROOT,\n                 tx_list_root=trie.BLANK_ROOT,\n                 receipts_root=trie.BLANK_ROOT,\n                 bloom=0,\n                 difficulty=default_config['GENESIS_DIFFICULTY'],\n                 number=0,\n                 gas_limit=default_config['GENESIS_GAS_LIMIT'],\n                 gas_used=0,\n                 timestamp=0,\n                 extra_data='',\n                 mixhash=default_config['GENESIS_MIXHASH'],\n                 nonce=''):\n        # at the beginning of a method, locals() is a dict of all arguments\n        fields = {k: v for k, v in locals().items() if k != 'self'}\n        if len(fields['coinbase']) == 40:\n            fields['coinbase'] = decode_hex(fields['coinbase'])\n        assert len(fields['coinbase']) == 20\n        self.block = None\n        super(BlockHeader, self).__init__(**fields)\n            enumerate\n    @property\n    def hash(self):\n        \"\"\"The binary block hash\"\"\"\n        return utils.sha3(rlp.encode(self))\n        \n\n    @property\n    def hex_hash(self):\n        return encode_hex(self.hash)\n\n    @property\n    def mining_hash(self):\n        return utils.sha3(rlp.encode(self, BlockHeader.exclude(['mixhash', 'nonce'])))\n\n    @property\n    def signing_hash(self):\n        return utils.sha3(rlp.encode(self, BlockHeader.exclude(['extra_data'])))\n\n    def to_dict(self):\n        \"\"\"Serialize the header to a readable dictionary.\"\"\"\n        d = {}\n        for field in ('prevhash', 'uncles_hash', 'extra_data', 'nonce',\n                      'mixhash'):\n            d[field] = b'0x' + encode_hex(getattr(self, field))\n        for field in ('state_root', 'tx_list_root', 'receipts_root',\n                      'coinbase'):\n            d[field] = encode_hex(getattr(self, field))\n        for field in ('number', 'difficulty', 'gas_limit', 'gas_used',\n                      'timestamp'):\n            d[field] = utils.to_string(getattr(self, field))\n        d['bloom'] = encode_hex(int256.serialize(self.bloom))\n        assert len(d) == len(BlockHeader.fields)\n        return d\n\n    def __repr__(self):\n        return '<%s(#%d %s)>' % (self.__class__.__name__, self.number,\n                                 encode_hex(self.hash)[:8])\n\n    def __eq__(self, other):\n        \"\"\"Two blockheader are equal iff they have the same hash.\"\"\"\n        return isinstance(other, BlockHeader) and self.hash == other.hash\n\n    def __hash__(self):\n        return utils.big_endian_to_int(self.hash)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n\nclass Block(rlp.Serializable):\n\n    \"\"\"A block.\n\n    All attributes from the block header are accessible via properties\n    (i.e. ``block.prevhash`` is equivalent to ``block.header.prevhash``). It\n    is ensured that no discrepancies between header and block occur.\n\n    :param header: the block header\n    :param transactions: a list of transactions which are replayed if the\n                         state given by the header is not known. If the\n                         state is known, `None` can be used instead of the\n                         empty list.\n    :param uncles: a list of the headers of the uncles of this block\n    :param db: the database in which the block's  state, transactions and\n               receipts are stored (required)\n    :param parent: optional parent which if not given may have to be loaded from\n                   the database for replay\n    \"\"\"\n\n    fields = [\n        ('header', BlockHeader),\n        ('transactions', CountableList(Transaction)),\n        ('uncles', CountableList(BlockHeader))\n    ]\n\n    def __init__(self, header, transactions=None, uncles=None, db=None):\n        # assert isinstance(db, BaseDB), \"No database object given\"\n        # self.db = db\n\n        self.header = header\n        self.transactions = transactions or []\n        self.uncles = uncles or []\n        self.uncles = list(self.uncles)\n\n    def __getattribute__(self, name):\n        try:\n            return rlp.Serializable.__getattribute__(self, name)\n        except AttributeError:\n            return getattr(self.header, name)\n\n    @property\n    def transaction_count(self):\n        return len(self.transactions)\n\n\nBLANK_UNCLES_HASH = sha3(rlp.encode([]))\n\n\nclass FakeHeader():\n\n    def __init__(self, hash='\\x00' * 32, number=0, timestamp=0, difficulty=1, gas_limit=3141592, gas_used=0, uncles_hash=BLANK_UNCLES_HASH):\n        self.hash = hash\n        self.number = number\n        self.timestamp = timestamp\n        self.difficulty = difficulty\n        self.gas_limit = gas_limit\n        self.gas_used = gas_used\n        self.uncles_hash = uncles_hash\n",
					"file": "/D/MyCode1/Code/ChainBlock/pyethereum-develop/ethereum/block.py",
					"file_size": 7311,
					"file_write_time": 131494790418437500,
					"settings":
					{
						"buffer_size": 7332,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Package Control Messages\n========================\n\nSublimeCodeIntel\n----------------\n\n  SublimeCodeIntel\n  ================\n  \n   ____        _     _ _                 ____          _      ___       _       _\n  / ___| _   _| |__ | (_)_ __ ___   ___ / ___|___   __| | ___|_ _|_ __ | |_ ___| |\n  \\___ \\| | | | '_ \\| | | '_ ` _ \\ / _ \\ |   / _ \\ / _` |/ _ \\| || '_ \\| __/ _ \\ |\n   ___) | |_| | |_) | | | | | | | |  __/ |__| (_) | (_| |  __/| || | | | ||  __/ |\n  |____/ \\__,_|_.__/|_|_|_| |_| |_|\\___|\\____\\___/ \\__,_|\\___|___|_| |_|\\__\\___|_|\n  A full-featured code intelligence and smart autocomplete engine for Sublime Text.\n     (Code intelligence plugin ported from Open Komodo Editor to Sublime Text)\n  \n  \n  +-------------------------------- HELP WANTED ---------------------------------+\n  |     Maintaining this project is hard, I do it in my spare time, but I'm      |\n  |     basically all alone. If anyone is interested in contributing, please     |\n  |     contact me. I really need much more help maintaining SublimeCodeIntel    |\n  |                                                                              |\n  |                       Follow me on twitter @germbravo                        |\n  |           You can find us at #sublimecodeintel on irc.freenode.net           |\n  |                                                                              |\n  |             If you like SublimeCodeIntel, please make a donation:            |\n  |        http://sublimecodeintel.github.io/SublimeCodeIntel/donate.html        |\n  +------------------------------------------------------------------------------+\n  \n  \n  Features\n  --------\n  \n  Supports all the languages Komodo Editor supports for Code Intelligence (CIX, CodeIntel2):\n  \n  JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP.\n  \n  \n  Provides the following features:\n  \n  * Jump to Symbol Definition - Jump to the file and line of the definition of a symbol.\n  * Imports autocomplete - Shows autocomplete with the available modules/symbols in real time.\n  * Function Call tooltips - Displays information in the status bar about the working function.\n  \n  \n  + Shortcuts for jump to definition have changed:\n  \n    For Mac OS X:\n      * Jump to definition = ``Control+Click``\n      * Jump to definition = ``Control+Command+Alt+Up``\n      * Go back = ``Control+Command+Alt+Left``\n      * Manual CodeIntel = ``Control+Shift+space``\n  \n    For Linux:\n      * Jump to definition = ``Super+Click``\n      * Jump to definition = ``Control+Super+Alt+Up``\n      * Go back = ``Control+Super+Alt+Left``\n      * Manual CodeIntel = ``Control+Shift+space``\n  \n    For Windows:\n      * Jump to definition = ``Alt+Click``\n      * Jump to definition = ``Control+Windows+Alt+Up``\n      * Go back = ``Control+Windows+Alt+Left``\n      * Manual CodeIntel = ``Control+Shift+space``\n  \n  \n  \n  Notes\n  -----\n  \n  ** Restart Sublime Text after reading this **\n  \n  \n  More information\n  ----------------\n  Please take the time to read the documentation:\n  \n  In case of trouble, please read the Troubleshooting section in the README.\n  \n  * Online - http://sublimecodeintel.github.io/SublimeCodeIntel/\n  * Git - https://github.com/SublimeCodeIntel/SublimeCodeIntel\n  \n  \n  IMPORTANT\n  ---------\n  \n  Do NOT edit the default SublimeCodeIntel settings. Your changes will be lost\n  when SublimeCodeIntel is updated. ALWAYS edit the user SublimeCodeIntel settings\n  by selecting \"Preferences->Package Settings->SublimeCodeIntel->Settings - User\".\n  Note that individual settings you include in your user settings will **completely**\n  replace the corresponding default setting, so you must provide that setting in its entirety.\n",
					"settings":
					{
						"buffer_size": 3795,
						"line_ending": "Windows",
						"name": "Package Control Messages",
						"read_only": true,
						"scratch": true
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 375.0,
				"last_filter": "Package Control: in",
				"selected_items":
				[
					[
						"Package Control: in",
						"Package Control: Install Package"
					]
				],
				"width": 386.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/D/MyCode1/Code/ChainBlock/pyethereum-develop",
				"/D/MyCode1/Code/ChainBlock/pyethereum-develop/ethereum"
			],
			"file_history":
			[
				"/D/MyCode1/Tools/SublimeText3_ha/Sublime Text 3.3126x86/Data/Packages/Default/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 36.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"self"
				],
				"highlight": true,
				"in_selection": true,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "D:\\MyCode1\\Code\\ChainBlock\\pyethereum-develop"
				}
			],
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/D/MyCode1/Code/ChainBlock/pyethereum-develop/ethereum/block.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7332,
								"regions":
								{
								},
								"selection":
								[
									[
										3602,
										3602
									],
									[
										3604,
										3604
									]
								],
								"settings":
								{
									"auto_complete": true,
									"origin_encoding": "ASCII",
									"syntax": "Packages/Python/Python.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1275.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 1,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3795,
								"regions":
								{
								},
								"selection":
								[
									[
										3795,
										3795
									]
								],
								"settings":
								{
									"auto_indent": false,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_width": 2,
									"word_wrap": true
								},
								"translation.x": 0.0,
								"translation.y": 714.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 25.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,2,3,-32000,-32000,-1,-1,636,110,110,758",
			"project": "",
			"replace":
			{
				"height": 46.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 3,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
			"/D/MyCode/Code/ChainBlock/pyethereum-develop/pyethereum-develop.sublime-workspace"
		]
	}
}
